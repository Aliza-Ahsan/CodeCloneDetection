{"cells":[{"source":"<a href=\"https://www.kaggle.com/code/alizaahsan/bcbgit-15march?scriptVersionId=228831670\" target=\"_blank\"><img align=\"left\" alt=\"Kaggle\" title=\"Open in Kaggle\" src=\"https://kaggle.com/static/images/open-in-kaggle.svg\"></a>","metadata":{},"cell_type":"markdown"},{"cell_type":"code","execution_count":1,"id":"c8d01a2e","metadata":{"_cell_guid":"b1076dfc-b9ad-4769-8c92-a6c4dae69d19","_uuid":"8f2839f25d086af736a60e9eeb907d3b93b6e0e5","execution":{"iopub.execute_input":"2025-03-21T07:10:38.649113Z","iopub.status.busy":"2025-03-21T07:10:38.648811Z","iopub.status.idle":"2025-03-21T07:10:39.385874Z","shell.execute_reply":"2025-03-21T07:10:39.385205Z"},"papermill":{"duration":0.749064,"end_time":"2025-03-21T07:10:39.387393","exception":false,"start_time":"2025-03-21T07:10:38.638329","status":"completed"},"tags":[]},"outputs":[],"source":["# This Python 3 environment comes with many helpful analytics libraries installed\n","# It is defined by the kaggle/python Docker image: https://github.com/kaggle/docker-python\n","# For example, here's several helpful packages to load\n","\n","import numpy as np # linear algebra\n","import pandas as pd # data processing, CSV file I/O (e.g. pd.read_csv)\n","\n","# Input data files are available in the read-only \"../input/\" directory\n","# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n","\n","import os\n","for dirname, _, filenames in os.walk('/kaggle/input'):\n","    for filename in filenames:\n","        print(os.path.join(dirname, filename))\n","\n","# You can write up to 20GB to the current directory (/kaggle/working/) that gets preserved as output when you create a version using \"Save & Run All\" \n","# You can also write temporary files to /kaggle/temp/, but they won't be saved outside of the current session"]},{"cell_type":"markdown","id":"a472aa37","metadata":{"papermill":{"duration":0.006642,"end_time":"2025-03-21T07:10:39.401606","exception":false,"start_time":"2025-03-21T07:10:39.394964","status":"completed"},"tags":[]},"source":["## 1. Gathering Data"]},{"cell_type":"code","execution_count":2,"id":"5b4ce620","metadata":{"execution":{"iopub.execute_input":"2025-03-21T07:10:39.416364Z","iopub.status.busy":"2025-03-21T07:10:39.415939Z","iopub.status.idle":"2025-03-21T07:11:03.372583Z","shell.execute_reply":"2025-03-21T07:11:03.371516Z"},"papermill":{"duration":23.965695,"end_time":"2025-03-21T07:11:03.374116","exception":false,"start_time":"2025-03-21T07:10:39.408421","status":"completed"},"tags":[]},"outputs":[{"data":{"application/vnd.jupyter.widget-view+json":{"model_id":"d4833ba6d1d341449034f4357bc23145","version_major":2,"version_minor":0},"text/plain":["README.md:   0%|          | 0.00/6.94k [00:00<?, ?B/s]"]},"metadata":{},"output_type":"display_data"},{"data":{"application/vnd.jupyter.widget-view+json":{"model_id":"05251b3b4fd74dd8a1d9e63401ae03d1","version_major":2,"version_minor":0},"text/plain":["train-00000-of-00006.parquet:   0%|          | 0.00/136M [00:00<?, ?B/s]"]},"metadata":{},"output_type":"display_data"},{"data":{"application/vnd.jupyter.widget-view+json":{"model_id":"3243b3332a39402a964214305ad4db59","version_major":2,"version_minor":0},"text/plain":["train-00001-of-00006.parquet:   0%|          | 0.00/142M [00:00<?, ?B/s]"]},"metadata":{},"output_type":"display_data"},{"data":{"application/vnd.jupyter.widget-view+json":{"model_id":"046ba271c6e240ecb7d50ad8194bcc95","version_major":2,"version_minor":0},"text/plain":["train-00002-of-00006.parquet:   0%|          | 0.00/136M [00:00<?, ?B/s]"]},"metadata":{},"output_type":"display_data"},{"data":{"application/vnd.jupyter.widget-view+json":{"model_id":"304b1e03ece142d5a480bc92ded76798","version_major":2,"version_minor":0},"text/plain":["train-00003-of-00006.parquet:   0%|          | 0.00/136M [00:00<?, ?B/s]"]},"metadata":{},"output_type":"display_data"},{"data":{"application/vnd.jupyter.widget-view+json":{"model_id":"ad757822060e471998df00abb8051e80","version_major":2,"version_minor":0},"text/plain":["train-00004-of-00006.parquet:   0%|          | 0.00/136M [00:00<?, ?B/s]"]},"metadata":{},"output_type":"display_data"},{"data":{"application/vnd.jupyter.widget-view+json":{"model_id":"57699295a04a4aafaf0fb237bca6dffa","version_major":2,"version_minor":0},"text/plain":["train-00005-of-00006.parquet:   0%|          | 0.00/136M [00:00<?, ?B/s]"]},"metadata":{},"output_type":"display_data"},{"data":{"application/vnd.jupyter.widget-view+json":{"model_id":"b15ffd8de65d4356979220c713f53420","version_major":2,"version_minor":0},"text/plain":["validation-00000-of-00003.parquet:   0%|          | 0.00/79.3M [00:00<?, ?B/s]"]},"metadata":{},"output_type":"display_data"},{"data":{"application/vnd.jupyter.widget-view+json":{"model_id":"44b01020af22482f92e59a9d5dbb5714","version_major":2,"version_minor":0},"text/plain":["validation-00001-of-00003.parquet:   0%|          | 0.00/79.4M [00:00<?, ?B/s]"]},"metadata":{},"output_type":"display_data"},{"data":{"application/vnd.jupyter.widget-view+json":{"model_id":"3c9a67ffb91541ae94187c97e12ecd19","version_major":2,"version_minor":0},"text/plain":["validation-00002-of-00003.parquet:   0%|          | 0.00/79.4M [00:00<?, ?B/s]"]},"metadata":{},"output_type":"display_data"},{"data":{"application/vnd.jupyter.widget-view+json":{"model_id":"3fb0ddeac9a449caa2ce87baa4d5a042","version_major":2,"version_minor":0},"text/plain":["test-00000-of-00003.parquet:   0%|          | 0.00/73.3M [00:00<?, ?B/s]"]},"metadata":{},"output_type":"display_data"},{"data":{"application/vnd.jupyter.widget-view+json":{"model_id":"8d736d46761e4ce9aee0e9e20c54bed5","version_major":2,"version_minor":0},"text/plain":["test-00001-of-00003.parquet:   0%|          | 0.00/73.5M [00:00<?, ?B/s]"]},"metadata":{},"output_type":"display_data"},{"data":{"application/vnd.jupyter.widget-view+json":{"model_id":"f44b1f877be04381809171150c81557d","version_major":2,"version_minor":0},"text/plain":["test-00002-of-00003.parquet:   0%|          | 0.00/73.5M [00:00<?, ?B/s]"]},"metadata":{},"output_type":"display_data"},{"data":{"application/vnd.jupyter.widget-view+json":{"model_id":"39dbd2c123464f0cb401529f98df18bf","version_major":2,"version_minor":0},"text/plain":["Generating train split:   0%|          | 0/901028 [00:00<?, ? examples/s]"]},"metadata":{},"output_type":"display_data"},{"data":{"application/vnd.jupyter.widget-view+json":{"model_id":"c46643a0146044549bd31d96a89909ae","version_major":2,"version_minor":0},"text/plain":["Generating validation split:   0%|          | 0/415416 [00:00<?, ? examples/s]"]},"metadata":{},"output_type":"display_data"},{"data":{"application/vnd.jupyter.widget-view+json":{"model_id":"d47d334b6a5043febe8713168ad152db","version_major":2,"version_minor":0},"text/plain":["Generating test split:   0%|          | 0/415416 [00:00<?, ? examples/s]"]},"metadata":{},"output_type":"display_data"},{"name":"stdout","output_type":"stream","text":["Loaded 100 function pairs from BCB dataset.\n"]}],"source":["import numpy as np\n","import datasets\n","\n","# Load BCB dataset from Hugging Face\n","dataset = datasets.load_dataset(\"code_x_glue_cc_clone_detection_big_clone_bench\", split=\"train\")\n","\n","# Select 100 samples (for quick testing)\n","data = dataset.select(range(100))\n","\n","# Extract function pairs and labels\n","X1 = np.array([sample['func1'] for sample in data])  # First function in pair\n","X2 = np.array([sample['func2'] for sample in data])  # Second function in pair\n","y = np.array([sample['label'] for sample in data])   # Labels: 1 (Clone), 0 (Not Clone)\n","print(f\"Loaded {len(X1)} function pairs from BCB dataset.\")"]},{"cell_type":"code","execution_count":3,"id":"d4ee2ab4","metadata":{"execution":{"iopub.execute_input":"2025-03-21T07:11:03.39373Z","iopub.status.busy":"2025-03-21T07:11:03.393231Z","iopub.status.idle":"2025-03-21T07:12:04.502136Z","shell.execute_reply":"2025-03-21T07:12:04.501191Z"},"papermill":{"duration":61.12975,"end_time":"2025-03-21T07:12:04.513237","exception":false,"start_time":"2025-03-21T07:11:03.383487","status":"completed"},"tags":[]},"outputs":[{"name":"stdout","output_type":"stream","text":["Final Train Dataset Size: (901028, 6)\n","   id       id1       id2                                              func1  \\\n","0   0  13988825   8660836      private void setNodekeyInJsonResponse(Stri...   \n","1   1     80378  18548122      public static void test(String args[]) {\\n...   \n","2   2  21354223   7421563      public String kodetu(String testusoila) {\\...   \n","3   3  15826299  19728871      public static void printResponseHeaders(St...   \n","4   4   9938081  11517213      public void load(String fileName) {\\n     ...   \n","\n","                                               func2  label  \n","0      public void transform(String style, String...  False  \n","1      private static String loadUrlToString(Stri...   True  \n","2      private StringBuffer encoder(String arg) {...   True  \n","3      public static String getEncodedPassword(St...  False  \n","4      private static void copyFile(File sourceFi...  False  \n"]}],"source":["import datasets\n","\n","# Load full training dataset (all splits)\n","train_dataset = datasets.load_dataset(\"code_x_glue_cc_clone_detection_big_clone_bench\", split=\"train\")\n","\n","# Convert to Pandas DataFrame for easier handling\n","train_df = train_dataset.to_pandas()\n","\n","# Save to a single CSV file (optional)\n","train_df.to_csv(\"bcb_train.csv\", index=False)\n","\n","print(f\"Final Train Dataset Size: {train_df.shape}\")\n","print(train_df.head())\n"]},{"cell_type":"code","execution_count":4,"id":"e5b51a02","metadata":{"execution":{"iopub.execute_input":"2025-03-21T07:12:04.532747Z","iopub.status.busy":"2025-03-21T07:12:04.53242Z","iopub.status.idle":"2025-03-21T07:12:04.540266Z","shell.execute_reply":"2025-03-21T07:12:04.539412Z"},"papermill":{"duration":0.018835,"end_time":"2025-03-21T07:12:04.541463","exception":false,"start_time":"2025-03-21T07:12:04.522628","status":"completed"},"tags":[]},"outputs":[{"name":"stdout","output_type":"stream","text":["Index(['id', 'id1', 'id2', 'func1', 'func2', 'label'], dtype='object')\n","id        int32\n","id1       int32\n","id2       int32\n","func1    object\n","func2    object\n","label      bool\n","dtype: object\n","   id       id1       id2                                              func1  \\\n","0   0  13988825   8660836      private void setNodekeyInJsonResponse(Stri...   \n","1   1     80378  18548122      public static void test(String args[]) {\\n...   \n","2   2  21354223   7421563      public String kodetu(String testusoila) {\\...   \n","3   3  15826299  19728871      public static void printResponseHeaders(St...   \n","4   4   9938081  11517213      public void load(String fileName) {\\n     ...   \n","\n","                                               func2  label  \n","0      public void transform(String style, String...  False  \n","1      private static String loadUrlToString(Stri...   True  \n","2      private StringBuffer encoder(String arg) {...   True  \n","3      public static String getEncodedPassword(St...  False  \n","4      private static void copyFile(File sourceFi...  False  \n"]}],"source":["print(train_df.columns)  # Ensure all expected columns exist\n","print(train_df.dtypes)   # Check data types\n","print(train_df.iloc[:5]) # Print first 5 rows clearly"]},{"cell_type":"code","execution_count":5,"id":"401fe2cc","metadata":{"execution":{"iopub.execute_input":"2025-03-21T07:12:04.559524Z","iopub.status.busy":"2025-03-21T07:12:04.559297Z","iopub.status.idle":"2025-03-21T07:12:04.566383Z","shell.execute_reply":"2025-03-21T07:12:04.565596Z"},"papermill":{"duration":0.018505,"end_time":"2025-03-21T07:12:04.568714","exception":false,"start_time":"2025-03-21T07:12:04.550209","status":"completed"},"tags":[]},"outputs":[{"name":"stdout","output_type":"stream","text":["   id       id1       id2  \\\n","0   0  13988825   8660836   \n","1   1     80378  18548122   \n","2   2  21354223   7421563   \n","3   3  15826299  19728871   \n","4   4   9938081  11517213   \n","5   5  18220543  17366812   \n","6   6  22328849  17334846   \n","7   7  19130322  15710690   \n","8   8   1111832    789472   \n","9   9   7046481  18317332   \n","\nfunc1  \\\nprivate void setNodekeyInJsonResponse(String service) throws Exception {\\n        String filename = this.baseDirectory + service + \".json\";\\n        Scanner s = new Scanner(new File(filename));\\n        PrintWriter fw = new PrintWriter(new File(filename + \".new\"));\\n        while (s.hasNextLine()) {\\n            fw.println(s.nextLine().replaceAll(\"NODEKEY\", this.key));\\n        }\\n        s.close();\\n        fw.close();\\n        (new File(filename + \".new\")).renameTo(new File(filename));\\n    }\\n   \npublic static void test(String args[]) {\\n        int trace;\\n        int bytes_read = 0;\\n        int last_contentLenght = 0;\\n        try {\\n            BufferedReader reader;\\n            URL url;\\n            url = new URL(args[0]);\\n            URLConnection istream = url.openConnection();\\n            last_contentLenght = istream.getContentLength();\\n            reader = new BufferedReader(new InputStreamReader(istream.getInputStream()));\\n            System.out.println(url.toString());\\n            String line;\\n            trace = t2pNewTrace();\\n            while ((line = reader.readLine()) != null) {\\n                bytes_read = bytes_read + line.length() + 1;\\n                t2pProcessLine(trace, line);\\n            }\\n            t2pHandleEventPairs(trace);\\n            t2pSort(trace, 0);\\n            t2pExportTrace(trace, new String(\"pngtest2.png\"), 1000, 700, (float) 0, (float) 33);\\n            t2pExportTrace(trace, new String(\"pngtest3.png\"), 1000, 700, (float) 2.3, (float) 2.44);\\n            System.out.println(\"Press any key to contiune read from stream !!!\");\\n            System.out.println(t2pGetProcessName(trace, 0));\\n            System.in.read();\\n            istream = url.openConnection();\\n            if (last_contentLenght != istream.getContentLength()) {\\n                istream = url.openConnection();\\n                istream.setRequestProperty(\"Range\", \"bytes=\" + Integer.toString(bytes_read) + \"-\");\\n                System.out.println(Integer.toString(istream.getContentLength()));\\n                reader = new BufferedReader(new InputStreamReader(istream.getInputStream()));\\n                while ((line = reader.readLine()) != null) {\\n                    System.out.println(line);\\n                    t2pProcessLine(trace, line);\\n                }\\n            } else System.out.println(\"File not changed !\");\\n            t2pDeleteTrace(trace);\\n        } catch (MalformedURLException e) {\\n            System.out.println(\"MalformedURLException !!!\");\\n        } catch (IOException e) {\\n            System.out.println(\"File not found \" + args[0]);\\n        }\\n        ;\\n    }\\n   \npublic String kodetu(String testusoila) {\\n        MessageDigest md = null;\\n        try {\\n            md = MessageDigest.getInstance(\"SHA\");\\n            md.update(testusoila.getBytes(\"UTF-8\"));\\n        } catch (NoSuchAlgorithmException e) {\\n            new MezuLeiho(\"Ez da zifraketa algoritmoa aurkitu\", \"Ados\", \"Zifraketa Arazoa\", JOptionPane.ERROR_MESSAGE);\\n            e.printStackTrace();\\n        } catch (UnsupportedEncodingException e) {\\n            new MezuLeiho(\"Errorea kodetzerakoan\", \"Ados\", \"Kodeketa Errorea\", JOptionPane.ERROR_MESSAGE);\\n            e.printStackTrace();\\n        }\\n        byte raw[] = md.digest();\\n        String hash = (new BASE64Encoder()).encode(raw);\\n        return hash;\\n    }\\n   \npublic static void printResponseHeaders(String address) {\\n        logger.info(\"Address: \" + address);\\n        try {\\n            URL url = new URL(address);\\n            URLConnection conn = url.openConnection();\\n            for (int i = 0; ; i++) {\\n                String headerName = conn.getHeaderFieldKey(i);\\n                String headerValue = conn.getHeaderField(i);\\n                if (headerName == null && headerValue == null) {\\n                    break;\\n                }\\n                if (headerName == null) {\\n                    logger.info(headerValue);\\n                    continue;\\n                }\\n                logger.info(headerName + \" \" + headerValue);\\n            }\\n        } catch (Exception e) {\\n            logger.error(\"Exception Message: \" + e.getMessage());\\n        }\\n    }\\n   \npublic void load(String fileName) {\\n        BufferedReader bufReader;\\n        loaded = false;\\n        vector.removeAllElements();\\n        try {\\n            if (fileName.startsWith(\"http:\")) {\\n                URL url = new URL(fileName);\\n                bufReader = new BufferedReader(new InputStreamReader(url.openStream()));\\n            } else bufReader = new BufferedReader(new FileReader(fileName));\\n            String inputLine;\\n            while ((inputLine = bufReader.readLine()) != null) {\\n                if (listener != null) listener.handleLine(inputLine); else vector.add(inputLine);\\n            }\\n            bufReader.close();\\n            loaded = true;\\n        } catch (IOException e) {\\n            errorMsg = e.getMessage();\\n        }\\n    }\\n   \nprivate MapProperties readProperties(URL url) {\\n        @SuppressWarnings(\"unchecked\") MapProperties properties = new MapProperties(new LinkedHashMap());\\n        InputStream is = null;\\n        try {\\n            is = url.openStream();\\n            properties.load(is);\\n        } catch (IOException ex) {\\n            throw new RuntimeException(ex);\\n        } finally {\\n            StreamUtils.close(is);\\n        }\\n        return properties;\\n    }\\n   \n","6                                                                                                                                                                                                                                   protected void doRestoreOrganize() throws Exception {\\n        Connection con = null;\\n        PreparedStatement ps = null;\\n        ResultSet result = null;\\n        String strDelQuery = \"DELETE FROM \" + Common.ORGANIZE_TABLE;\\n        String strSelQuery = \"SELECT organize_id,organize_type_id,organize_name,organize_manager,\" + \"organize_describe,work_type,show_order,position_x,position_y \" + \"FROM \" + Common.ORGANIZE_B_TABLE + \" \" + \"WHERE version_no = ?\";\\n        String strInsQuery = \"INSERT INTO \" + Common.ORGANIZE_TABLE + \" \" + \"(organize_id,organize_type_id,organize_name,organize_manager,\" + \"organize_describe,work_type,show_order,position_x,position_y) \" + \"VALUES (?,?,?,?,?,?,?,?,?)\";\\n        DBOperation dbo = factory.createDBOperation(POOL_NAME);\\n        try {\\n            try {\\n                con = dbo.getConnection();\\n                con.setAutoCommit(false);\\n                ps = con.prepareStatement(strDelQuery);\\n                ps.executeUpdate();\\n                ps = con.prepareStatement(strSelQuery);\\n                ps.setInt(1, this.versionNO);\\n                result = ps.executeQuery();\\n                ps = con.prepareStatement(strInsQuery);\\n                while (result.next()) {\\n                    ps.setString(1, result.getString(\"organize_id\"));\\n                    ps.setString(2, result.getString(\"organize_type_id\"));\\n                    ps.setString(3, result.getString(\"organize_name\"));\\n                    ps.setString(4, result.getString(\"organize_manager\"));\\n                    ps.setString(5, result.getString(\"organize_describe\"));\\n                    ps.setString(6, result.getString(\"work_type\"));\\n                    ps.setInt(7, result.getInt(\"show_order\"));\\n                    ps.setInt(8, result.getInt(\"position_x\"));\\n                    ps.setInt(9, result.getInt(\"position_y\"));\\n                    int resultCount = ps.executeUpdate();\\n                    if (resultCount != 1) {\\n                        con.rollback();\\n                        throw new CesSystemException(\"Organize_backup.doRestoreOrganize(): ERROR Inserting data \" + \"in T_SYS_ORGANIZE INSERT !! resultCount = \" + resultCount);\\n                    }\\n                }\\n                con.commit();\\n            } catch (SQLException se) {\\n                con.rollback();\\n                throw new CesSystemException(\"Organize_backup.doRestoreOrganize(): SQLException:  \" + se);\\n            } finally {\\n                con.setAutoCommit(true);\\n                close(dbo, ps, result);\\n            }\\n        } catch (SQLException se) {\\n            throw new CesSystemException(\"Organize_backup.doRestoreOrganize(): SQLException while committing or rollback\");\\n        }\\n    }\\n   \nprivate String sha1(String s) {\\n        String encrypt = s;\\n        try {\\n            MessageDigest sha = MessageDigest.getInstance(\"SHA-1\");\\n            sha.update(s.getBytes());\\n            byte[] digest = sha.digest();\\n            final StringBuffer buffer = new StringBuffer();\\n            for (int i = 0; i < digest.length; ++i) {\\n                final byte b = digest[i];\\n                final int value = (b & 0x7F) + (b < 0 ? 128 : 0);\\n                buffer.append(value < 16 ? \"0\" : \"\");\\n                buffer.append(Integer.toHexString(value));\\n            }\\n            encrypt = buffer.toString();\\n        } catch (NoSuchAlgorithmException e) {\\n            e.printStackTrace();\\n        }\\n        return encrypt;\\n    }\\n   \n","8      private void storeFieldMap(WorkingContent c, Connection conn) throws SQLException {\\n        SQLDialect dialect = getDatabase().getSQLDialect();\\n        if (TRANSACTIONS_ENABLED) {\\n            conn.setAutoCommit(false);\\n        }\\n        try {\\n            Object thisKey = c.getPrimaryKey();\\n            deleteFieldContent(thisKey, conn);\\n            PreparedStatement ps = null;\\n            StructureItem nextItem;\\n            Map fieldMap = c.getFieldMap();\\n            String type;\\n            Object value, siKey;\\n            for (Iterator i = c.getStructure().getStructureItems().iterator(); i.hasNext(); ) {\\n                nextItem = (StructureItem) i.next();\\n                type = nextItem.getDataType().toUpperCase();\\n                siKey = nextItem.getPrimaryKey();\\n                value = fieldMap.get(nextItem.getName());\\n                try {\\n                    if (type.equals(StructureItem.DATE)) {\\n                        ps = conn.prepareStatement(sqlConstants.get(\"INSERT_DATE_FIELD\"));\\n                        ps.setObject(1, thisKey);\\n                        ps.setObject(2, siKey);\\n                        dialect.setDate(ps, 3, (Date) value);\\n                        ps.executeUpdate();\\n                    } else if (type.equals(StructureItem.INT) || type.equals(StructureItem.FLOAT) || type.equals(StructureItem.VARCHAR)) {\\n                        ps = conn.prepareStatement(sqlConstants.get(\"INSERT_\" + type + \"_FIELD\"));\\n                        ps.setObject(1, thisKey);\\n                        ps.setObject(2, siKey);\\n                        if (value != null) {\\n                            ps.setObject(3, value);\\n                        } else {\\n                            int sqlType = Types.INTEGER;\\n                            if (type.equals(StructureItem.FLOAT)) {\\n                                sqlType = Types.FLOAT;\\n                            } else if (type.equals(StructureItem.VARCHAR)) {\\n                                sqlType = Types.VARCHAR;\\n                            }\\n                            ps.setNull(3, sqlType);\\n                        }\\n                        ps.executeUpdate();\\n                    } else if (type.equals(StructureItem.TEXT)) {\\n                        setTextField(c, siKey, (String) value, conn);\\n                    }\\n                    if (ps != null) {\\n                        ps.close();\\n                        ps = null;\\n                    }\\n                } finally {\\n                    if (ps != null) ps.close();\\n                }\\n            }\\n            if (TRANSACTIONS_ENABLED) {\\n                conn.commit();\\n            }\\n        } catch (SQLException e) {\\n            if (TRANSACTIONS_ENABLED) {\\n                conn.rollback();\\n            }\\n            throw e;\\n        } finally {\\n            if (TRANSACTIONS_ENABLED) {\\n                conn.setAutoCommit(true);\\n            }\\n        }\\n    }\\n   \npublic InlineImageChunk(URL url) {\\n        super();\\n        this.url = url;\\n        try {\\n            URLConnection urlConn = url.openConnection();\\n            urlConn.setReadTimeout(15000);\\n            ImageInputStream iis = ImageIO.createImageInputStream(urlConn.getInputStream());\\n            Iterator<ImageReader> readers = ImageIO.getImageReaders(iis);\\n            if (readers.hasNext()) {\\n                ImageReader reader = readers.next();\\n                reader.setInput(iis, true);\\n                this.width = reader.getWidth(0);\\n                this.ascent = reader.getHeight(0);\\n                this.descent = 0;\\n                reader.dispose();\\n            } else System.err.println(\"cannot read width and height of image \" + url + \" - no suitable reader!\");\\n        } catch (Exception exc) {\\n            System.err.println(\"cannot read width and height of image \" + url + \" due to exception:\");\\n            System.err.println(exc);\\n            exc.printStackTrace(System.err);\\n        }\\n    }\\n   \n","\nfunc2  \\\npublic void transform(String style, String spec, OutputStream out) throws IOException {\\n        URL url = new URL(rootURL, spec);\\n        InputStream in = new PatchXMLSymbolsStream(new StripDoctypeStream(url.openStream()));\\n        transform(style, in, out);\\n        in.close();\\n    }\\n   \nprivate static String loadUrlToString(String a_url) throws IOException {\\n        URL l_url1 = new URL(a_url);\\n        BufferedReader br = new BufferedReader(new InputStreamReader(l_url1.openStream()));\\n        String l_content = \"\";\\n        String l_ligne = null;\\n        l_content = br.readLine();\\n        while ((l_ligne = br.readLine()) != null) {\\n            l_content += AA.SL + l_ligne;\\n        }\\n        return l_content;\\n    }\\n   \nprivate StringBuffer encoder(String arg) {\\n        if (arg == null) {\\n            arg = \"\";\\n        }\\n        MessageDigest md5 = null;\\n        try {\\n            md5 = MessageDigest.getInstance(\"MD5\");\\n            md5.update(arg.getBytes(SysConstant.charset));\\n        } catch (Exception e) {\\n            e.printStackTrace();\\n        }\\n        return toHex(md5.digest());\\n    }\\n   \npublic static String getEncodedPassword(String buff) {\\n        if (buff == null) return null;\\n        String t = new String();\\n        try {\\n            MessageDigest md = MessageDigest.getInstance(\"MD5\");\\n            md.update(buff.getBytes());\\n            byte[] r = md.digest();\\n            for (int i = 0; i < r.length; i++) {\\n                t += toHexString(r[i]);\\n            }\\n        } catch (Exception e) {\\n            e.printStackTrace();\\n        }\\n        return t;\\n    }\\n   \nprivate static void copyFile(File sourceFile, File destFile) {\\n        try {\\n            if (!destFile.exists()) {\\n                destFile.createNewFile();\\n            }\\n            FileChannel source = null;\\n            FileChannel destination = null;\\n            try {\\n                source = new FileInputStream(sourceFile).getChannel();\\n                destination = new FileOutputStream(destFile).getChannel();\\n                destination.transferFrom(source, 0, source.size());\\n            } finally {\\n                if (source != null) {\\n                    source.close();\\n                }\\n                if (destination != null) {\\n                    destination.close();\\n                }\\n            }\\n        } catch (Exception e) {\\n            throw new RuntimeException(e);\\n        }\\n    }\\n   \n","5      public String tranportRemoteUnitToLocalTempFile(String urlStr) throws UnitTransportException {\\n        InputStream input = null;\\n        BufferedOutputStream bos = null;\\n        File tempUnit = null;\\n        try {\\n            URL url = null;\\n            int total = 0;\\n            try {\\n                url = new URL(urlStr);\\n                input = url.openStream();\\n                URLConnection urlConnection;\\n                urlConnection = url.openConnection();\\n                total = urlConnection.getContentLength();\\n            } catch (IOException e) {\\n                throw new UnitTransportException(String.format(\"Can't get remote file [%s].\", urlStr), e);\\n            }\\n            String unitName = urlStr.substring(urlStr.lastIndexOf('/') + 1);\\n            tempUnit = null;\\n            try {\\n                if (StringUtils.isNotEmpty(unitName)) tempUnit = new File(CommonUtil.getTempDir(), unitName); else tempUnit = File.createTempFile(CommonUtil.getTempDir(), \"tempUnit\");\\n                File parent = tempUnit.getParentFile();\\n                FileUtils.forceMkdir(parent);\\n                if (!tempUnit.exists()) FileUtils.touch(tempUnit);\\n                bos = new BufferedOutputStream(new FileOutputStream(tempUnit));\\n            } catch (FileNotFoundException e) {\\n                throw new UnitTransportException(String.format(\"Can't find temp file [%s].\", tempUnit.getAbsolutePath()), e);\\n            } catch (IOException e) {\\n                throw new UnitTransportException(String.format(\"Can't create temp file [%s].\", tempUnit.getAbsolutePath()), e);\\n            } catch (DeployToolException e) {\\n                throw new UnitTransportException(String.format(\"Error when create temp file [%s].\", tempUnit), e);\\n            }\\n            logger.info(String.format(\"Use [%s] for http unit [%s].\", tempUnit.getAbsoluteFile(), urlStr));\\n            int size = -1;\\n            try {\\n                size = IOUtils.copy(input, bos);\\n                bos.flush();\\n            } catch (IOException e) {\\n                logger.info(String.format(\"Error when download [%s] to [%s].\", urlStr, tempUnit));\\n            }\\n            if (size != total) throw new UnitTransportException(String.format(\"The file size is not right when download http unit [%s]\", urlStr));\\n        } finally {\\n            if (input != null) IOUtils.closeQuietly(input);\\n            if (bos != null) IOUtils.closeQuietly(bos);\\n        }\\n        logger.info(String.format(\"Download unit to [%s].\", tempUnit.getAbsolutePath()));\\n        return tempUnit.getAbsolutePath();\\n    }\\n   \nstatic String encodeEmailAsUserId(String email) {\\n        try {\\n            MessageDigest md5 = MessageDigest.getInstance(\"MD5\");\\n            md5.update(email.toLowerCase().getBytes());\\n            StringBuilder builder = new StringBuilder();\\n            builder.append(\"1\");\\n            for (byte b : md5.digest()) {\\n                builder.append(String.format(\"%02d\", new Object[] { Integer.valueOf(b & 0xFF) }));\\n            }\\n            return builder.toString().substring(0, 20);\\n        } catch (NoSuchAlgorithmException ex) {\\n        }\\n        return \"\";\\n    }\\n   \nuppressWarnings(\"unused\")\\n    private String getMD5(String value) {\\n        MessageDigest md5;\\n        try {\\n            md5 = MessageDigest.getInstance(\"MD5\");\\n        } catch (NoSuchAlgorithmException e) {\\n            return \"\";\\n        }\\n        md5.reset();\\n        md5.update(value.getBytes());\\n        byte[] messageDigest = md5.digest();\\n        StringBuffer hexString = new StringBuffer();\\n        for (int i = 0; i < messageDigest.length; i++) {\\n            hexString.append(Integer.toHexString(0xFF & messageDigest[i]));\\n        }\\n        String hashedPassword = hexString.toString();\\n        return hashedPassword;\\n    }\\n   \npublic void elimina(Pedido pe) throws errorSQL, errorConexionBD {\\n        System.out.println(\"GestorPedido.elimina()\");\\n        int id = pe.getId();\\n        String sql;\\n        Statement stmt = null;\\n        try {\\n            gd.begin();\\n            sql = \"DELETE FROM pedido WHERE id=\" + id;\\n            System.out.println(\"Ejecutando: \" + sql);\\n            stmt = gd.getConexion().createStatement();\\n            stmt.executeUpdate(sql);\\n            System.out.println(\"executeUpdate\");\\n            gd.commit();\\n            System.out.println(\"commit\");\\n            stmt.close();\\n        } catch (SQLException e) {\\n            gd.rollback();\\n            throw new errorSQL(e.toString());\\n        } catch (errorConexionBD e) {\\n            System.err.println(\"Error en GestorPedido.elimina(): \" + e);\\n        } catch (errorSQL e) {\\n            System.err.println(\"Error en GestorPedido.elimina(): \" + e);\\n        }\\n    }\\n   \n","9                                                                                                                                                                                                                                                                                                                                                                               void execute(Connection conn, Component parent, String context, final ProgressMonitor progressMonitor, ProgressWrapper progressWrapper) throws Exception {\\n            int noOfComponents = m_components.length;\\n            Statement statement = null;\\n            StringBuffer pmNoteBuf = new StringBuffer(m_update ? \"Updating \" : \"Creating \");\\n            pmNoteBuf.append(m_itemNameAbbrev);\\n            pmNoteBuf.append(\" \");\\n            pmNoteBuf.append(m_itemNameValue);\\n            final String pmNote = pmNoteBuf.toString();\\n            progressMonitor.setNote(pmNote);\\n            try {\\n                conn.setAutoCommit(false);\\n                int id = -1;\\n                if (m_update) {\\n                    statement = conn.createStatement();\\n                    String sql = getUpdateSql(noOfComponents, m_id);\\n                    statement.executeUpdate(sql);\\n                    id = m_id;\\n                    if (m_indexesChanged) deleteComponents(conn, id);\\n                } else {\\n                    PreparedStatement pStmt = getInsertPrepStmt(conn, noOfComponents);\\n                    pStmt.executeUpdate();\\n                    Integer res = DbCommon.getAutoGenId(parent, context, pStmt);\\n                    if (res == null) return;\\n                    id = res.intValue();\\n                }\\n                if (!m_update || m_indexesChanged) {\\n                    PreparedStatement insertCompPrepStmt = conn.prepareStatement(getInsertComponentPrepStmtSql());\\n                    for (int i = 0; i < noOfComponents; i++) {\\n                        createComponent(progressMonitor, m_components, pmNote, id, i, insertCompPrepStmt);\\n                    }\\n                }\\n                conn.commit();\\n                m_itemTable.getPrimaryId().setVal(m_item, id);\\n                m_itemCache.updateCache(m_item, id);\\n            } catch (SQLException ex) {\\n                try {\\n                    conn.rollback();\\n                } catch (SQLException e) {\\n                    e.printStackTrace();\\n                }\\n                throw ex;\\n            } finally {\\n                if (statement != null) {\\n                    statement.close();\\n                }\\n            }\\n        }\\n   \n","\n","   label  \n","0  False  \n","1   True  \n","2   True  \n","3  False  \n","4  False  \n","5  False  \n","6  False  \n","7   True  \n","8   True  \n","9  False  \n"]}],"source":["import pandas as pd\n","pd.set_option('display.max_colwidth', None)  # Prevent truncation\n","print(train_df.head(10))"]},{"cell_type":"markdown","id":"151f125a","metadata":{"papermill":{"duration":0.009024,"end_time":"2025-03-21T07:12:04.587277","exception":false,"start_time":"2025-03-21T07:12:04.578253","status":"completed"},"tags":[]},"source":["## 2. Data Preprocessing"]},{"cell_type":"code","execution_count":6,"id":"71891ced","metadata":{"execution":{"iopub.execute_input":"2025-03-21T07:12:04.607019Z","iopub.status.busy":"2025-03-21T07:12:04.606722Z","iopub.status.idle":"2025-03-21T07:12:04.613825Z","shell.execute_reply":"2025-03-21T07:12:04.612776Z"},"papermill":{"duration":0.018502,"end_time":"2025-03-21T07:12:04.615199","exception":false,"start_time":"2025-03-21T07:12:04.596697","status":"completed"},"tags":[]},"outputs":[{"name":"stdout","output_type":"stream","text":["Train Dataset: (901028, 6)\n","   id       id1       id2  \\\n","0   0  13988825   8660836   \n","1   1     80378  18548122   \n","2   2  21354223   7421563   \n","3   3  15826299  19728871   \n","4   4   9938081  11517213   \n","\nfunc1  \\\nprivate void setNodekeyInJsonResponse(String service) throws Exception {\\n        String filename = this.baseDirectory + service + \".json\";\\n        Scanner s = new Scanner(new File(filename));\\n        PrintWriter fw = new PrintWriter(new File(filename + \".new\"));\\n        while (s.hasNextLine()) {\\n            fw.println(s.nextLine().replaceAll(\"NODEKEY\", this.key));\\n        }\\n        s.close();\\n        fw.close();\\n        (new File(filename + \".new\")).renameTo(new File(filename));\\n    }\\n   \n","1      public static void test(String args[]) {\\n        int trace;\\n        int bytes_read = 0;\\n        int last_contentLenght = 0;\\n        try {\\n            BufferedReader reader;\\n            URL url;\\n            url = new URL(args[0]);\\n            URLConnection istream = url.openConnection();\\n            last_contentLenght = istream.getContentLength();\\n            reader = new BufferedReader(new InputStreamReader(istream.getInputStream()));\\n            System.out.println(url.toString());\\n            String line;\\n            trace = t2pNewTrace();\\n            while ((line = reader.readLine()) != null) {\\n                bytes_read = bytes_read + line.length() + 1;\\n                t2pProcessLine(trace, line);\\n            }\\n            t2pHandleEventPairs(trace);\\n            t2pSort(trace, 0);\\n            t2pExportTrace(trace, new String(\"pngtest2.png\"), 1000, 700, (float) 0, (float) 33);\\n            t2pExportTrace(trace, new String(\"pngtest3.png\"), 1000, 700, (float) 2.3, (float) 2.44);\\n            System.out.println(\"Press any key to contiune read from stream !!!\");\\n            System.out.println(t2pGetProcessName(trace, 0));\\n            System.in.read();\\n            istream = url.openConnection();\\n            if (last_contentLenght != istream.getContentLength()) {\\n                istream = url.openConnection();\\n                istream.setRequestProperty(\"Range\", \"bytes=\" + Integer.toString(bytes_read) + \"-\");\\n                System.out.println(Integer.toString(istream.getContentLength()));\\n                reader = new BufferedReader(new InputStreamReader(istream.getInputStream()));\\n                while ((line = reader.readLine()) != null) {\\n                    System.out.println(line);\\n                    t2pProcessLine(trace, line);\\n                }\\n            } else System.out.println(\"File not changed !\");\\n            t2pDeleteTrace(trace);\\n        } catch (MalformedURLException e) {\\n            System.out.println(\"MalformedURLException !!!\");\\n        } catch (IOException e) {\\n            System.out.println(\"File not found \" + args[0]);\\n        }\\n        ;\\n    }\\n   \npublic String kodetu(String testusoila) {\\n        MessageDigest md = null;\\n        try {\\n            md = MessageDigest.getInstance(\"SHA\");\\n            md.update(testusoila.getBytes(\"UTF-8\"));\\n        } catch (NoSuchAlgorithmException e) {\\n            new MezuLeiho(\"Ez da zifraketa algoritmoa aurkitu\", \"Ados\", \"Zifraketa Arazoa\", JOptionPane.ERROR_MESSAGE);\\n            e.printStackTrace();\\n        } catch (UnsupportedEncodingException e) {\\n            new MezuLeiho(\"Errorea kodetzerakoan\", \"Ados\", \"Kodeketa Errorea\", JOptionPane.ERROR_MESSAGE);\\n            e.printStackTrace();\\n        }\\n        byte raw[] = md.digest();\\n        String hash = (new BASE64Encoder()).encode(raw);\\n        return hash;\\n    }\\n   \npublic static void printResponseHeaders(String address) {\\n        logger.info(\"Address: \" + address);\\n        try {\\n            URL url = new URL(address);\\n            URLConnection conn = url.openConnection();\\n            for (int i = 0; ; i++) {\\n                String headerName = conn.getHeaderFieldKey(i);\\n                String headerValue = conn.getHeaderField(i);\\n                if (headerName == null && headerValue == null) {\\n                    break;\\n                }\\n                if (headerName == null) {\\n                    logger.info(headerValue);\\n                    continue;\\n                }\\n                logger.info(headerName + \" \" + headerValue);\\n            }\\n        } catch (Exception e) {\\n            logger.error(\"Exception Message: \" + e.getMessage());\\n        }\\n    }\\n   \npublic void load(String fileName) {\\n        BufferedReader bufReader;\\n        loaded = false;\\n        vector.removeAllElements();\\n        try {\\n            if (fileName.startsWith(\"http:\")) {\\n                URL url = new URL(fileName);\\n                bufReader = new BufferedReader(new InputStreamReader(url.openStream()));\\n            } else bufReader = new BufferedReader(new FileReader(fileName));\\n            String inputLine;\\n            while ((inputLine = bufReader.readLine()) != null) {\\n                if (listener != null) listener.handleLine(inputLine); else vector.add(inputLine);\\n            }\\n            bufReader.close();\\n            loaded = true;\\n        } catch (IOException e) {\\n            errorMsg = e.getMessage();\\n        }\\n    }\\n   \n","\nfunc2  \\\npublic void transform(String style, String spec, OutputStream out) throws IOException {\\n        URL url = new URL(rootURL, spec);\\n        InputStream in = new PatchXMLSymbolsStream(new StripDoctypeStream(url.openStream()));\\n        transform(style, in, out);\\n        in.close();\\n    }\\n   \n","1                                                                                                                                                                                                                                                                                                                                                                                                        private static String loadUrlToString(String a_url) throws IOException {\\n        URL l_url1 = new URL(a_url);\\n        BufferedReader br = new BufferedReader(new InputStreamReader(l_url1.openStream()));\\n        String l_content = \"\";\\n        String l_ligne = null;\\n        l_content = br.readLine();\\n        while ((l_ligne = br.readLine()) != null) {\\n            l_content += AA.SL + l_ligne;\\n        }\\n        return l_content;\\n    }\\n   \n","2                                                                                                                                                                                                                                                                                                                                                                                                                                                               private StringBuffer encoder(String arg) {\\n        if (arg == null) {\\n            arg = \"\";\\n        }\\n        MessageDigest md5 = null;\\n        try {\\n            md5 = MessageDigest.getInstance(\"MD5\");\\n            md5.update(arg.getBytes(SysConstant.charset));\\n        } catch (Exception e) {\\n            e.printStackTrace();\\n        }\\n        return toHex(md5.digest());\\n    }\\n   \n","3                                                                                                                                                                                                                                                                                                                                                   public static String getEncodedPassword(String buff) {\\n        if (buff == null) return null;\\n        String t = new String();\\n        try {\\n            MessageDigest md = MessageDigest.getInstance(\"MD5\");\\n            md.update(buff.getBytes());\\n            byte[] r = md.digest();\\n            for (int i = 0; i < r.length; i++) {\\n                t += toHexString(r[i]);\\n            }\\n        } catch (Exception e) {\\n            e.printStackTrace();\\n        }\\n        return t;\\n    }\\n   \n","4      private static void copyFile(File sourceFile, File destFile) {\\n        try {\\n            if (!destFile.exists()) {\\n                destFile.createNewFile();\\n            }\\n            FileChannel source = null;\\n            FileChannel destination = null;\\n            try {\\n                source = new FileInputStream(sourceFile).getChannel();\\n                destination = new FileOutputStream(destFile).getChannel();\\n                destination.transferFrom(source, 0, source.size());\\n            } finally {\\n                if (source != null) {\\n                    source.close();\\n                }\\n                if (destination != null) {\\n                    destination.close();\\n                }\\n            }\\n        } catch (Exception e) {\\n            throw new RuntimeException(e);\\n        }\\n    }\\n   \n","\n","   label  \n","0  False  \n","1   True  \n","2   True  \n","3  False  \n","4  False  \n"]}],"source":["import pandas as pd\n","\n","# # Load Train & Test (Assuming you've already converted them to Pandas DataFrames)\n","# train_df = pd.read_csv(\"train_data.csv\")  # Adjust filename if needed\n","# test_df = pd.read_csv(\"test_data.csv\")\n","\n","# Display dataset details\n","print(f\"Train Dataset: {train_df.shape}\")\n","print(train_df.head(5))"]},{"cell_type":"code","execution_count":7,"id":"5348e253","metadata":{"execution":{"iopub.execute_input":"2025-03-21T07:12:04.634959Z","iopub.status.busy":"2025-03-21T07:12:04.634723Z","iopub.status.idle":"2025-03-21T07:12:04.649272Z","shell.execute_reply":"2025-03-21T07:12:04.648523Z"},"papermill":{"duration":0.025676,"end_time":"2025-03-21T07:12:04.650423","exception":false,"start_time":"2025-03-21T07:12:04.624747","status":"completed"},"tags":[]},"outputs":[{"name":"stdout","output_type":"stream","text":["Label distribution Training set:\n","label\n","True     450862\n","False    450166\n","Name: count, dtype: int64\n"]}],"source":["#Check if there's a class imbalance\n","print('Label distribution Training set:')\n","print(train_df['label'].value_counts())"]},{"cell_type":"code","execution_count":8,"id":"1af80906","metadata":{"execution":{"iopub.execute_input":"2025-03-21T07:12:04.670614Z","iopub.status.busy":"2025-03-21T07:12:04.670349Z","iopub.status.idle":"2025-03-21T07:12:04.766377Z","shell.execute_reply":"2025-03-21T07:12:04.765417Z"},"papermill":{"duration":0.107372,"end_time":"2025-03-21T07:12:04.767766","exception":false,"start_time":"2025-03-21T07:12:04.660394","status":"completed"},"tags":[]},"outputs":[{"data":{"text/plain":["id       0\n","id1      0\n","id2      0\n","func1    0\n","func2    0\n","label    0\n","dtype: int64"]},"execution_count":8,"metadata":{},"output_type":"execute_result"}],"source":["train_df.isnull().sum()"]},{"cell_type":"code","execution_count":9,"id":"70cc4be2","metadata":{"execution":{"iopub.execute_input":"2025-03-21T07:12:04.788292Z","iopub.status.busy":"2025-03-21T07:12:04.788039Z","iopub.status.idle":"2025-03-21T07:13:36.353631Z","shell.execute_reply":"2025-03-21T07:13:36.352678Z"},"papermill":{"duration":91.587216,"end_time":"2025-03-21T07:13:36.364935","exception":false,"start_time":"2025-03-21T07:12:04.777719","status":"completed"},"tags":[]},"outputs":[{"name":"stdout","output_type":"stream","text":["Code Cleaning Done!\n"]}],"source":["import re\n","\n","# Function to clean code snippets\n","def clean_code(code):\n","    if not isinstance(code, str):\n","        return \"\"  # Handle NaN values safely\n","    \n","    code = re.sub(r\"//.*\", \"\", code)  # Remove single-line comments\n","    code = re.sub(r\"/\\*.*?\\*/\", \"\", code, flags=re.DOTALL)  # Remove multi-line comments\n","    code = re.sub(r\"\\s+\", \" \", code)  # Remove extra spaces/newlines\n","    return code.strip()\n","\n","# Apply cleaning to train & test\n","train_df[\"func1\"] = train_df[\"func1\"].apply(clean_code)\n","train_df[\"func2\"] = train_df[\"func2\"].apply(clean_code)\n","\n","print(\"Code Cleaning Done!\")"]},{"cell_type":"markdown","id":"c93565d4","metadata":{"papermill":{"duration":0.00946,"end_time":"2025-03-21T07:13:36.384236","exception":false,"start_time":"2025-03-21T07:13:36.374776","status":"completed"},"tags":[]},"source":["## 3. Importing modules"]},{"cell_type":"code","execution_count":10,"id":"c25a163b","metadata":{"execution":{"iopub.execute_input":"2025-03-21T07:13:36.405836Z","iopub.status.busy":"2025-03-21T07:13:36.405489Z","iopub.status.idle":"2025-03-21T07:13:47.679661Z","shell.execute_reply":"2025-03-21T07:13:47.678902Z"},"papermill":{"duration":11.287289,"end_time":"2025-03-21T07:13:47.681107","exception":false,"start_time":"2025-03-21T07:13:36.393818","status":"completed"},"tags":[]},"outputs":[{"name":"stdout","output_type":"stream","text":["Tensorflow version: 2.17.1\n"]}],"source":["%matplotlib inline\n","import matplotlib.pyplot as plt\n","np.random.seed(0)\n","plt.style.use(\"ggplot\")\n","\n","import tensorflow as tf\n","print('Tensorflow version:', tf.__version__)"]},{"cell_type":"code","execution_count":11,"id":"5f3e7eac","metadata":{"execution":{"iopub.execute_input":"2025-03-21T07:13:47.702656Z","iopub.status.busy":"2025-03-21T07:13:47.702074Z","iopub.status.idle":"2025-03-21T07:13:51.987496Z","shell.execute_reply":"2025-03-21T07:13:51.986359Z"},"papermill":{"duration":4.29759,"end_time":"2025-03-21T07:13:51.989027","exception":false,"start_time":"2025-03-21T07:13:47.691437","status":"completed"},"tags":[]},"outputs":[{"name":"stdout","output_type":"stream","text":["Requirement already satisfied: gensim in /usr/local/lib/python3.10/dist-packages (4.3.3)\r\n","Requirement already satisfied: nltk in /usr/local/lib/python3.10/dist-packages (3.2.4)\r\n","Requirement already satisfied: numpy<2.0,>=1.18.5 in /usr/local/lib/python3.10/dist-packages (from gensim) (1.26.4)\r\n","Requirement already satisfied: scipy<1.14.0,>=1.7.0 in /usr/local/lib/python3.10/dist-packages (from gensim) (1.13.1)\r\n","Requirement already satisfied: smart-open>=1.8.1 in /usr/local/lib/python3.10/dist-packages (from gensim) (7.0.5)\r\n","Requirement already satisfied: six in /usr/local/lib/python3.10/dist-packages (from nltk) (1.17.0)\r\n","Requirement already satisfied: mkl_fft in /usr/local/lib/python3.10/dist-packages (from numpy<2.0,>=1.18.5->gensim) (1.3.8)\r\n","Requirement already satisfied: mkl_random in /usr/local/lib/python3.10/dist-packages (from numpy<2.0,>=1.18.5->gensim) (1.2.4)\r\n","Requirement already satisfied: mkl_umath in /usr/local/lib/python3.10/dist-packages (from numpy<2.0,>=1.18.5->gensim) (0.1.1)\r\n","Requirement already satisfied: mkl in /usr/local/lib/python3.10/dist-packages (from numpy<2.0,>=1.18.5->gensim) (2025.0.1)\r\n","Requirement already satisfied: tbb4py in /usr/local/lib/python3.10/dist-packages (from numpy<2.0,>=1.18.5->gensim) (2022.0.0)\r\n","Requirement already satisfied: mkl-service in /usr/local/lib/python3.10/dist-packages (from numpy<2.0,>=1.18.5->gensim) (2.4.1)\r\n","Requirement already satisfied: wrapt in /usr/local/lib/python3.10/dist-packages (from smart-open>=1.8.1->gensim) (1.17.0)\r\n","Requirement already satisfied: intel-openmp>=2024 in /usr/local/lib/python3.10/dist-packages (from mkl->numpy<2.0,>=1.18.5->gensim) (2024.2.0)\r\n","Requirement already satisfied: tbb==2022.* in /usr/local/lib/python3.10/dist-packages (from mkl->numpy<2.0,>=1.18.5->gensim) (2022.0.0)\r\n","Requirement already satisfied: tcmlib==1.* in /usr/local/lib/python3.10/dist-packages (from tbb==2022.*->mkl->numpy<2.0,>=1.18.5->gensim) (1.2.0)\r\n","Requirement already satisfied: intel-cmplr-lib-rt in /usr/local/lib/python3.10/dist-packages (from mkl_umath->numpy<2.0,>=1.18.5->gensim) (2024.2.0)\r\n","Requirement already satisfied: intel-cmplr-lib-ur==2024.2.0 in /usr/local/lib/python3.10/dist-packages (from intel-openmp>=2024->mkl->numpy<2.0,>=1.18.5->gensim) (2024.2.0)\r\n","Note: you may need to restart the kernel to use updated packages.\n"]}],"source":["pip install gensim nltk\n"]},{"cell_type":"code","execution_count":12,"id":"520a8313","metadata":{"execution":{"iopub.execute_input":"2025-03-21T07:13:52.010454Z","iopub.status.busy":"2025-03-21T07:13:52.010175Z","iopub.status.idle":"2025-03-21T07:13:52.016609Z","shell.execute_reply":"2025-03-21T07:13:52.015934Z"},"papermill":{"duration":0.018357,"end_time":"2025-03-21T07:13:52.017781","exception":false,"start_time":"2025-03-21T07:13:51.999424","status":"completed"},"tags":[]},"outputs":[],"source":["# Distribution graphs (histogram/bar graph) of column data\n","def plotPerColumnDistribution(df, nGraphShown, nGraphPerRow):\n","    nunique = df.nunique()\n","    df = df[[col for col in df if nunique[col] > 1 and nunique[col] < 50]] # For displaying purposes, pick columns that have between 1 and 50 unique values\n","    nRow, nCol = df.shape\n","    columnNames = list(df)\n","    nGraphRow = (nCol + nGraphPerRow - 1) / nGraphPerRow\n","    plt.figure(num = None, figsize = (6 * nGraphPerRow, 8 * nGraphRow), dpi = 80, facecolor = 'w', edgecolor = 'k')\n","    for i in range(min(nCol, nGraphShown)):\n","        plt.subplot(nGraphRow, nGraphPerRow, i + 1)\n","        columnDf = df.iloc[:, i]\n","        if (not np.issubdtype(type(columnDf.iloc[0]), np.number)):\n","            valueCounts = columnDf.value_counts()\n","            valueCounts.plot.bar()\n","        else:\n","            columnDf.hist()\n","        plt.ylabel('counts')\n","        plt.xticks(rotation = 90)\n","        plt.title(f'{columnNames[i]} (column {i})')\n","    plt.tight_layout(pad = 1.0, w_pad = 1.0, h_pad = 1.0)\n","    plt.show()"]},{"cell_type":"code","execution_count":13,"id":"71ee8520","metadata":{"execution":{"iopub.execute_input":"2025-03-21T07:13:52.047081Z","iopub.status.busy":"2025-03-21T07:13:52.046751Z","iopub.status.idle":"2025-03-21T07:13:52.053368Z","shell.execute_reply":"2025-03-21T07:13:52.052508Z"},"papermill":{"duration":0.026357,"end_time":"2025-03-21T07:13:52.05484","exception":false,"start_time":"2025-03-21T07:13:52.028483","status":"completed"},"tags":[]},"outputs":[],"source":["# Correlation matrix\n","def plotCorrelationMatrix(df, graphWidth):\n","    filename = df.dataframeName\n","    df = df.dropna('columns') # drop columns with NaN\n","    df = df[[col for col in df if df[col].nunique() > 1]] # keep columns where there are more than 1 unique values\n","    if df.shape[1] < 2:\n","        print(f'No correlation plots shown: The number of non-NaN or constant columns ({df.shape[1]}) is less than 2')\n","        return\n","    corr = df.corr()\n","    plt.figure(num=None, figsize=(graphWidth, graphWidth), dpi=80, facecolor='w', edgecolor='k')\n","    corrMat = plt.matshow(corr, fignum = 1)\n","    plt.xticks(range(len(corr.columns)), corr.columns, rotation=90)\n","    plt.yticks(range(len(corr.columns)), corr.columns)\n","    plt.gca().xaxis.tick_bottom()\n","    plt.colorbar(corrMat)\n","    plt.title(f'Correlation Matrix for {filename}', fontsize=15)\n","    plt.show()"]},{"cell_type":"code","execution_count":14,"id":"434f3098","metadata":{"execution":{"iopub.execute_input":"2025-03-21T07:13:52.091584Z","iopub.status.busy":"2025-03-21T07:13:52.091275Z","iopub.status.idle":"2025-03-21T07:13:52.097067Z","shell.execute_reply":"2025-03-21T07:13:52.096437Z"},"papermill":{"duration":0.024488,"end_time":"2025-03-21T07:13:52.098879","exception":false,"start_time":"2025-03-21T07:13:52.074391","status":"completed"},"tags":[]},"outputs":[],"source":["# Scatter and density plots\n","def plotScatterMatrix(df, plotSize, textSize):\n","    df = df.select_dtypes(include =[np.number]) # keep only numerical columns\n","    # Remove rows and columns that would lead to df being singular\n","    df = df.dropna('columns')\n","    df = df[[col for col in df if df[col].nunique() > 1]] # keep columns where there are more than 1 unique values\n","    columnNames = list(df)\n","    if len(columnNames) > 10: # reduce the number of columns for matrix inversion of kernel density plots\n","        columnNames = columnNames[:10]\n","    df = df[columnNames]\n","    ax = pd.plotting.scatter_matrix(df, alpha=0.75, figsize=[plotSize, plotSize], diagonal='kde')\n","    corrs = df.corr().values\n","    for i, j in zip(*plt.np.triu_indices_from(ax, k = 1)):\n","        ax[i, j].annotate('Corr. coef = %.3f' % corrs[i, j], (0.8, 0.2), xycoords='axes fraction', ha='center', va='center', size=textSize)\n","    plt.suptitle('Scatter and Density Plot')\n","    plt.show()"]},{"cell_type":"markdown","id":"4b354511","metadata":{"papermill":{"duration":0.009896,"end_time":"2025-03-21T07:13:52.123159","exception":false,"start_time":"2025-03-21T07:13:52.113263","status":"completed"},"tags":[]},"source":["## 4. Creating word embeddings"]},{"cell_type":"code","execution_count":15,"id":"2d0c1905","metadata":{"execution":{"iopub.execute_input":"2025-03-21T07:13:52.144175Z","iopub.status.busy":"2025-03-21T07:13:52.143876Z","iopub.status.idle":"2025-03-21T07:13:53.08289Z","shell.execute_reply":"2025-03-21T07:13:53.081816Z"},"papermill":{"duration":0.951367,"end_time":"2025-03-21T07:13:53.084583","exception":false,"start_time":"2025-03-21T07:13:52.133216","status":"completed"},"tags":[]},"outputs":[{"name":"stdout","output_type":"stream","text":["There are 50000 rows and 6 columns\n"]}],"source":["nRowsRead = 50000 # specify 'None' if want to read whole file\n","# ner_dataset.csv may have more rows in reality, but we are only loading/previewing the first 5000 rows\n","df_train = pd.read_csv(\"bcb_train.csv\", delimiter=',', nrows = nRowsRead, encoding='utf-8')\n","nRow, nCol = df_train.shape\n","print(f'There are {nRow} rows and {nCol} columns')"]},{"cell_type":"code","execution_count":16,"id":"2186e75c","metadata":{"execution":{"iopub.execute_input":"2025-03-21T07:13:53.109933Z","iopub.status.busy":"2025-03-21T07:13:53.109607Z","iopub.status.idle":"2025-03-21T07:17:30.764693Z","shell.execute_reply":"2025-03-21T07:17:30.763769Z"},"papermill":{"duration":217.678969,"end_time":"2025-03-21T07:17:30.775997","exception":false,"start_time":"2025-03-21T07:13:53.097028","status":"completed"},"tags":[]},"outputs":[{"name":"stdout","output_type":"stream","text":["[nltk_data] Downloading package punkt to /usr/share/nltk_data...\n","[nltk_data]   Package punkt is already up-to-date!\n","Word2Vec training completed and model saved!\n"]}],"source":["import pandas as pd\n","import gensim\n","import nltk\n","from nltk.tokenize import word_tokenize\n","\n","# Download tokenizer\n","nltk.download('punkt')\n","\n","# Tokenization function\n","def tokenize_code(code):\n","    return word_tokenize(code)  # Tokenize into words\n","\n","# Apply tokenization to func1 and func2\n","df_train[\"func1_tokens\"] = df_train[\"func1\"].apply(tokenize_code)\n","df_train[\"func2_tokens\"] = df_train[\"func2\"].apply(tokenize_code)\n","\n","# Combine tokenized functions for training Word2Vec\n","all_tokens = df_train[\"func1_tokens\"].tolist() + df_train[\"func2_tokens\"].tolist()\n","\n","# Train Word2Vec model\n","word2vec_model = gensim.models.Word2Vec(sentences=all_tokens, vector_size=100, window=5, min_count=2, workers=4)\n","\n","# Save model for future use\n","word2vec_model.save(\"word2vec_bcb.model\")\n","\n","print(\"Word2Vec training completed and model saved!\")\n"]},{"cell_type":"code","execution_count":17,"id":"e14e8ac2","metadata":{"execution":{"iopub.execute_input":"2025-03-21T07:17:30.797558Z","iopub.status.busy":"2025-03-21T07:17:30.797252Z","iopub.status.idle":"2025-03-21T07:19:52.033691Z","shell.execute_reply":"2025-03-21T07:19:52.032486Z"},"papermill":{"duration":141.266695,"end_time":"2025-03-21T07:19:52.053087","exception":false,"start_time":"2025-03-21T07:17:30.786392","status":"completed"},"tags":[]},"outputs":[{"name":"stdout","output_type":"stream","text":["Train-Test Split Done!\n","Train Set: (40000, 200), (40000, 200)\n","Test Set: (10000, 200), (10000, 200)\n"]}],"source":["import numpy as np\n","import pandas as pd\n","import gensim\n","import nltk\n","from nltk.tokenize import word_tokenize\n","from tensorflow.keras.preprocessing.sequence import pad_sequences\n","from sklearn.model_selection import train_test_split\n","\n","# Load Word2Vec model\n","word2vec_model = gensim.models.Word2Vec.load(\"word2vec_bcb.model\")\n","\n","# Function to tokenize and convert tokens to word indices\n","def text_to_indices(text, model, vocab):\n","    tokens = word_tokenize(text)\n","    indices = [model.wv.key_to_index[word] for word in tokens if word in vocab]  \n","    return indices\n","\n","# Extract vocab from Word2Vec model\n","vocab = set(word2vec_model.wv.key_to_index.keys())\n","\n","# Convert func1 and func2 into word index sequences\n","df_train[\"func1_indices\"] = df_train[\"func1\"].apply(lambda x: text_to_indices(x, word2vec_model, vocab))\n","df_train[\"func2_indices\"] = df_train[\"func2\"].apply(lambda x: text_to_indices(x, word2vec_model, vocab))\n","\n","# Define max sequence length (let's take 200 based on average function length)\n","MAX_SEQ_LENGTH = 200  \n","\n","# Apply padding\n","X1_padded = pad_sequences(df_train[\"func1_indices\"], maxlen=MAX_SEQ_LENGTH, padding=\"post\")\n","X2_padded = pad_sequences(df_train[\"func2_indices\"], maxlen=MAX_SEQ_LENGTH, padding=\"post\")\n","\n","# One-hot encode labels (if not already encoded)\n","y = df_train[\"label\"].astype(int)  # Ensure labels are integers\n","\n","# Train-test split\n","X1_train, X1_test, X2_train, X2_test, y_train, y_test = train_test_split(\n","    X1_padded, X2_padded, y, test_size=0.2, random_state=42\n",")\n","\n","print(\"Train-Test Split Done!\")\n","print(f\"Train Set: {X1_train.shape}, {X2_train.shape}\")\n","print(f\"Test Set: {X1_test.shape}, {X2_test.shape}\")\n"]},{"cell_type":"code","execution_count":18,"id":"83d8c2d7","metadata":{"execution":{"iopub.execute_input":"2025-03-21T07:19:52.087915Z","iopub.status.busy":"2025-03-21T07:19:52.087619Z","iopub.status.idle":"2025-03-21T07:19:52.288406Z","shell.execute_reply":"2025-03-21T07:19:52.287483Z"},"papermill":{"duration":0.218439,"end_time":"2025-03-21T07:19:52.289947","exception":false,"start_time":"2025-03-21T07:19:52.071508","status":"completed"},"tags":[]},"outputs":[{"name":"stdout","output_type":"stream","text":["Embedding Matrix Shape: (82060, 100)\n"]}],"source":["# Create an embedding matrix with the same dimensions as Word2Vec embeddings\n","EMBEDDING_DIM = 100  # Same as Word2Vec vector_size\n","\n","embedding_matrix = np.zeros((len(vocab) + 1, EMBEDDING_DIM))  \n","\n","for word, idx in word2vec_model.wv.key_to_index.items():\n","    embedding_matrix[idx] = word2vec_model.wv[word]\n","\n","print(\"Embedding Matrix Shape:\", embedding_matrix.shape)\n"]},{"cell_type":"markdown","id":"885ac0f8","metadata":{"papermill":{"duration":0.010148,"end_time":"2025-03-21T07:19:52.310652","exception":false,"start_time":"2025-03-21T07:19:52.300504","status":"completed"},"tags":[]},"source":["## 5. Fusion layer"]},{"cell_type":"code","execution_count":19,"id":"9d096df6","metadata":{"execution":{"iopub.execute_input":"2025-03-21T07:19:52.331945Z","iopub.status.busy":"2025-03-21T07:19:52.331645Z","iopub.status.idle":"2025-03-21T07:19:54.804266Z","shell.execute_reply":"2025-03-21T07:19:54.803593Z"},"papermill":{"duration":2.484698,"end_time":"2025-03-21T07:19:54.805464","exception":false,"start_time":"2025-03-21T07:19:52.320766","status":"completed"},"tags":[]},"outputs":[{"data":{"text/html":["<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\"><span style=\"font-weight: bold\">Model: \"functional\"</span>\n","</pre>\n"],"text/plain":["\u001b[1mModel: \"functional\"\u001b[0m\n"]},"metadata":{},"output_type":"display_data"},{"data":{"text/html":["<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\">┏━━━━━━━━━━━━━━━━━━━━━━━━━━━┳━━━━━━━━━━━━━━━━━━━━━━━━┳━━━━━━━━━━━━━━━━┳━━━━━━━━━━━━━━━━━━━━━━━━┓\n","┃<span style=\"font-weight: bold\"> Layer (type)              </span>┃<span style=\"font-weight: bold\"> Output Shape           </span>┃<span style=\"font-weight: bold\">        Param # </span>┃<span style=\"font-weight: bold\"> Connected to           </span>┃\n","┡━━━━━━━━━━━━━━━━━━━━━━━━━━━╇━━━━━━━━━━━━━━━━━━━━━━━━╇━━━━━━━━━━━━━━━━╇━━━━━━━━━━━━━━━━━━━━━━━━┩\n","│ input_layer (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">InputLayer</span>)  │ (<span style=\"color: #00d7ff; text-decoration-color: #00d7ff\">None</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">200</span>)            │              <span style=\"color: #00af00; text-decoration-color: #00af00\">0</span> │ -                      │\n","├───────────────────────────┼────────────────────────┼────────────────┼────────────────────────┤\n","│ input_layer_1             │ (<span style=\"color: #00d7ff; text-decoration-color: #00d7ff\">None</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">200</span>)            │              <span style=\"color: #00af00; text-decoration-color: #00af00\">0</span> │ -                      │\n","│ (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">InputLayer</span>)              │                        │                │                        │\n","├───────────────────────────┼────────────────────────┼────────────────┼────────────────────────┤\n","│ embedding (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">Embedding</span>)     │ (<span style=\"color: #00d7ff; text-decoration-color: #00d7ff\">None</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">200</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">100</span>)       │      <span style=\"color: #00af00; text-decoration-color: #00af00\">8,206,000</span> │ input_layer[<span style=\"color: #00af00; text-decoration-color: #00af00\">0</span>][<span style=\"color: #00af00; text-decoration-color: #00af00\">0</span>],     │\n","│                           │                        │                │ input_layer_1[<span style=\"color: #00af00; text-decoration-color: #00af00\">0</span>][<span style=\"color: #00af00; text-decoration-color: #00af00\">0</span>]    │\n","├───────────────────────────┼────────────────────────┼────────────────┼────────────────────────┤\n","│ dot (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">Dot</span>)                 │ (<span style=\"color: #00d7ff; text-decoration-color: #00d7ff\">None</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">200</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">200</span>)       │              <span style=\"color: #00af00; text-decoration-color: #00af00\">0</span> │ embedding[<span style=\"color: #00af00; text-decoration-color: #00af00\">0</span>][<span style=\"color: #00af00; text-decoration-color: #00af00\">0</span>],       │\n","│                           │                        │                │ embedding[<span style=\"color: #00af00; text-decoration-color: #00af00\">1</span>][<span style=\"color: #00af00; text-decoration-color: #00af00\">0</span>]        │\n","└───────────────────────────┴────────────────────────┴────────────────┴────────────────────────┘\n","</pre>\n"],"text/plain":["┏━━━━━━━━━━━━━━━━━━━━━━━━━━━┳━━━━━━━━━━━━━━━━━━━━━━━━┳━━━━━━━━━━━━━━━━┳━━━━━━━━━━━━━━━━━━━━━━━━┓\n","┃\u001b[1m \u001b[0m\u001b[1mLayer (type)             \u001b[0m\u001b[1m \u001b[0m┃\u001b[1m \u001b[0m\u001b[1mOutput Shape          \u001b[0m\u001b[1m \u001b[0m┃\u001b[1m \u001b[0m\u001b[1m       Param #\u001b[0m\u001b[1m \u001b[0m┃\u001b[1m \u001b[0m\u001b[1mConnected to          \u001b[0m\u001b[1m \u001b[0m┃\n","┡━━━━━━━━━━━━━━━━━━━━━━━━━━━╇━━━━━━━━━━━━━━━━━━━━━━━━╇━━━━━━━━━━━━━━━━╇━━━━━━━━━━━━━━━━━━━━━━━━┩\n","│ input_layer (\u001b[38;5;33mInputLayer\u001b[0m)  │ (\u001b[38;5;45mNone\u001b[0m, \u001b[38;5;34m200\u001b[0m)            │              \u001b[38;5;34m0\u001b[0m │ -                      │\n","├───────────────────────────┼────────────────────────┼────────────────┼────────────────────────┤\n","│ input_layer_1             │ (\u001b[38;5;45mNone\u001b[0m, \u001b[38;5;34m200\u001b[0m)            │              \u001b[38;5;34m0\u001b[0m │ -                      │\n","│ (\u001b[38;5;33mInputLayer\u001b[0m)              │                        │                │                        │\n","├───────────────────────────┼────────────────────────┼────────────────┼────────────────────────┤\n","│ embedding (\u001b[38;5;33mEmbedding\u001b[0m)     │ (\u001b[38;5;45mNone\u001b[0m, \u001b[38;5;34m200\u001b[0m, \u001b[38;5;34m100\u001b[0m)       │      \u001b[38;5;34m8,206,000\u001b[0m │ input_layer[\u001b[38;5;34m0\u001b[0m][\u001b[38;5;34m0\u001b[0m],     │\n","│                           │                        │                │ input_layer_1[\u001b[38;5;34m0\u001b[0m][\u001b[38;5;34m0\u001b[0m]    │\n","├───────────────────────────┼────────────────────────┼────────────────┼────────────────────────┤\n","│ dot (\u001b[38;5;33mDot\u001b[0m)                 │ (\u001b[38;5;45mNone\u001b[0m, \u001b[38;5;34m200\u001b[0m, \u001b[38;5;34m200\u001b[0m)       │              \u001b[38;5;34m0\u001b[0m │ embedding[\u001b[38;5;34m0\u001b[0m][\u001b[38;5;34m0\u001b[0m],       │\n","│                           │                        │                │ embedding[\u001b[38;5;34m1\u001b[0m][\u001b[38;5;34m0\u001b[0m]        │\n","└───────────────────────────┴────────────────────────┴────────────────┴────────────────────────┘\n"]},"metadata":{},"output_type":"display_data"},{"data":{"text/html":["<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\"><span style=\"font-weight: bold\"> Total params: </span><span style=\"color: #00af00; text-decoration-color: #00af00\">8,206,000</span> (31.30 MB)\n","</pre>\n"],"text/plain":["\u001b[1m Total params: \u001b[0m\u001b[38;5;34m8,206,000\u001b[0m (31.30 MB)\n"]},"metadata":{},"output_type":"display_data"},{"data":{"text/html":["<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\"><span style=\"font-weight: bold\"> Trainable params: </span><span style=\"color: #00af00; text-decoration-color: #00af00\">0</span> (0.00 B)\n","</pre>\n"],"text/plain":["\u001b[1m Trainable params: \u001b[0m\u001b[38;5;34m0\u001b[0m (0.00 B)\n"]},"metadata":{},"output_type":"display_data"},{"data":{"text/html":["<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\"><span style=\"font-weight: bold\"> Non-trainable params: </span><span style=\"color: #00af00; text-decoration-color: #00af00\">8,206,000</span> (31.30 MB)\n","</pre>\n"],"text/plain":["\u001b[1m Non-trainable params: \u001b[0m\u001b[38;5;34m8,206,000\u001b[0m (31.30 MB)\n"]},"metadata":{},"output_type":"display_data"}],"source":["import tensorflow as tf\n","from tensorflow.keras.layers import Embedding, Input, Dot\n","from tensorflow.keras.models import Model\n","\n","# Define input layers\n","input1 = Input(shape=(MAX_SEQ_LENGTH,))\n","input2 = Input(shape=(MAX_SEQ_LENGTH,))\n","\n","# Create Embedding Layer with pretrained weights\n","embedding_layer = Embedding(input_dim=embedding_matrix.shape[0], \n","                            output_dim=embedding_matrix.shape[1], \n","                            weights=[embedding_matrix], \n","                            trainable=False)\n","\n","# Convert input sequences to embeddings\n","embedding1 = embedding_layer(input1)\n","embedding2 = embedding_layer(input2)\n","\n","# Fusion Layer: Compute Dot Product of two embeddings\n","fusion_output = Dot(axes=-1, normalize=True)([embedding1, embedding2])\n","\n","# Define model\n","fusion_model = Model(inputs=[input1, input2], outputs=fusion_output)\n","\n","# Print model summary\n","fusion_model.summary()\n"]},{"cell_type":"markdown","id":"5191561c","metadata":{"papermill":{"duration":0.010553,"end_time":"2025-03-21T07:19:54.827022","exception":false,"start_time":"2025-03-21T07:19:54.816469","status":"completed"},"tags":[]},"source":["## 6. Classification layer"]},{"cell_type":"code","execution_count":20,"id":"e01a3053","metadata":{"execution":{"iopub.execute_input":"2025-03-21T07:19:54.849106Z","iopub.status.busy":"2025-03-21T07:19:54.848846Z","iopub.status.idle":"2025-03-21T07:19:55.07273Z","shell.execute_reply":"2025-03-21T07:19:55.071819Z"},"papermill":{"duration":0.236246,"end_time":"2025-03-21T07:19:55.073943","exception":false,"start_time":"2025-03-21T07:19:54.837697","status":"completed"},"tags":[]},"outputs":[{"data":{"text/html":["<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\"><span style=\"font-weight: bold\">Model: \"functional_1\"</span>\n","</pre>\n"],"text/plain":["\u001b[1mModel: \"functional_1\"\u001b[0m\n"]},"metadata":{},"output_type":"display_data"},{"data":{"text/html":["<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\">┏━━━━━━━━━━━━━━━━━━━━━━━━━━━┳━━━━━━━━━━━━━━━━━━━━━━━━┳━━━━━━━━━━━━━━━━┳━━━━━━━━━━━━━━━━━━━━━━━━┓\n","┃<span style=\"font-weight: bold\"> Layer (type)              </span>┃<span style=\"font-weight: bold\"> Output Shape           </span>┃<span style=\"font-weight: bold\">        Param # </span>┃<span style=\"font-weight: bold\"> Connected to           </span>┃\n","┡━━━━━━━━━━━━━━━━━━━━━━━━━━━╇━━━━━━━━━━━━━━━━━━━━━━━━╇━━━━━━━━━━━━━━━━╇━━━━━━━━━━━━━━━━━━━━━━━━┩\n","│ input_layer (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">InputLayer</span>)  │ (<span style=\"color: #00d7ff; text-decoration-color: #00d7ff\">None</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">200</span>)            │              <span style=\"color: #00af00; text-decoration-color: #00af00\">0</span> │ -                      │\n","├───────────────────────────┼────────────────────────┼────────────────┼────────────────────────┤\n","│ input_layer_1             │ (<span style=\"color: #00d7ff; text-decoration-color: #00d7ff\">None</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">200</span>)            │              <span style=\"color: #00af00; text-decoration-color: #00af00\">0</span> │ -                      │\n","│ (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">InputLayer</span>)              │                        │                │                        │\n","├───────────────────────────┼────────────────────────┼────────────────┼────────────────────────┤\n","│ embedding (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">Embedding</span>)     │ (<span style=\"color: #00d7ff; text-decoration-color: #00d7ff\">None</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">200</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">100</span>)       │      <span style=\"color: #00af00; text-decoration-color: #00af00\">8,206,000</span> │ input_layer[<span style=\"color: #00af00; text-decoration-color: #00af00\">0</span>][<span style=\"color: #00af00; text-decoration-color: #00af00\">0</span>],     │\n","│                           │                        │                │ input_layer_1[<span style=\"color: #00af00; text-decoration-color: #00af00\">0</span>][<span style=\"color: #00af00; text-decoration-color: #00af00\">0</span>]    │\n","├───────────────────────────┼────────────────────────┼────────────────┼────────────────────────┤\n","│ dot (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">Dot</span>)                 │ (<span style=\"color: #00d7ff; text-decoration-color: #00d7ff\">None</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">200</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">200</span>)       │              <span style=\"color: #00af00; text-decoration-color: #00af00\">0</span> │ embedding[<span style=\"color: #00af00; text-decoration-color: #00af00\">0</span>][<span style=\"color: #00af00; text-decoration-color: #00af00\">0</span>],       │\n","│                           │                        │                │ embedding[<span style=\"color: #00af00; text-decoration-color: #00af00\">1</span>][<span style=\"color: #00af00; text-decoration-color: #00af00\">0</span>]        │\n","├───────────────────────────┼────────────────────────┼────────────────┼────────────────────────┤\n","│ bidirectional             │ (<span style=\"color: #00d7ff; text-decoration-color: #00d7ff\">None</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">256</span>)            │        <span style=\"color: #00af00; text-decoration-color: #00af00\">336,896</span> │ dot[<span style=\"color: #00af00; text-decoration-color: #00af00\">0</span>][<span style=\"color: #00af00; text-decoration-color: #00af00\">0</span>]              │\n","│ (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">Bidirectional</span>)           │                        │                │                        │\n","├───────────────────────────┼────────────────────────┼────────────────┼────────────────────────┤\n","│ dropout (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">Dropout</span>)         │ (<span style=\"color: #00d7ff; text-decoration-color: #00d7ff\">None</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">256</span>)            │              <span style=\"color: #00af00; text-decoration-color: #00af00\">0</span> │ bidirectional[<span style=\"color: #00af00; text-decoration-color: #00af00\">0</span>][<span style=\"color: #00af00; text-decoration-color: #00af00\">0</span>]    │\n","├───────────────────────────┼────────────────────────┼────────────────┼────────────────────────┤\n","│ dense (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">Dense</span>)             │ (<span style=\"color: #00d7ff; text-decoration-color: #00d7ff\">None</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">64</span>)             │         <span style=\"color: #00af00; text-decoration-color: #00af00\">16,448</span> │ dropout[<span style=\"color: #00af00; text-decoration-color: #00af00\">0</span>][<span style=\"color: #00af00; text-decoration-color: #00af00\">0</span>]          │\n","├───────────────────────────┼────────────────────────┼────────────────┼────────────────────────┤\n","│ dropout_1 (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">Dropout</span>)       │ (<span style=\"color: #00d7ff; text-decoration-color: #00d7ff\">None</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">64</span>)             │              <span style=\"color: #00af00; text-decoration-color: #00af00\">0</span> │ dense[<span style=\"color: #00af00; text-decoration-color: #00af00\">0</span>][<span style=\"color: #00af00; text-decoration-color: #00af00\">0</span>]            │\n","├───────────────────────────┼────────────────────────┼────────────────┼────────────────────────┤\n","│ dense_1 (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">Dense</span>)           │ (<span style=\"color: #00d7ff; text-decoration-color: #00d7ff\">None</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">1</span>)              │             <span style=\"color: #00af00; text-decoration-color: #00af00\">65</span> │ dropout_1[<span style=\"color: #00af00; text-decoration-color: #00af00\">0</span>][<span style=\"color: #00af00; text-decoration-color: #00af00\">0</span>]        │\n","└───────────────────────────┴────────────────────────┴────────────────┴────────────────────────┘\n","</pre>\n"],"text/plain":["┏━━━━━━━━━━━━━━━━━━━━━━━━━━━┳━━━━━━━━━━━━━━━━━━━━━━━━┳━━━━━━━━━━━━━━━━┳━━━━━━━━━━━━━━━━━━━━━━━━┓\n","┃\u001b[1m \u001b[0m\u001b[1mLayer (type)             \u001b[0m\u001b[1m \u001b[0m┃\u001b[1m \u001b[0m\u001b[1mOutput Shape          \u001b[0m\u001b[1m \u001b[0m┃\u001b[1m \u001b[0m\u001b[1m       Param #\u001b[0m\u001b[1m \u001b[0m┃\u001b[1m \u001b[0m\u001b[1mConnected to          \u001b[0m\u001b[1m \u001b[0m┃\n","┡━━━━━━━━━━━━━━━━━━━━━━━━━━━╇━━━━━━━━━━━━━━━━━━━━━━━━╇━━━━━━━━━━━━━━━━╇━━━━━━━━━━━━━━━━━━━━━━━━┩\n","│ input_layer (\u001b[38;5;33mInputLayer\u001b[0m)  │ (\u001b[38;5;45mNone\u001b[0m, \u001b[38;5;34m200\u001b[0m)            │              \u001b[38;5;34m0\u001b[0m │ -                      │\n","├───────────────────────────┼────────────────────────┼────────────────┼────────────────────────┤\n","│ input_layer_1             │ (\u001b[38;5;45mNone\u001b[0m, \u001b[38;5;34m200\u001b[0m)            │              \u001b[38;5;34m0\u001b[0m │ -                      │\n","│ (\u001b[38;5;33mInputLayer\u001b[0m)              │                        │                │                        │\n","├───────────────────────────┼────────────────────────┼────────────────┼────────────────────────┤\n","│ embedding (\u001b[38;5;33mEmbedding\u001b[0m)     │ (\u001b[38;5;45mNone\u001b[0m, \u001b[38;5;34m200\u001b[0m, \u001b[38;5;34m100\u001b[0m)       │      \u001b[38;5;34m8,206,000\u001b[0m │ input_layer[\u001b[38;5;34m0\u001b[0m][\u001b[38;5;34m0\u001b[0m],     │\n","│                           │                        │                │ input_layer_1[\u001b[38;5;34m0\u001b[0m][\u001b[38;5;34m0\u001b[0m]    │\n","├───────────────────────────┼────────────────────────┼────────────────┼────────────────────────┤\n","│ dot (\u001b[38;5;33mDot\u001b[0m)                 │ (\u001b[38;5;45mNone\u001b[0m, \u001b[38;5;34m200\u001b[0m, \u001b[38;5;34m200\u001b[0m)       │              \u001b[38;5;34m0\u001b[0m │ embedding[\u001b[38;5;34m0\u001b[0m][\u001b[38;5;34m0\u001b[0m],       │\n","│                           │                        │                │ embedding[\u001b[38;5;34m1\u001b[0m][\u001b[38;5;34m0\u001b[0m]        │\n","├───────────────────────────┼────────────────────────┼────────────────┼────────────────────────┤\n","│ bidirectional             │ (\u001b[38;5;45mNone\u001b[0m, \u001b[38;5;34m256\u001b[0m)            │        \u001b[38;5;34m336,896\u001b[0m │ dot[\u001b[38;5;34m0\u001b[0m][\u001b[38;5;34m0\u001b[0m]              │\n","│ (\u001b[38;5;33mBidirectional\u001b[0m)           │                        │                │                        │\n","├───────────────────────────┼────────────────────────┼────────────────┼────────────────────────┤\n","│ dropout (\u001b[38;5;33mDropout\u001b[0m)         │ (\u001b[38;5;45mNone\u001b[0m, \u001b[38;5;34m256\u001b[0m)            │              \u001b[38;5;34m0\u001b[0m │ bidirectional[\u001b[38;5;34m0\u001b[0m][\u001b[38;5;34m0\u001b[0m]    │\n","├───────────────────────────┼────────────────────────┼────────────────┼────────────────────────┤\n","│ dense (\u001b[38;5;33mDense\u001b[0m)             │ (\u001b[38;5;45mNone\u001b[0m, \u001b[38;5;34m64\u001b[0m)             │         \u001b[38;5;34m16,448\u001b[0m │ dropout[\u001b[38;5;34m0\u001b[0m][\u001b[38;5;34m0\u001b[0m]          │\n","├───────────────────────────┼────────────────────────┼────────────────┼────────────────────────┤\n","│ dropout_1 (\u001b[38;5;33mDropout\u001b[0m)       │ (\u001b[38;5;45mNone\u001b[0m, \u001b[38;5;34m64\u001b[0m)             │              \u001b[38;5;34m0\u001b[0m │ dense[\u001b[38;5;34m0\u001b[0m][\u001b[38;5;34m0\u001b[0m]            │\n","├───────────────────────────┼────────────────────────┼────────────────┼────────────────────────┤\n","│ dense_1 (\u001b[38;5;33mDense\u001b[0m)           │ (\u001b[38;5;45mNone\u001b[0m, \u001b[38;5;34m1\u001b[0m)              │             \u001b[38;5;34m65\u001b[0m │ dropout_1[\u001b[38;5;34m0\u001b[0m][\u001b[38;5;34m0\u001b[0m]        │\n","└───────────────────────────┴────────────────────────┴────────────────┴────────────────────────┘\n"]},"metadata":{},"output_type":"display_data"},{"data":{"text/html":["<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\"><span style=\"font-weight: bold\"> Total params: </span><span style=\"color: #00af00; text-decoration-color: #00af00\">8,559,409</span> (32.65 MB)\n","</pre>\n"],"text/plain":["\u001b[1m Total params: \u001b[0m\u001b[38;5;34m8,559,409\u001b[0m (32.65 MB)\n"]},"metadata":{},"output_type":"display_data"},{"data":{"text/html":["<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\"><span style=\"font-weight: bold\"> Trainable params: </span><span style=\"color: #00af00; text-decoration-color: #00af00\">353,409</span> (1.35 MB)\n","</pre>\n"],"text/plain":["\u001b[1m Trainable params: \u001b[0m\u001b[38;5;34m353,409\u001b[0m (1.35 MB)\n"]},"metadata":{},"output_type":"display_data"},{"data":{"text/html":["<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\"><span style=\"font-weight: bold\"> Non-trainable params: </span><span style=\"color: #00af00; text-decoration-color: #00af00\">8,206,000</span> (31.30 MB)\n","</pre>\n"],"text/plain":["\u001b[1m Non-trainable params: \u001b[0m\u001b[38;5;34m8,206,000\u001b[0m (31.30 MB)\n"]},"metadata":{},"output_type":"display_data"}],"source":["# from tensorflow.keras.layers import Bidirectional, LSTM, Dense, Flatten\n","\n","# # ✅ BiLSTM Layer\n","# bilstm = Bidirectional(LSTM(128, return_sequences=False))(fusion_output)\n","\n","# # ✅ Fully Connected Layer\n","# dense = Dense(64, activation='relu')(bilstm)\n","\n","# # ✅ Output Layer (Binary Classification)\n","# output = Dense(1, activation='sigmoid')(dense)  # Use 'softmax' for multi-class\n","\n","# # ✅ Define the Model\n","# final_model = Model(inputs=[input1, input2], outputs=output)\n","\n","# # ✅ Compile the Model\n","# final_model.compile(optimizer='adam', loss='binary_crossentropy', metrics=['accuracy'])\n","\n","# # ✅ Print Model Summary\n","# final_model.summary()\n","\n","from tensorflow.keras.layers import Bidirectional, LSTM, Dense, Dropout\n","from tensorflow.keras.regularizers import l2\n","\n","# ✅ BiLSTM Layer with L2 Regularization\n","bilstm = Bidirectional(LSTM(128, return_sequences=False, \n","                            kernel_regularizer=l2(0.001)))(fusion_output)\n","\n","# ✅ Dropout Layer (prevents overfitting)\n","bilstm = Dropout(0.3)(bilstm)  # Drop 30% of neurons randomly\n","\n","# ✅ Fully Connected Layer with L2 Regularization\n","dense = Dense(64, activation='relu', kernel_regularizer=l2(0.001))(bilstm)\n","\n","# ✅ Dropout after Dense Layer\n","dense = Dropout(0.3)(dense)\n","\n","# ✅ Output Layer (Binary Classification)\n","output = Dense(1, activation='sigmoid')(dense)  # Use 'softmax' for multi-class\n","\n","# ✅ Define the Model\n","final_model = Model(inputs=[input1, input2], outputs=output)\n","\n","# ✅ Compile the Model\n","final_model.compile(optimizer='adam', loss='binary_crossentropy', metrics=['accuracy'])\n","\n","# ✅ Print Model Summary\n","final_model.summary()\n"]},{"cell_type":"markdown","id":"79641fd1","metadata":{"papermill":{"duration":0.011052,"end_time":"2025-03-21T07:19:55.096733","exception":false,"start_time":"2025-03-21T07:19:55.085681","status":"completed"},"tags":[]},"source":["## 7. Training"]},{"cell_type":"code","execution_count":21,"id":"6f0a3a76","metadata":{"execution":{"iopub.execute_input":"2025-03-21T07:19:55.120014Z","iopub.status.busy":"2025-03-21T07:19:55.11976Z","iopub.status.idle":"2025-03-21T07:19:55.124503Z","shell.execute_reply":"2025-03-21T07:19:55.123781Z"},"papermill":{"duration":0.017681,"end_time":"2025-03-21T07:19:55.125679","exception":false,"start_time":"2025-03-21T07:19:55.107998","status":"completed"},"tags":[]},"outputs":[{"name":"stdout","output_type":"stream","text":["[0 1]\n"]}],"source":["print(np.unique(y_train))  # Should print: [0 1]\n"]},{"cell_type":"code","execution_count":22,"id":"5f8cfa25","metadata":{"execution":{"iopub.execute_input":"2025-03-21T07:19:55.149283Z","iopub.status.busy":"2025-03-21T07:19:55.14905Z","iopub.status.idle":"2025-03-21T07:19:55.152479Z","shell.execute_reply":"2025-03-21T07:19:55.151784Z"},"papermill":{"duration":0.016665,"end_time":"2025-03-21T07:19:55.153787","exception":false,"start_time":"2025-03-21T07:19:55.137122","status":"completed"},"tags":[]},"outputs":[],"source":["y_train = y_train.to_numpy().astype(int)\n","y_test = y_test.to_numpy().astype(int)"]},{"cell_type":"code","execution_count":23,"id":"8ecd3264","metadata":{"execution":{"iopub.execute_input":"2025-03-21T07:19:55.177478Z","iopub.status.busy":"2025-03-21T07:19:55.17725Z","iopub.status.idle":"2025-03-21T07:19:55.182641Z","shell.execute_reply":"2025-03-21T07:19:55.18171Z"},"papermill":{"duration":0.01887,"end_time":"2025-03-21T07:19:55.184035","exception":false,"start_time":"2025-03-21T07:19:55.165165","status":"completed"},"tags":[]},"outputs":[{"name":"stdout","output_type":"stream","text":["(40000, 200) (40000, 200) (40000,)\n","(10000, 200) (10000, 200) (10000,)\n"]}],"source":["print(X1_train.shape, X2_train.shape, y_train.shape)\n","print(X1_test.shape, X2_test.shape, y_test.shape)\n"]},{"cell_type":"code","execution_count":24,"id":"17fdc31a","metadata":{"execution":{"iopub.execute_input":"2025-03-21T07:19:55.20769Z","iopub.status.busy":"2025-03-21T07:19:55.2074Z","iopub.status.idle":"2025-03-21T07:19:55.211944Z","shell.execute_reply":"2025-03-21T07:19:55.211188Z"},"papermill":{"duration":0.017856,"end_time":"2025-03-21T07:19:55.213298","exception":false,"start_time":"2025-03-21T07:19:55.195442","status":"completed"},"tags":[]},"outputs":[{"name":"stdout","output_type":"stream","text":["<class 'numpy.ndarray'> <class 'numpy.ndarray'>\n","<class 'numpy.ndarray'>\n"]}],"source":["print(type(X1_train), type(X2_train))\n","print(type(y_train))"]},{"cell_type":"code","execution_count":25,"id":"cacab4f3","metadata":{"execution":{"iopub.execute_input":"2025-03-21T07:19:55.279777Z","iopub.status.busy":"2025-03-21T07:19:55.279437Z","iopub.status.idle":"2025-03-21T07:19:55.283834Z","shell.execute_reply":"2025-03-21T07:19:55.282784Z"},"papermill":{"duration":0.060312,"end_time":"2025-03-21T07:19:55.285176","exception":false,"start_time":"2025-03-21T07:19:55.224864","status":"completed"},"tags":[]},"outputs":[{"name":"stdout","output_type":"stream","text":["[0 1 1 0 1 0 1 1 1 0]\n"]}],"source":["print(y_train[:10])\n"]},{"cell_type":"code","execution_count":26,"id":"67e3702f","metadata":{"execution":{"iopub.execute_input":"2025-03-21T07:19:55.309387Z","iopub.status.busy":"2025-03-21T07:19:55.309156Z","iopub.status.idle":"2025-03-21T07:25:12.26531Z","shell.execute_reply":"2025-03-21T07:25:12.264629Z"},"papermill":{"duration":316.969789,"end_time":"2025-03-21T07:25:12.266739","exception":false,"start_time":"2025-03-21T07:19:55.29695","status":"completed"},"tags":[]},"outputs":[{"name":"stdout","output_type":"stream","text":["Class Weights: {0: 1.0074044225054148, 1: 0.9927036283317615}\n","Epoch 1/20\n","\u001b[1m625/625\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m21s\u001b[0m 24ms/step - accuracy: 0.5469 - loss: 0.9606 - val_accuracy: 0.6591 - val_loss: 0.6377\n","Epoch 2/20\n","\u001b[1m625/625\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m15s\u001b[0m 24ms/step - accuracy: 0.6719 - loss: 0.6263 - val_accuracy: 0.6944 - val_loss: 0.5957\n","Epoch 3/20\n","\u001b[1m625/625\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m15s\u001b[0m 24ms/step - accuracy: 0.7038 - loss: 0.5821 - val_accuracy: 0.7105 - val_loss: 0.5725\n","Epoch 4/20\n","\u001b[1m625/625\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m15s\u001b[0m 24ms/step - accuracy: 0.7132 - loss: 0.5694 - val_accuracy: 0.7171 - val_loss: 0.5637\n","Epoch 5/20\n","\u001b[1m625/625\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m15s\u001b[0m 24ms/step - accuracy: 0.7234 - loss: 0.5598 - val_accuracy: 0.7245 - val_loss: 0.5586\n","Epoch 6/20\n","\u001b[1m625/625\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m15s\u001b[0m 24ms/step - accuracy: 0.7319 - loss: 0.5532 - val_accuracy: 0.7209 - val_loss: 0.5576\n","Epoch 7/20\n","\u001b[1m625/625\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m15s\u001b[0m 24ms/step - accuracy: 0.7326 - loss: 0.5505 - val_accuracy: 0.7480 - val_loss: 0.5376\n","Epoch 8/20\n","\u001b[1m625/625\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m15s\u001b[0m 25ms/step - accuracy: 0.7492 - loss: 0.5337 - val_accuracy: 0.7502 - val_loss: 0.5320\n","Epoch 9/20\n","\u001b[1m625/625\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m15s\u001b[0m 25ms/step - accuracy: 0.7585 - loss: 0.5195 - val_accuracy: 0.7434 - val_loss: 0.5334\n","Epoch 10/20\n","\u001b[1m625/625\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m16s\u001b[0m 25ms/step - accuracy: 0.7566 - loss: 0.5202 - val_accuracy: 0.7644 - val_loss: 0.5274\n","Epoch 11/20\n","\u001b[1m625/625\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m16s\u001b[0m 25ms/step - accuracy: 0.7676 - loss: 0.5094 - val_accuracy: 0.7598 - val_loss: 0.5225\n","Epoch 12/20\n","\u001b[1m625/625\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m16s\u001b[0m 25ms/step - accuracy: 0.7711 - loss: 0.5041 - val_accuracy: 0.7565 - val_loss: 0.5206\n","Epoch 13/20\n","\u001b[1m625/625\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m16s\u001b[0m 25ms/step - accuracy: 0.7788 - loss: 0.4957 - val_accuracy: 0.7800 - val_loss: 0.5003\n","Epoch 14/20\n","\u001b[1m625/625\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m16s\u001b[0m 25ms/step - accuracy: 0.7876 - loss: 0.4843 - val_accuracy: 0.7742 - val_loss: 0.5000\n","Epoch 15/20\n","\u001b[1m625/625\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m16s\u001b[0m 26ms/step - accuracy: 0.7865 - loss: 0.4831 - val_accuracy: 0.7773 - val_loss: 0.4967\n","Epoch 16/20\n","\u001b[1m625/625\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m16s\u001b[0m 26ms/step - accuracy: 0.7934 - loss: 0.4759 - val_accuracy: 0.7858 - val_loss: 0.4911\n","Epoch 17/20\n","\u001b[1m625/625\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m16s\u001b[0m 25ms/step - accuracy: 0.7964 - loss: 0.4709 - val_accuracy: 0.7855 - val_loss: 0.4940\n","Epoch 18/20\n","\u001b[1m625/625\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m16s\u001b[0m 25ms/step - accuracy: 0.8035 - loss: 0.4621 - val_accuracy: 0.7873 - val_loss: 0.4934\n","Epoch 19/20\n","\u001b[1m625/625\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m16s\u001b[0m 26ms/step - accuracy: 0.8065 - loss: 0.4596 - val_accuracy: 0.7928 - val_loss: 0.4811\n","Epoch 20/20\n","\u001b[1m625/625\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m16s\u001b[0m 25ms/step - accuracy: 0.8105 - loss: 0.4517 - val_accuracy: 0.7968 - val_loss: 0.4865\n"]}],"source":["import numpy as np\n","from sklearn.utils.class_weight import compute_class_weight\n","from tensorflow.keras.callbacks import EarlyStopping, ModelCheckpoint\n","\n","# ✅ Compute Class Weights for Imbalanced Data\n","classes = np.array([0, 1])\n","class_weights = compute_class_weight(class_weight='balanced', classes=classes, y=y_train)\n","class_weight_dict = {cls: weight for cls, weight in zip(classes, class_weights)}\n","\n","# Ensure all classes have weights\n","for cls in [0, 1]:\n","    if cls not in class_weight_dict:\n","        class_weight_dict[cls] = 1.0  # Assign default weight\n","\n","print(\"Class Weights:\", class_weight_dict)  # Debugging output\n","\n","# ✅ Define Early Stopping (Prevents Overfitting)\n","early_stopping = EarlyStopping(monitor='val_loss', patience=5, restore_best_weights=True)\n","\n","# ✅ Save Best Model Checkpoint\n","model_checkpoint = ModelCheckpoint(\"best_model.keras\", save_best_only=True, monitor=\"val_loss\")\n","\n","# ✅ Train the Model with Class Weights & Callbacks\n","history = final_model.fit(\n","    [X1_train, X2_train], y_train, \n","    epochs=20, batch_size=64, \n","    validation_data=([X1_test, X2_test], y_test),\n","    class_weight=class_weight_dict,  # Include computed class weights\n","    callbacks=[early_stopping, model_checkpoint]  # Add callbacks\n",")\n"]},{"cell_type":"code","execution_count":27,"id":"013484f0","metadata":{"execution":{"iopub.execute_input":"2025-03-21T07:25:12.700118Z","iopub.status.busy":"2025-03-21T07:25:12.69979Z","iopub.status.idle":"2025-03-21T07:25:13.172273Z","shell.execute_reply":"2025-03-21T07:25:13.171373Z"},"papermill":{"duration":0.69226,"end_time":"2025-03-21T07:25:13.174051","exception":false,"start_time":"2025-03-21T07:25:12.481791","status":"completed"},"tags":[]},"outputs":[{"data":{"image/png":"\n","text/plain":["<Figure size 1200x500 with 2 Axes>"]},"metadata":{},"output_type":"display_data"}],"source":["import matplotlib.pyplot as plt\n","\n","# Extract loss and accuracy from history\n","epochs = range(1, len(history.history['loss']) + 1)\n","\n","# ✅ Plot Training & Validation Loss\n","plt.figure(figsize=(12, 5))\n","plt.subplot(1, 2, 1)\n","plt.plot(epochs, history.history['loss'], 'bo-', label='Training Loss')\n","plt.plot(epochs, history.history['val_loss'], 'r*-', label='Validation Loss')\n","plt.xlabel('Epochs')\n","plt.ylabel('Loss')\n","plt.title('Training vs Validation Loss')\n","plt.legend()\n","\n","# ✅ Plot Training & Validation Accuracy\n","plt.subplot(1, 2, 2)\n","plt.plot(epochs, history.history['accuracy'], 'bo-', label='Training Accuracy')\n","plt.plot(epochs, history.history['val_accuracy'], 'r*-', label='Validation Accuracy')\n","plt.xlabel('Epochs')\n","plt.ylabel('Accuracy')\n","plt.title('Training vs Validation Accuracy')\n","plt.legend()\n","\n","plt.show()\n"]},{"cell_type":"code","execution_count":28,"id":"654d8c7a","metadata":{"execution":{"iopub.execute_input":"2025-03-21T07:25:13.605666Z","iopub.status.busy":"2025-03-21T07:25:13.605318Z","iopub.status.idle":"2025-03-21T07:30:28.394025Z","shell.execute_reply":"2025-03-21T07:30:28.393074Z"},"papermill":{"duration":315.003566,"end_time":"2025-03-21T07:30:28.395457","exception":false,"start_time":"2025-03-21T07:25:13.391891","status":"completed"},"tags":[]},"outputs":[{"name":"stdout","output_type":"stream","text":["Epoch 1/20\n","\u001b[1m625/625\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m17s\u001b[0m 25ms/step - accuracy: 0.8140 - loss: 0.4484 - val_accuracy: 0.7934 - val_loss: 0.4801\n","Epoch 2/20\n","\u001b[1m625/625\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m16s\u001b[0m 25ms/step - accuracy: 0.8184 - loss: 0.4387 - val_accuracy: 0.7896 - val_loss: 0.4873\n","Epoch 3/20\n","\u001b[1m625/625\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m16s\u001b[0m 25ms/step - accuracy: 0.8219 - loss: 0.4322 - val_accuracy: 0.8067 - val_loss: 0.4703\n","Epoch 4/20\n","\u001b[1m625/625\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m16s\u001b[0m 25ms/step - accuracy: 0.8249 - loss: 0.4311 - val_accuracy: 0.7986 - val_loss: 0.4737\n","Epoch 5/20\n","\u001b[1m625/625\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m16s\u001b[0m 25ms/step - accuracy: 0.8280 - loss: 0.4265 - val_accuracy: 0.7902 - val_loss: 0.4923\n","Epoch 6/20\n","\u001b[1m625/625\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m16s\u001b[0m 25ms/step - accuracy: 0.8289 - loss: 0.4286 - val_accuracy: 0.8106 - val_loss: 0.4609\n","Epoch 7/20\n","\u001b[1m625/625\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m16s\u001b[0m 25ms/step - accuracy: 0.8364 - loss: 0.4133 - val_accuracy: 0.7984 - val_loss: 0.4775\n","Epoch 8/20\n","\u001b[1m625/625\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m16s\u001b[0m 25ms/step - accuracy: 0.8372 - loss: 0.4143 - val_accuracy: 0.8152 - val_loss: 0.4609\n","Epoch 9/20\n","\u001b[1m625/625\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m16s\u001b[0m 25ms/step - accuracy: 0.8364 - loss: 0.4093 - val_accuracy: 0.8029 - val_loss: 0.4886\n","Epoch 10/20\n","\u001b[1m625/625\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m16s\u001b[0m 25ms/step - accuracy: 0.8388 - loss: 0.4114 - val_accuracy: 0.8188 - val_loss: 0.4636\n","Epoch 11/20\n","\u001b[1m625/625\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m16s\u001b[0m 25ms/step - accuracy: 0.8448 - loss: 0.4023 - val_accuracy: 0.8134 - val_loss: 0.4663\n","Epoch 12/20\n","\u001b[1m625/625\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m16s\u001b[0m 25ms/step - accuracy: 0.8497 - loss: 0.3924 - val_accuracy: 0.7984 - val_loss: 0.4809\n","Epoch 13/20\n","\u001b[1m625/625\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m16s\u001b[0m 25ms/step - accuracy: 0.8509 - loss: 0.3892 - val_accuracy: 0.7836 - val_loss: 0.5419\n","Epoch 14/20\n","\u001b[1m625/625\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m16s\u001b[0m 25ms/step - accuracy: 0.8520 - loss: 0.3924 - val_accuracy: 0.8048 - val_loss: 0.4621\n","Epoch 15/20\n","\u001b[1m625/625\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m16s\u001b[0m 25ms/step - accuracy: 0.8581 - loss: 0.3788 - val_accuracy: 0.8243 - val_loss: 0.4577\n","Epoch 16/20\n","\u001b[1m625/625\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m16s\u001b[0m 25ms/step - accuracy: 0.8600 - loss: 0.3745 - val_accuracy: 0.8105 - val_loss: 0.4709\n","Epoch 17/20\n","\u001b[1m625/625\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m16s\u001b[0m 25ms/step - accuracy: 0.8614 - loss: 0.3773 - val_accuracy: 0.7853 - val_loss: 0.5210\n","Epoch 18/20\n","\u001b[1m625/625\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m16s\u001b[0m 25ms/step - accuracy: 0.8607 - loss: 0.3733 - val_accuracy: 0.8096 - val_loss: 0.4822\n","Epoch 19/20\n","\u001b[1m625/625\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m16s\u001b[0m 25ms/step - accuracy: 0.8576 - loss: 0.3804 - val_accuracy: 0.8148 - val_loss: 0.4808\n","Epoch 20/20\n","\u001b[1m625/625\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m16s\u001b[0m 25ms/step - accuracy: 0.8701 - loss: 0.3614 - val_accuracy: 0.8245 - val_loss: 0.4680\n"]},{"data":{"text/plain":["<keras.src.callbacks.history.History at 0x7c2eb8592620>"]},"execution_count":28,"metadata":{},"output_type":"execute_result"}],"source":["final_model.fit([X1_train, X2_train], y_train, \n","                epochs=20, batch_size=64, \n","                validation_data=([X1_test, X2_test], y_test))\n"]},{"cell_type":"code","execution_count":29,"id":"c0c20118","metadata":{"execution":{"iopub.execute_input":"2025-03-21T07:30:29.275175Z","iopub.status.busy":"2025-03-21T07:30:29.274661Z","iopub.status.idle":"2025-03-21T07:30:31.629483Z","shell.execute_reply":"2025-03-21T07:30:31.628744Z"},"papermill":{"duration":2.815838,"end_time":"2025-03-21T07:30:31.630908","exception":false,"start_time":"2025-03-21T07:30:28.81507","status":"completed"},"tags":[]},"outputs":[{"name":"stdout","output_type":"stream","text":["\u001b[1m313/313\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m2s\u001b[0m 7ms/step - accuracy: 0.8246 - loss: 0.4704\n","Test Accuracy: 0.8245\n"]}],"source":["loss, accuracy = final_model.evaluate([X1_test, X2_test], y_test)\n","print(f\"Test Accuracy: {accuracy:.4f}\")\n"]},{"cell_type":"code","execution_count":30,"id":"52450e5a","metadata":{"execution":{"iopub.execute_input":"2025-03-21T07:30:32.543796Z","iopub.status.busy":"2025-03-21T07:30:32.543357Z","iopub.status.idle":"2025-03-21T07:30:35.011581Z","shell.execute_reply":"2025-03-21T07:30:35.010442Z"},"papermill":{"duration":2.946739,"end_time":"2025-03-21T07:30:35.013147","exception":false,"start_time":"2025-03-21T07:30:32.066408","status":"completed"},"tags":[]},"outputs":[{"name":"stdout","output_type":"stream","text":["\u001b[1m313/313\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m2s\u001b[0m 6ms/step\n","              precision    recall  f1-score   support\n","\n","           0     0.8051    0.8547    0.8292      4984\n","           1     0.8463    0.7945    0.8195      5016\n","\n","    accuracy                         0.8245     10000\n","   macro avg     0.8257    0.8246    0.8244     10000\n","weighted avg     0.8258    0.8245    0.8244     10000\n","\n"]}],"source":["from sklearn.metrics import classification_report\n","\n","# ✅ Step 1: Get predictions (probabilities)\n","y_pred_probs = final_model.predict([X1_test, X2_test])  # Predicts probabilities\n","\n","# ✅ Step 2: Convert probabilities to class labels (Threshold = 0.5)\n","y_pred_labels = (y_pred_probs > 0.5).astype(int)  # Convert to binary (0 or 1)\n","\n","# ✅ Step 3: Compute classification report\n","report = classification_report(y_test, y_pred_labels, digits=4)\n","print(report)"]},{"cell_type":"code","execution_count":null,"id":"4bb17d3a","metadata":{"papermill":{"duration":0.445614,"end_time":"2025-03-21T07:30:35.894825","exception":false,"start_time":"2025-03-21T07:30:35.449211","status":"completed"},"tags":[]},"outputs":[],"source":[]},{"cell_type":"markdown","id":"499124d1","metadata":{"papermill":{"duration":0.416387,"end_time":"2025-03-21T07:30:36.77853","exception":false,"start_time":"2025-03-21T07:30:36.362143","status":"completed"},"tags":[]},"source":["## 8. Testing"]},{"cell_type":"code","execution_count":31,"id":"f01ad770","metadata":{"execution":{"iopub.execute_input":"2025-03-21T07:30:37.648795Z","iopub.status.busy":"2025-03-21T07:30:37.648427Z","iopub.status.idle":"2025-03-21T07:31:04.365319Z","shell.execute_reply":"2025-03-21T07:31:04.364294Z"},"papermill":{"duration":27.178724,"end_time":"2025-03-21T07:31:04.36762","exception":false,"start_time":"2025-03-21T07:30:37.188896","status":"completed"},"tags":[]},"outputs":[{"name":"stdout","output_type":"stream","text":["Final Test Dataset Size: (415416, 6)\n","   id       id1       id2  \\\n","0   0   2381663   4458076   \n","1   1   3809087  15757836   \n","2   2   6987642   4921631   \n","3   3  21316706   4168534   \n","4   4   4798332   1473212   \n","\nfunc1  \\\nest(expected = GadgetException.class)\\n    public void malformedGadgetSpecIsCachedAndThrows() throws Exception {\\n        HttpRequest request = createCacheableRequest();\\n        expect(pipeline.execute(request)).andReturn(new HttpResponse(\"malformed junk\")).once();\\n        replay(pipeline);\\n        try {\\n            specFactory.getGadgetSpec(createContext(SPEC_URL, false));\\n            fail(\"No exception thrown on bad parse\");\\n        } catch (GadgetException e) {\\n        }\\n        specFactory.getGadgetSpec(createContext(SPEC_URL, false));\\n    }\\n   \n","1      private boolean getWave(String url, String Word) {\\n        try {\\n            File FF = new File(f.getParent() + \"/\" + f.getName() + \"pron\");\\n            FF.mkdir();\\n            URL url2 = new URL(url);\\n            BufferedReader stream = new BufferedReader(new InputStreamReader(url2.openStream()));\\n            File Fdel = new File(f.getParent() + \"/\" + f.getName() + \"pron/\" + Word + \".wav\");\\n            if (!Fdel.exists()) {\\n                FileOutputStream outstream = new FileOutputStream(f.getParent() + \"/\" + f.getName() + \"pron/\" + Word + \".wav\");\\n                BufferedWriter bwriter = new BufferedWriter(new OutputStreamWriter(outstream));\\n                char[] binput = new char[1024];\\n                int len = stream.read(binput, 0, 1024);\\n                while (len > 0) {\\n                    bwriter.write(binput, 0, len);\\n                    len = stream.read(binput, 0, 1024);\\n                }\\n                bwriter.close();\\n                outstream.close();\\n            }\\n            stream.close();\\n        } catch (Exception e) {\\n            System.out.println(e.getMessage());\\n            return false;\\n        }\\n        return true;\\n    }\\n   \npublic static String encodePassword(String password) {\\n        MessageDigest md;\\n        try {\\n            md = MessageDigest.getInstance(\"SHA\");\\n            md.update(password.getBytes());\\n            String encodedPassword = new String(md.digest(), new Base64Provider().charsetForName(\"x-base64\"));\\n            return encodedPassword;\\n        } catch (NoSuchAlgorithmException e) {\\n            return null;\\n        }\\n    }\\n   \nverride\\n    protected URLConnection openConnection(URL url, Proxy proxy) throws IOException {\\n        if ((url == null) || (proxy == null)) {\\n            throw new IllegalArgumentException(Messages.getString(\"luni.1B\"));\\n        }\\n        return new HttpsURLConnectionImpl(url, getDefaultPort(), proxy);\\n    }\\n   \npublic static String SHA(String source) {\\n        logger.info(source);\\n        String result = null;\\n        try {\\n            MessageDigest digest = MessageDigest.getInstance(\"SHA\");\\n            digest.update(source.getBytes());\\n            byte[] bytes = digest.digest();\\n            result = EncodeUtils.hexEncode(bytes);\\n        } catch (NoSuchAlgorithmException e) {\\n            e.printStackTrace();\\n        }\\n        logger.info(result);\\n        return result;\\n    }\\n   \n","\n","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                  func2  \\\npublic InputStream getInputStream() throws TGBrowserException {\\n        try {\\n            if (!this.isFolder()) {\\n                URL url = new URL(this.url);\\n                InputStream stream = url.openStream();\\n                return stream;\\n            }\\n        } catch (Throwable throwable) {\\n            throw new TGBrowserException(throwable);\\n        }\\n        return null;\\n    }\\n   \nprivate int[] sort(int n) {\\n        int[] mas = new int[n];\\n        Random rand = new Random();\\n        for (int i = 0; i < n; i++) {\\n            mas[i] = rand.nextInt(10) + 1;\\n        }\\n        boolean t = true;\\n        int tmp = 0;\\n        while (t) {\\n            t = false;\\n            for (int i = 0; i < mas.length - 1; i++) {\\n                if (mas[i] > mas[i + 1]) {\\n                    tmp = mas[i];\\n                    mas[i] = mas[i + 1];\\n                    mas[i + 1] = tmp;\\n                    t = true;\\n                }\\n            }\\n        }\\n        return mas;\\n    }\\n   \n","2      public int create(BusinessObject o) throws DAOException {\\n        int insert = 0;\\n        int id = 0;\\n        Item item = (Item) o;\\n        try {\\n            PreparedStatement pst = connection.prepareStatement(XMLGetQuery.getQuery(\"INSERT_ITEM\"));\\n            pst.setString(1, item.getDescription());\\n            pst.setDouble(2, item.getUnit_price());\\n            pst.setInt(3, item.getQuantity());\\n            pst.setDouble(4, item.getVat());\\n            pst.setInt(5, item.getIdProject());\\n            pst.setInt(6, item.getIdCurrency());\\n            insert = pst.executeUpdate();\\n            if (insert <= 0) {\\n                connection.rollback();\\n                throw new DAOException(\"Number of rows <= 0\");\\n            } else if (insert > 1) {\\n                connection.rollback();\\n                throw new DAOException(\"Number of rows > 1\");\\n            }\\n            Statement st = connection.createStatement();\\n            ResultSet rs = st.executeQuery(\"select max(id_item) from item\");\\n            rs.next();\\n            id = rs.getInt(1);\\n            connection.commit();\\n        } catch (SQLException e) {\\n            Log.write(e.getMessage());\\n            throw new DAOException(\"A SQLException has occured\");\\n        } catch (NullPointerException npe) {\\n            Log.write(npe.getMessage());\\n            throw new DAOException(\"Connection null\");\\n        }\\n        return id;\\n    }\\n   \n","3                                                                                                                                                       public String insertSmsInf(Sms sms) throws Exception {\\n        String smsId = null;\\n        Connection conn = null;\\n        PreparedStatement pstmt = null;\\n        StringBuffer buffer = new StringBuffer();\\n        try {\\n            buffer.append(\"INSERT INTO COMTNSMS\\n\");\\n            buffer.append(\"  (SMS_ID, TRNSMIS_TELNO, TRNSMIS_CN,\\n\");\\n            buffer.append(\"   FRST_REGISTER_ID, FRST_REGIST_PNTTM )\\n\");\\n            buffer.append(\"VALUES\\n\");\\n            buffer.append(\"(?, ?, ?, ?, SYSDATE())\");\\n            conn = SmsBasicDBUtil.getConnection();\\n            conn.setAutoCommit(false);\\n            smsId = getNextId(conn);\\n            pstmt = conn.prepareStatement(buffer.toString());\\n            int index = 0;\\n            pstmt.setString(++index, smsId);\\n            pstmt.setString(++index, sms.getTrnsmitTelno());\\n            pstmt.setString(++index, sms.getTrnsmitCn());\\n            pstmt.setString(++index, sms.getFrstRegisterId());\\n            pstmt.executeUpdate();\\n            conn.commit();\\n            return smsId;\\n        } catch (Exception ex) {\\n            if (conn != null) {\\n                conn.rollback();\\n            }\\n            throw ex;\\n        } finally {\\n            SmsBasicDBUtil.close(null, pstmt, conn);\\n        }\\n    }\\n   \n","4                                                                                                                                                                                                                                                                                                                                                                                               @Test\\n    public void test_validate_geo_getEvents() {\\n        try {\\n            SchemaFactory factory = SchemaFactory.newInstance(\"http://www.w3.org/2001/XMLSchema\");\\n            File schemaLocation = new File(\"tes.xsd\");\\n            Schema schema = factory.newSchema(schemaLocation);\\n            Validator validator = schema.newValidator();\\n            URL url = new URL(\"http://ws.audioscrobbler.com/2.0/?method=geo.getevents&location=madrid&api_key=b25b959554ed76058ac220b7b2e0a026\");\\n            InputStream inputStream = url.openStream();\\n            Source source = new StreamSource(inputStream);\\n            validator.validate(source);\\n        } catch (IOException ex) {\\n            Logger.getLogger(GetEvents_Test.class.getName()).log(Level.SEVERE, null, ex);\\n            assertFalse(\"File not found\", true);\\n        } catch (SAXException ex) {\\n            Logger.getLogger(GetEvents_Test.class.getName()).log(Level.SEVERE, null, ex);\\n            assertFalse(\"Schema did not validate\", true);\\n        }\\n        assertTrue(true);\\n    }\\n   \n","\n","   label  \n","0  False  \n","1  False  \n","2  False  \n","3  False  \n","4  False  \n"]}],"source":["import datasets\n","\n","# Load full testing dataset (all splits)\n","test_dataset = datasets.load_dataset(\"code_x_glue_cc_clone_detection_big_clone_bench\", split=\"test\")\n","\n","# Convert to Pandas DataFrame for easier handling\n","test_df = test_dataset.to_pandas()\n","\n","# Save to a single CSV file (optional)\n","test_df.to_csv(\"bcb_test.csv\", index=False)\n","\n","print(f\"Final Test Dataset Size: {test_df.shape}\")\n","print(test_df.head())\n"]},{"cell_type":"code","execution_count":32,"id":"46327e72","metadata":{"execution":{"iopub.execute_input":"2025-03-21T07:31:05.654132Z","iopub.status.busy":"2025-03-21T07:31:05.653824Z","iopub.status.idle":"2025-03-21T07:31:05.662212Z","shell.execute_reply":"2025-03-21T07:31:05.661207Z"},"papermill":{"duration":0.595369,"end_time":"2025-03-21T07:31:05.663581","exception":false,"start_time":"2025-03-21T07:31:05.068212","status":"completed"},"tags":[]},"outputs":[{"name":"stdout","output_type":"stream","text":["Index(['id', 'id1', 'id2', 'func1', 'func2', 'label'], dtype='object')\n","id        int32\n","id1       int32\n","id2       int32\n","func1    object\n","func2    object\n","label      bool\n","dtype: object\n","   id       id1       id2  \\\n","0   0   2381663   4458076   \n","1   1   3809087  15757836   \n","2   2   6987642   4921631   \n","3   3  21316706   4168534   \n","4   4   4798332   1473212   \n","\nfunc1  \\\nest(expected = GadgetException.class)\\n    public void malformedGadgetSpecIsCachedAndThrows() throws Exception {\\n        HttpRequest request = createCacheableRequest();\\n        expect(pipeline.execute(request)).andReturn(new HttpResponse(\"malformed junk\")).once();\\n        replay(pipeline);\\n        try {\\n            specFactory.getGadgetSpec(createContext(SPEC_URL, false));\\n            fail(\"No exception thrown on bad parse\");\\n        } catch (GadgetException e) {\\n        }\\n        specFactory.getGadgetSpec(createContext(SPEC_URL, false));\\n    }\\n   \n","1      private boolean getWave(String url, String Word) {\\n        try {\\n            File FF = new File(f.getParent() + \"/\" + f.getName() + \"pron\");\\n            FF.mkdir();\\n            URL url2 = new URL(url);\\n            BufferedReader stream = new BufferedReader(new InputStreamReader(url2.openStream()));\\n            File Fdel = new File(f.getParent() + \"/\" + f.getName() + \"pron/\" + Word + \".wav\");\\n            if (!Fdel.exists()) {\\n                FileOutputStream outstream = new FileOutputStream(f.getParent() + \"/\" + f.getName() + \"pron/\" + Word + \".wav\");\\n                BufferedWriter bwriter = new BufferedWriter(new OutputStreamWriter(outstream));\\n                char[] binput = new char[1024];\\n                int len = stream.read(binput, 0, 1024);\\n                while (len > 0) {\\n                    bwriter.write(binput, 0, len);\\n                    len = stream.read(binput, 0, 1024);\\n                }\\n                bwriter.close();\\n                outstream.close();\\n            }\\n            stream.close();\\n        } catch (Exception e) {\\n            System.out.println(e.getMessage());\\n            return false;\\n        }\\n        return true;\\n    }\\n   \npublic static String encodePassword(String password) {\\n        MessageDigest md;\\n        try {\\n            md = MessageDigest.getInstance(\"SHA\");\\n            md.update(password.getBytes());\\n            String encodedPassword = new String(md.digest(), new Base64Provider().charsetForName(\"x-base64\"));\\n            return encodedPassword;\\n        } catch (NoSuchAlgorithmException e) {\\n            return null;\\n        }\\n    }\\n   \nverride\\n    protected URLConnection openConnection(URL url, Proxy proxy) throws IOException {\\n        if ((url == null) || (proxy == null)) {\\n            throw new IllegalArgumentException(Messages.getString(\"luni.1B\"));\\n        }\\n        return new HttpsURLConnectionImpl(url, getDefaultPort(), proxy);\\n    }\\n   \npublic static String SHA(String source) {\\n        logger.info(source);\\n        String result = null;\\n        try {\\n            MessageDigest digest = MessageDigest.getInstance(\"SHA\");\\n            digest.update(source.getBytes());\\n            byte[] bytes = digest.digest();\\n            result = EncodeUtils.hexEncode(bytes);\\n        } catch (NoSuchAlgorithmException e) {\\n            e.printStackTrace();\\n        }\\n        logger.info(result);\\n        return result;\\n    }\\n   \n","\nfunc2  \\\npublic InputStream getInputStream() throws TGBrowserException {\\n        try {\\n            if (!this.isFolder()) {\\n                URL url = new URL(this.url);\\n                InputStream stream = url.openStream();\\n                return stream;\\n            }\\n        } catch (Throwable throwable) {\\n            throw new TGBrowserException(throwable);\\n        }\\n        return null;\\n    }\\n   \nprivate int[] sort(int n) {\\n        int[] mas = new int[n];\\n        Random rand = new Random();\\n        for (int i = 0; i < n; i++) {\\n            mas[i] = rand.nextInt(10) + 1;\\n        }\\n        boolean t = true;\\n        int tmp = 0;\\n        while (t) {\\n            t = false;\\n            for (int i = 0; i < mas.length - 1; i++) {\\n                if (mas[i] > mas[i + 1]) {\\n                    tmp = mas[i];\\n                    mas[i] = mas[i + 1];\\n                    mas[i + 1] = tmp;\\n                    t = true;\\n                }\\n            }\\n        }\\n        return mas;\\n    }\\n   \n","2      public int create(BusinessObject o) throws DAOException {\\n        int insert = 0;\\n        int id = 0;\\n        Item item = (Item) o;\\n        try {\\n            PreparedStatement pst = connection.prepareStatement(XMLGetQuery.getQuery(\"INSERT_ITEM\"));\\n            pst.setString(1, item.getDescription());\\n            pst.setDouble(2, item.getUnit_price());\\n            pst.setInt(3, item.getQuantity());\\n            pst.setDouble(4, item.getVat());\\n            pst.setInt(5, item.getIdProject());\\n            pst.setInt(6, item.getIdCurrency());\\n            insert = pst.executeUpdate();\\n            if (insert <= 0) {\\n                connection.rollback();\\n                throw new DAOException(\"Number of rows <= 0\");\\n            } else if (insert > 1) {\\n                connection.rollback();\\n                throw new DAOException(\"Number of rows > 1\");\\n            }\\n            Statement st = connection.createStatement();\\n            ResultSet rs = st.executeQuery(\"select max(id_item) from item\");\\n            rs.next();\\n            id = rs.getInt(1);\\n            connection.commit();\\n        } catch (SQLException e) {\\n            Log.write(e.getMessage());\\n            throw new DAOException(\"A SQLException has occured\");\\n        } catch (NullPointerException npe) {\\n            Log.write(npe.getMessage());\\n            throw new DAOException(\"Connection null\");\\n        }\\n        return id;\\n    }\\n   \n","3                                                                                                                                                       public String insertSmsInf(Sms sms) throws Exception {\\n        String smsId = null;\\n        Connection conn = null;\\n        PreparedStatement pstmt = null;\\n        StringBuffer buffer = new StringBuffer();\\n        try {\\n            buffer.append(\"INSERT INTO COMTNSMS\\n\");\\n            buffer.append(\"  (SMS_ID, TRNSMIS_TELNO, TRNSMIS_CN,\\n\");\\n            buffer.append(\"   FRST_REGISTER_ID, FRST_REGIST_PNTTM )\\n\");\\n            buffer.append(\"VALUES\\n\");\\n            buffer.append(\"(?, ?, ?, ?, SYSDATE())\");\\n            conn = SmsBasicDBUtil.getConnection();\\n            conn.setAutoCommit(false);\\n            smsId = getNextId(conn);\\n            pstmt = conn.prepareStatement(buffer.toString());\\n            int index = 0;\\n            pstmt.setString(++index, smsId);\\n            pstmt.setString(++index, sms.getTrnsmitTelno());\\n            pstmt.setString(++index, sms.getTrnsmitCn());\\n            pstmt.setString(++index, sms.getFrstRegisterId());\\n            pstmt.executeUpdate();\\n            conn.commit();\\n            return smsId;\\n        } catch (Exception ex) {\\n            if (conn != null) {\\n                conn.rollback();\\n            }\\n            throw ex;\\n        } finally {\\n            SmsBasicDBUtil.close(null, pstmt, conn);\\n        }\\n    }\\n   \n","4                                                                                                                                                                                                                                                                                                                                                                                               @Test\\n    public void test_validate_geo_getEvents() {\\n        try {\\n            SchemaFactory factory = SchemaFactory.newInstance(\"http://www.w3.org/2001/XMLSchema\");\\n            File schemaLocation = new File(\"tes.xsd\");\\n            Schema schema = factory.newSchema(schemaLocation);\\n            Validator validator = schema.newValidator();\\n            URL url = new URL(\"http://ws.audioscrobbler.com/2.0/?method=geo.getevents&location=madrid&api_key=b25b959554ed76058ac220b7b2e0a026\");\\n            InputStream inputStream = url.openStream();\\n            Source source = new StreamSource(inputStream);\\n            validator.validate(source);\\n        } catch (IOException ex) {\\n            Logger.getLogger(GetEvents_Test.class.getName()).log(Level.SEVERE, null, ex);\\n            assertFalse(\"File not found\", true);\\n        } catch (SAXException ex) {\\n            Logger.getLogger(GetEvents_Test.class.getName()).log(Level.SEVERE, null, ex);\\n            assertFalse(\"Schema did not validate\", true);\\n        }\\n        assertTrue(true);\\n    }\\n   \n","\n","   label  \n","0  False  \n","1  False  \n","2  False  \n","3  False  \n","4  False  \n"]}],"source":["print(test_df.columns)  # Ensure all expected columns exist\n","print(test_df.dtypes)   # Check data types\n","print(test_df.iloc[:5]) # Print first 5 rows clearly"]},{"cell_type":"code","execution_count":33,"id":"529a2667","metadata":{"execution":{"iopub.execute_input":"2025-03-21T07:31:06.56162Z","iopub.status.busy":"2025-03-21T07:31:06.561238Z","iopub.status.idle":"2025-03-21T07:31:06.570507Z","shell.execute_reply":"2025-03-21T07:31:06.568342Z"},"papermill":{"duration":0.447757,"end_time":"2025-03-21T07:31:06.572204","exception":false,"start_time":"2025-03-21T07:31:06.124447","status":"completed"},"tags":[]},"outputs":[{"name":"stdout","output_type":"stream","text":["   id       id1       id2  \\\n","0   0   2381663   4458076   \n","1   1   3809087  15757836   \n","2   2   6987642   4921631   \n","3   3  21316706   4168534   \n","4   4   4798332   1473212   \n","5   5  19494842  21656668   \n","6   6  10728243  11562165   \n","7   7  12537270  17207832   \n","8   8   4778473   8953394   \n","9   9  19910627   4716110   \n","\n","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                      func1  \\\nest(expected = GadgetException.class)\\n    public void malformedGadgetSpecIsCachedAndThrows() throws Exception {\\n        HttpRequest request = createCacheableRequest();\\n        expect(pipeline.execute(request)).andReturn(new HttpResponse(\"malformed junk\")).once();\\n        replay(pipeline);\\n        try {\\n            specFactory.getGadgetSpec(createContext(SPEC_URL, false));\\n            fail(\"No exception thrown on bad parse\");\\n        } catch (GadgetException e) {\\n        }\\n        specFactory.getGadgetSpec(createContext(SPEC_URL, false));\\n    }\\n   \nprivate boolean getWave(String url, String Word) {\\n        try {\\n            File FF = new File(f.getParent() + \"/\" + f.getName() + \"pron\");\\n            FF.mkdir();\\n            URL url2 = new URL(url);\\n            BufferedReader stream = new BufferedReader(new InputStreamReader(url2.openStream()));\\n            File Fdel = new File(f.getParent() + \"/\" + f.getName() + \"pron/\" + Word + \".wav\");\\n            if (!Fdel.exists()) {\\n                FileOutputStream outstream = new FileOutputStream(f.getParent() + \"/\" + f.getName() + \"pron/\" + Word + \".wav\");\\n                BufferedWriter bwriter = new BufferedWriter(new OutputStreamWriter(outstream));\\n                char[] binput = new char[1024];\\n                int len = stream.read(binput, 0, 1024);\\n                while (len > 0) {\\n                    bwriter.write(binput, 0, len);\\n                    len = stream.read(binput, 0, 1024);\\n                }\\n                bwriter.close();\\n                outstream.close();\\n            }\\n            stream.close();\\n        } catch (Exception e) {\\n            System.out.println(e.getMessage());\\n            return false;\\n        }\\n        return true;\\n    }\\n   \npublic static String encodePassword(String password) {\\n        MessageDigest md;\\n        try {\\n            md = MessageDigest.getInstance(\"SHA\");\\n            md.update(password.getBytes());\\n            String encodedPassword = new String(md.digest(), new Base64Provider().charsetForName(\"x-base64\"));\\n            return encodedPassword;\\n        } catch (NoSuchAlgorithmException e) {\\n            return null;\\n        }\\n    }\\n   \nverride\\n    protected URLConnection openConnection(URL url, Proxy proxy) throws IOException {\\n        if ((url == null) || (proxy == null)) {\\n            throw new IllegalArgumentException(Messages.getString(\"luni.1B\"));\\n        }\\n        return new HttpsURLConnectionImpl(url, getDefaultPort(), proxy);\\n    }\\n   \npublic static String SHA(String source) {\\n        logger.info(source);\\n        String result = null;\\n        try {\\n            MessageDigest digest = MessageDigest.getInstance(\"SHA\");\\n            digest.update(source.getBytes());\\n            byte[] bytes = digest.digest();\\n            result = EncodeUtils.hexEncode(bytes);\\n        } catch (NoSuchAlgorithmException e) {\\n            e.printStackTrace();\\n        }\\n        logger.info(result);\\n        return result;\\n    }\\n   \nprivate void callService() {\\n        try {\\n            URL url = new URL(baseUrl + servicePath + attributes);\\n            BufferedReader in = new BufferedReader(new InputStreamReader(url.openStream()));\\n            String inputLine;\\n            StringBuffer buf = new StringBuffer();\\n            while ((inputLine = in.readLine()) != null) {\\n                buf.append(inputLine);\\n            }\\n            in.close();\\n            answer = buf.toString();\\n        } catch (MalformedURLException e) {\\n            answer = \"Malformed Url:\" + e.getMessage();\\n            return;\\n        } catch (IOException e) {\\n            answer = \"I/O exception: \" + e.getMessage();\\n            return;\\n        }\\n    }\\n   \n","6                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                        private byte[] scramble411(String password, String seed) {\\n        MessageDigest md;\\n        try {\\n            md = MessageDigest.getInstance(\"SHA-1\");\\n            byte[] passwordHashStage1 = md.digest(password.getBytes());\\n            md.reset();\\n            byte[] passwordHashStage2 = md.digest(passwordHashStage1);\\n            md.reset();\\n            md.update(seed.getBytes());\\n            md.update(passwordHashStage2);\\n            byte[] toBeXord = md.digest();\\n            int numToXor = toBeXord.length;\\n            for (int i = 0; i < numToXor; i++) {\\n                toBeXord[i] = (byte) (toBeXord[i] ^ passwordHashStage1[i]);\\n            }\\n            return toBeXord;\\n        } catch (NoSuchAlgorithmException e) {\\n            if (logger.isLoggable(Level.SEVERE)) {\\n                logger.log(Level.SEVERE, e.getMessage(), e);\\n            }\\n        }\\n        return null;\\n    }\\n   \n","7      public Vector parse(String link) {\\n        addMessage(\"Parsing: \" + link);\\n        links.removeAllElements();\\n        URLConnection conn = null;\\n        Reader rd = null;\\n        EditorKit kit = new HTMLEditorKit();\\n        Document doc = kit.createDefaultDocument();\\n        doc.putProperty(\"IgnoreCharsetDirective\", Boolean.TRUE);\\n        URL url = null;\\n        try {\\n            url = new URL(link);\\n        } catch (MalformedURLException err) {\\n            System.out.println(\"Malformed URL\");\\n            return links;\\n        }\\n        try {\\n            conn = new URL(link).openConnection();\\n            rd = new InputStreamReader(conn.getInputStream());\\n        } catch (Exception err) {\\n            err.printStackTrace();\\n            return links;\\n        }\\n        try {\\n            kit.read(rd, doc, 0);\\n            ElementIterator it = new ElementIterator(doc);\\n            javax.swing.text.Element elem;\\n            while ((elem = it.next()) != null) {\\n                SimpleAttributeSet s = (SimpleAttributeSet) elem.getAttributes().getAttribute(HTML.Tag.A);\\n                if (s != null) {\\n                    if (s.toString().indexOf(\"script\") >= 0) continue;\\n                    String lnk = \"\";\\n                    try {\\n                        lnk = s.getAttribute(HTML.Attribute.HREF).toString();\\n                    } catch (Exception err) {\\n                        continue;\\n                    }\\n                    int j = 0;\\n                    if ((j = lnk.indexOf('#')) >= 0) lnk = lnk.substring(0, j);\\n                    URL urlLink = new URL(url, lnk);\\n                    if (!url.getHost().equals(urlLink.getHost())) continue;\\n                    String str = urlLink.toString();\\n                    if (!str.startsWith(\"http\")) continue;\\n                    if (str.endsWith(\".pdf\")) {\\n                        continue;\\n                    }\\n                    for (int i = 0; i < leaveSuffix.length; i++) {\\n                        if ((str.endsWith(leaveSuffix[i]))) continue;\\n                    }\\n                    boolean skip = false;\\n                    for (int i = 0; i < suffix.length; i++) {\\n                        if ((str.endsWith(suffix[i]))) skip = true;\\n                    }\\n                    if (!skip) {\\n                        try {\\n                            conn = urlLink.openConnection();\\n                        } catch (Exception err) {\\n                        }\\n                        String contentType = null;\\n                        if (contentType == null) contentType = conn.getContentType();\\n                        if (contentType.equals(\"application/pdf\")) {\\n                            continue;\\n                        } else if (!contentType.equals(\"text/html\")) {\\n                            continue;\\n                        }\\n                    }\\n                    if (!links.contains(urlLink.toString())) {\\n                        links.addElement(urlLink.toString());\\n                    }\\n                }\\n            }\\n        } catch (Exception e) {\\n            e.printStackTrace();\\n        }\\n        return links;\\n    }\\n   \nprivate void loadProperties() {\\n        if (properties == null) {\\n            properties = new Properties();\\n            try {\\n                URL url = getClass().getResource(propsFile);\\n                properties.load(url.openStream());\\n            } catch (IOException ioe) {\\n                ioe.printStackTrace();\\n            }\\n        }\\n    }\\n   \npublic String getData(DefaultHttpClient httpclient) {\\n        try {\\n            HttpGet get = new HttpGet(\"http://3dforandroid.appspot.com/api/v1/note\");\\n            get.setHeader(\"Content-Type\", \"application/json\");\\n            get.setHeader(\"Accept\", \"*/*\");\\n            HttpResponse response = httpclient.execute(get);\\n            HttpEntity entity = response.getEntity();\\n            InputStream instream = entity.getContent();\\n            responseMessage = read(instream);\\n            if (instream != null) instream.close();\\n        } catch (ClientProtocolException e) {\\n            e.printStackTrace();\\n        } catch (IOException e) {\\n            e.printStackTrace();\\n        }\\n        return responseMessage;\\n    }\\n   \n","\nfunc2  \\\n","0                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                     public InputStream getInputStream() throws TGBrowserException {\\n        try {\\n            if (!this.isFolder()) {\\n                URL url = new URL(this.url);\\n                InputStream stream = url.openStream();\\n                return stream;\\n            }\\n        } catch (Throwable throwable) {\\n            throw new TGBrowserException(throwable);\\n        }\\n        return null;\\n    }\\n   \nprivate int[] sort(int n) {\\n        int[] mas = new int[n];\\n        Random rand = new Random();\\n        for (int i = 0; i < n; i++) {\\n            mas[i] = rand.nextInt(10) + 1;\\n        }\\n        boolean t = true;\\n        int tmp = 0;\\n        while (t) {\\n            t = false;\\n            for (int i = 0; i < mas.length - 1; i++) {\\n                if (mas[i] > mas[i + 1]) {\\n                    tmp = mas[i];\\n                    mas[i] = mas[i + 1];\\n                    mas[i + 1] = tmp;\\n                    t = true;\\n                }\\n            }\\n        }\\n        return mas;\\n    }\\n   \n","2      public int create(BusinessObject o) throws DAOException {\\n        int insert = 0;\\n        int id = 0;\\n        Item item = (Item) o;\\n        try {\\n            PreparedStatement pst = connection.prepareStatement(XMLGetQuery.getQuery(\"INSERT_ITEM\"));\\n            pst.setString(1, item.getDescription());\\n            pst.setDouble(2, item.getUnit_price());\\n            pst.setInt(3, item.getQuantity());\\n            pst.setDouble(4, item.getVat());\\n            pst.setInt(5, item.getIdProject());\\n            pst.setInt(6, item.getIdCurrency());\\n            insert = pst.executeUpdate();\\n            if (insert <= 0) {\\n                connection.rollback();\\n                throw new DAOException(\"Number of rows <= 0\");\\n            } else if (insert > 1) {\\n                connection.rollback();\\n                throw new DAOException(\"Number of rows > 1\");\\n            }\\n            Statement st = connection.createStatement();\\n            ResultSet rs = st.executeQuery(\"select max(id_item) from item\");\\n            rs.next();\\n            id = rs.getInt(1);\\n            connection.commit();\\n        } catch (SQLException e) {\\n            Log.write(e.getMessage());\\n            throw new DAOException(\"A SQLException has occured\");\\n        } catch (NullPointerException npe) {\\n            Log.write(npe.getMessage());\\n            throw new DAOException(\"Connection null\");\\n        }\\n        return id;\\n    }\\n   \n","3                                                                                                                                                       public String insertSmsInf(Sms sms) throws Exception {\\n        String smsId = null;\\n        Connection conn = null;\\n        PreparedStatement pstmt = null;\\n        StringBuffer buffer = new StringBuffer();\\n        try {\\n            buffer.append(\"INSERT INTO COMTNSMS\\n\");\\n            buffer.append(\"  (SMS_ID, TRNSMIS_TELNO, TRNSMIS_CN,\\n\");\\n            buffer.append(\"   FRST_REGISTER_ID, FRST_REGIST_PNTTM )\\n\");\\n            buffer.append(\"VALUES\\n\");\\n            buffer.append(\"(?, ?, ?, ?, SYSDATE())\");\\n            conn = SmsBasicDBUtil.getConnection();\\n            conn.setAutoCommit(false);\\n            smsId = getNextId(conn);\\n            pstmt = conn.prepareStatement(buffer.toString());\\n            int index = 0;\\n            pstmt.setString(++index, smsId);\\n            pstmt.setString(++index, sms.getTrnsmitTelno());\\n            pstmt.setString(++index, sms.getTrnsmitCn());\\n            pstmt.setString(++index, sms.getFrstRegisterId());\\n            pstmt.executeUpdate();\\n            conn.commit();\\n            return smsId;\\n        } catch (Exception ex) {\\n            if (conn != null) {\\n                conn.rollback();\\n            }\\n            throw ex;\\n        } finally {\\n            SmsBasicDBUtil.close(null, pstmt, conn);\\n        }\\n    }\\n   \n","4                                                                                                                                                                                                                                                                                                                                                                                               @Test\\n    public void test_validate_geo_getEvents() {\\n        try {\\n            SchemaFactory factory = SchemaFactory.newInstance(\"http://www.w3.org/2001/XMLSchema\");\\n            File schemaLocation = new File(\"tes.xsd\");\\n            Schema schema = factory.newSchema(schemaLocation);\\n            Validator validator = schema.newValidator();\\n            URL url = new URL(\"http://ws.audioscrobbler.com/2.0/?method=geo.getevents&location=madrid&api_key=b25b959554ed76058ac220b7b2e0a026\");\\n            InputStream inputStream = url.openStream();\\n            Source source = new StreamSource(inputStream);\\n            validator.validate(source);\\n        } catch (IOException ex) {\\n            Logger.getLogger(GetEvents_Test.class.getName()).log(Level.SEVERE, null, ex);\\n            assertFalse(\"File not found\", true);\\n        } catch (SAXException ex) {\\n            Logger.getLogger(GetEvents_Test.class.getName()).log(Level.SEVERE, null, ex);\\n            assertFalse(\"Schema did not validate\", true);\\n        }\\n        assertTrue(true);\\n    }\\n   \nprivate void copyResourceToFile(final String resourceFilename, final String destinationFilename) throws IOException {\\n        InputStream inStream = null;\\n        OutputStream outStream = null;\\n        try {\\n            inStream = MatsimResource.getAsInputStream(resourceFilename);\\n            outStream = new FileOutputStream(destinationFilename);\\n            IOUtils.copyStream(inStream, outStream);\\n        } finally {\\n            if (inStream != null) {\\n                try {\\n                    inStream.close();\\n                } catch (IOException e) {\\n                    e.printStackTrace();\\n                }\\n            }\\n            if (outStream != null) {\\n                try {\\n                    outStream.close();\\n                } catch (IOException e) {\\n                    e.printStackTrace();\\n                }\\n            }\\n        }\\n    }\\n   \nprivate void streamContains(String in, InputStream stream) throws IOException {\\n        ByteArrayOutputStream baos = new ByteArrayOutputStream();\\n        IOUtils.copy(stream, baos);\\n        byte[] bytes = baos.toByteArray();\\n        String cmp = new String(bytes, \"UTF-8\");\\n        assertTrue(cmp.contains(in));\\n        baos.close();\\n    }\\n   \nest\\n    public void returnsEnclosedResponseOnUnsuccessfulException() throws Exception {\\n        Exception e = new UnsuccessfulResponseException(resp);\\n        expect(mockBackend.execute(host, req, ctx)).andThrow(e);\\n        replay(mockBackend);\\n        HttpResponse result = impl.execute(host, req, ctx);\\n        verify(mockBackend);\\n        assertSame(resp, result);\\n    }\\n   \nprivate void update(String statement, SyrupConnection con, boolean do_log) throws Exception {\\n        Statement s = null;\\n        try {\\n            s = con.createStatement();\\n            s.executeUpdate(statement);\\n            con.commit();\\n        } catch (Throwable e) {\\n            if (do_log) {\\n                logger.log(Level.INFO, \"Update failed. Transaction is rolled back\", e);\\n            }\\n            con.rollback();\\n        }\\n    }\\n   \npublic static void copyFile(File in, File out) throws Exception {\\n        FileChannel sourceChannel = new FileInputStream(in).getChannel();\\n        FileChannel destinationChannel = new FileOutputStream(out).getChannel();\\n        sourceChannel.transferTo(0, sourceChannel.size(), destinationChannel);\\n        sourceChannel.close();\\n        destinationChannel.close();\\n    }\\n   \n","\n","   label  \n","0  False  \n","1  False  \n","2  False  \n","3  False  \n","4  False  \n","5  False  \n","6  False  \n","7  False  \n","8  False  \n","9  False  \n"]}],"source":["import pandas as pd\n","pd.set_option('display.max_colwidth', None)  # Prevent truncation\n","print(test_df.head(10))"]},{"cell_type":"code","execution_count":34,"id":"580c997d","metadata":{"execution":{"iopub.execute_input":"2025-03-21T07:31:07.477907Z","iopub.status.busy":"2025-03-21T07:31:07.477566Z","iopub.status.idle":"2025-03-21T07:31:07.482191Z","shell.execute_reply":"2025-03-21T07:31:07.481412Z"},"papermill":{"duration":0.434313,"end_time":"2025-03-21T07:31:07.483607","exception":false,"start_time":"2025-03-21T07:31:07.049294","status":"completed"},"tags":[]},"outputs":[{"name":"stdout","output_type":"stream","text":["Test Dataset: (415416, 6)\n"]}],"source":["print(f\"Test Dataset: {test_df.shape}\")"]},{"cell_type":"code","execution_count":35,"id":"e5ac76dc","metadata":{"execution":{"iopub.execute_input":"2025-03-21T07:31:08.442516Z","iopub.status.busy":"2025-03-21T07:31:08.442179Z","iopub.status.idle":"2025-03-21T07:31:08.449707Z","shell.execute_reply":"2025-03-21T07:31:08.448606Z"},"papermill":{"duration":0.519012,"end_time":"2025-03-21T07:31:08.451364","exception":false,"start_time":"2025-03-21T07:31:07.932352","status":"completed"},"tags":[]},"outputs":[{"name":"stdout","output_type":"stream","text":["   id       id1       id2  \\\n","0   0   2381663   4458076   \n","1   1   3809087  15757836   \n","2   2   6987642   4921631   \n","3   3  21316706   4168534   \n","4   4   4798332   1473212   \n","\nfunc1  \\\nest(expected = GadgetException.class)\\n    public void malformedGadgetSpecIsCachedAndThrows() throws Exception {\\n        HttpRequest request = createCacheableRequest();\\n        expect(pipeline.execute(request)).andReturn(new HttpResponse(\"malformed junk\")).once();\\n        replay(pipeline);\\n        try {\\n            specFactory.getGadgetSpec(createContext(SPEC_URL, false));\\n            fail(\"No exception thrown on bad parse\");\\n        } catch (GadgetException e) {\\n        }\\n        specFactory.getGadgetSpec(createContext(SPEC_URL, false));\\n    }\\n   \n","1      private boolean getWave(String url, String Word) {\\n        try {\\n            File FF = new File(f.getParent() + \"/\" + f.getName() + \"pron\");\\n            FF.mkdir();\\n            URL url2 = new URL(url);\\n            BufferedReader stream = new BufferedReader(new InputStreamReader(url2.openStream()));\\n            File Fdel = new File(f.getParent() + \"/\" + f.getName() + \"pron/\" + Word + \".wav\");\\n            if (!Fdel.exists()) {\\n                FileOutputStream outstream = new FileOutputStream(f.getParent() + \"/\" + f.getName() + \"pron/\" + Word + \".wav\");\\n                BufferedWriter bwriter = new BufferedWriter(new OutputStreamWriter(outstream));\\n                char[] binput = new char[1024];\\n                int len = stream.read(binput, 0, 1024);\\n                while (len > 0) {\\n                    bwriter.write(binput, 0, len);\\n                    len = stream.read(binput, 0, 1024);\\n                }\\n                bwriter.close();\\n                outstream.close();\\n            }\\n            stream.close();\\n        } catch (Exception e) {\\n            System.out.println(e.getMessage());\\n            return false;\\n        }\\n        return true;\\n    }\\n   \npublic static String encodePassword(String password) {\\n        MessageDigest md;\\n        try {\\n            md = MessageDigest.getInstance(\"SHA\");\\n            md.update(password.getBytes());\\n            String encodedPassword = new String(md.digest(), new Base64Provider().charsetForName(\"x-base64\"));\\n            return encodedPassword;\\n        } catch (NoSuchAlgorithmException e) {\\n            return null;\\n        }\\n    }\\n   \nverride\\n    protected URLConnection openConnection(URL url, Proxy proxy) throws IOException {\\n        if ((url == null) || (proxy == null)) {\\n            throw new IllegalArgumentException(Messages.getString(\"luni.1B\"));\\n        }\\n        return new HttpsURLConnectionImpl(url, getDefaultPort(), proxy);\\n    }\\n   \npublic static String SHA(String source) {\\n        logger.info(source);\\n        String result = null;\\n        try {\\n            MessageDigest digest = MessageDigest.getInstance(\"SHA\");\\n            digest.update(source.getBytes());\\n            byte[] bytes = digest.digest();\\n            result = EncodeUtils.hexEncode(bytes);\\n        } catch (NoSuchAlgorithmException e) {\\n            e.printStackTrace();\\n        }\\n        logger.info(result);\\n        return result;\\n    }\\n   \n","\n","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                  func2  \\\npublic InputStream getInputStream() throws TGBrowserException {\\n        try {\\n            if (!this.isFolder()) {\\n                URL url = new URL(this.url);\\n                InputStream stream = url.openStream();\\n                return stream;\\n            }\\n        } catch (Throwable throwable) {\\n            throw new TGBrowserException(throwable);\\n        }\\n        return null;\\n    }\\n   \n","1                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                       private int[] sort(int n) {\\n        int[] mas = new int[n];\\n        Random rand = new Random();\\n        for (int i = 0; i < n; i++) {\\n            mas[i] = rand.nextInt(10) + 1;\\n        }\\n        boolean t = true;\\n        int tmp = 0;\\n        while (t) {\\n            t = false;\\n            for (int i = 0; i < mas.length - 1; i++) {\\n                if (mas[i] > mas[i + 1]) {\\n                    tmp = mas[i];\\n                    mas[i] = mas[i + 1];\\n                    mas[i + 1] = tmp;\\n                    t = true;\\n                }\\n            }\\n        }\\n        return mas;\\n    }\\n   \n","2      public int create(BusinessObject o) throws DAOException {\\n        int insert = 0;\\n        int id = 0;\\n        Item item = (Item) o;\\n        try {\\n            PreparedStatement pst = connection.prepareStatement(XMLGetQuery.getQuery(\"INSERT_ITEM\"));\\n            pst.setString(1, item.getDescription());\\n            pst.setDouble(2, item.getUnit_price());\\n            pst.setInt(3, item.getQuantity());\\n            pst.setDouble(4, item.getVat());\\n            pst.setInt(5, item.getIdProject());\\n            pst.setInt(6, item.getIdCurrency());\\n            insert = pst.executeUpdate();\\n            if (insert <= 0) {\\n                connection.rollback();\\n                throw new DAOException(\"Number of rows <= 0\");\\n            } else if (insert > 1) {\\n                connection.rollback();\\n                throw new DAOException(\"Number of rows > 1\");\\n            }\\n            Statement st = connection.createStatement();\\n            ResultSet rs = st.executeQuery(\"select max(id_item) from item\");\\n            rs.next();\\n            id = rs.getInt(1);\\n            connection.commit();\\n        } catch (SQLException e) {\\n            Log.write(e.getMessage());\\n            throw new DAOException(\"A SQLException has occured\");\\n        } catch (NullPointerException npe) {\\n            Log.write(npe.getMessage());\\n            throw new DAOException(\"Connection null\");\\n        }\\n        return id;\\n    }\\n   \n","3                                                                                                                                                       public String insertSmsInf(Sms sms) throws Exception {\\n        String smsId = null;\\n        Connection conn = null;\\n        PreparedStatement pstmt = null;\\n        StringBuffer buffer = new StringBuffer();\\n        try {\\n            buffer.append(\"INSERT INTO COMTNSMS\\n\");\\n            buffer.append(\"  (SMS_ID, TRNSMIS_TELNO, TRNSMIS_CN,\\n\");\\n            buffer.append(\"   FRST_REGISTER_ID, FRST_REGIST_PNTTM )\\n\");\\n            buffer.append(\"VALUES\\n\");\\n            buffer.append(\"(?, ?, ?, ?, SYSDATE())\");\\n            conn = SmsBasicDBUtil.getConnection();\\n            conn.setAutoCommit(false);\\n            smsId = getNextId(conn);\\n            pstmt = conn.prepareStatement(buffer.toString());\\n            int index = 0;\\n            pstmt.setString(++index, smsId);\\n            pstmt.setString(++index, sms.getTrnsmitTelno());\\n            pstmt.setString(++index, sms.getTrnsmitCn());\\n            pstmt.setString(++index, sms.getFrstRegisterId());\\n            pstmt.executeUpdate();\\n            conn.commit();\\n            return smsId;\\n        } catch (Exception ex) {\\n            if (conn != null) {\\n                conn.rollback();\\n            }\\n            throw ex;\\n        } finally {\\n            SmsBasicDBUtil.close(null, pstmt, conn);\\n        }\\n    }\\n   \n","4                                                                                                                                                                                                                                                                                                                                                                                               @Test\\n    public void test_validate_geo_getEvents() {\\n        try {\\n            SchemaFactory factory = SchemaFactory.newInstance(\"http://www.w3.org/2001/XMLSchema\");\\n            File schemaLocation = new File(\"tes.xsd\");\\n            Schema schema = factory.newSchema(schemaLocation);\\n            Validator validator = schema.newValidator();\\n            URL url = new URL(\"http://ws.audioscrobbler.com/2.0/?method=geo.getevents&location=madrid&api_key=b25b959554ed76058ac220b7b2e0a026\");\\n            InputStream inputStream = url.openStream();\\n            Source source = new StreamSource(inputStream);\\n            validator.validate(source);\\n        } catch (IOException ex) {\\n            Logger.getLogger(GetEvents_Test.class.getName()).log(Level.SEVERE, null, ex);\\n            assertFalse(\"File not found\", true);\\n        } catch (SAXException ex) {\\n            Logger.getLogger(GetEvents_Test.class.getName()).log(Level.SEVERE, null, ex);\\n            assertFalse(\"Schema did not validate\", true);\\n        }\\n        assertTrue(true);\\n    }\\n   \n","\n","   label  \n","0  False  \n","1  False  \n","2  False  \n","3  False  \n","4  False  \n"]}],"source":["print(test_df.head(5))"]},{"cell_type":"code","execution_count":36,"id":"22e593c1","metadata":{"execution":{"iopub.execute_input":"2025-03-21T07:31:09.429405Z","iopub.status.busy":"2025-03-21T07:31:09.42897Z","iopub.status.idle":"2025-03-21T07:31:48.725897Z","shell.execute_reply":"2025-03-21T07:31:48.725122Z"},"papermill":{"duration":39.807915,"end_time":"2025-03-21T07:31:48.72765","exception":false,"start_time":"2025-03-21T07:31:08.919735","status":"completed"},"tags":[]},"outputs":[],"source":["# cleaning code\n","test_df[\"func1\"] = test_df[\"func1\"].apply(clean_code)\n","test_df[\"func2\"] = test_df[\"func2\"].apply(clean_code)"]},{"cell_type":"code","execution_count":37,"id":"72a28780","metadata":{"execution":{"iopub.execute_input":"2025-03-21T07:31:49.573945Z","iopub.status.busy":"2025-03-21T07:31:49.573598Z","iopub.status.idle":"2025-03-21T07:31:49.664814Z","shell.execute_reply":"2025-03-21T07:31:49.663788Z"},"papermill":{"duration":0.519653,"end_time":"2025-03-21T07:31:49.666251","exception":false,"start_time":"2025-03-21T07:31:49.146598","status":"completed"},"tags":[]},"outputs":[{"name":"stdout","output_type":"stream","text":["There are 5000 rows and 6 columns\n"]}],"source":["nRowsRead = 5000 # specify 'None' if want to read whole file\n","# ner_dataset.csv may have more rows in reality, but we are only loading/previewing the first 5000 rows\n","df_test = pd.read_csv(\"bcb_test.csv\", delimiter=',', nrows = nRowsRead, encoding='utf-8')\n","nRow, nCol = df_test.shape\n","print(f'There are {nRow} rows and {nCol} columns')"]},{"cell_type":"code","execution_count":38,"id":"a3b920f4","metadata":{"execution":{"iopub.execute_input":"2025-03-21T07:31:50.556135Z","iopub.status.busy":"2025-03-21T07:31:50.555816Z","iopub.status.idle":"2025-03-21T07:32:17.768639Z","shell.execute_reply":"2025-03-21T07:32:17.767603Z"},"papermill":{"duration":27.686984,"end_time":"2025-03-21T07:32:17.770196","exception":false,"start_time":"2025-03-21T07:31:50.083212","status":"completed"},"tags":[]},"outputs":[{"name":"stdout","output_type":"stream","text":["\u001b[1m157/157\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 7ms/step\n","Classification Report:\n","              precision    recall  f1-score   support\n","\n","           0       0.94      0.87      0.91      4320\n","           1       0.45      0.66      0.54       680\n","\n","    accuracy                           0.84      5000\n","   macro avg       0.70      0.77      0.72      5000\n","weighted avg       0.88      0.84      0.86      5000\n","\n","Test Accuracy: 0.8430\n","Confusion Matrix:\n","[[3763  557]\n"," [ 228  452]]\n"]}],"source":["import pandas as pd\n","from nltk.tokenize import word_tokenize\n","from tensorflow.keras.preprocessing.sequence import pad_sequences\n","from sklearn.metrics import classification_report, accuracy_score, confusion_matrix\n","\n","# Step 1: Load Your New Test Dataset\n","nRowsRead = 5000 # specify 'None' if want to read whole file\n","df_test = pd.read_csv(\"bcb_test.csv\", delimiter=',', nrows = nRowsRead, encoding='utf-8')  # Replace with actual file\n","\n","# Step 2: Tokenize Code Snippets\n","df_test[\"func1_tokens\"] = df_test[\"func1\"].apply(word_tokenize)\n","df_test[\"func2_tokens\"] = df_test[\"func2\"].apply(word_tokenize)\n","\n","# Step 3: Convert Tokens to Word Indices\n","def text_to_indices(text, model, vocab):\n","    tokens = word_tokenize(text)\n","    return [model.wv.key_to_index[word] for word in tokens if word in vocab]\n","\n","# Load your trained Word2Vec model\n","word2vec_model = gensim.models.Word2Vec.load(\"word2vec_bcb.model\")\n","\n","vocab = set(word2vec_model.wv.key_to_index.keys())\n","\n","df_test[\"func1_indices\"] = df_test[\"func1\"].apply(lambda x: text_to_indices(x, word2vec_model, vocab))\n","df_test[\"func2_indices\"] = df_test[\"func2\"].apply(lambda x: text_to_indices(x, word2vec_model, vocab))\n","\n","# Step 4: Apply Padding\n","MAX_SEQ_LENGTH = 200  # Ensure this matches the training phase\n","X1_test_new = pad_sequences(df_test[\"func1_indices\"], maxlen=MAX_SEQ_LENGTH, padding=\"post\")\n","X2_test_new = pad_sequences(df_test[\"func2_indices\"], maxlen=MAX_SEQ_LENGTH, padding=\"post\")\n","\n","# Step 5: Get True Labels\n","y_test_new = df_test[\"label\"].astype(int)  # Ensure labels are in integer format\n","\n","# Step 6: Make Predictions\n","y_preds = final_model.predict([X1_test_new, X2_test_new])\n","\n","# Step 7: Convert Predictions to Binary Labels\n","y_preds_binary = (y_preds > 0.5).astype(int).flatten()\n","\n","# Step 8: Evaluate Model Performance\n","print(\"Classification Report:\")\n","print(classification_report(y_test_new, y_preds_binary))\n","\n","print(f\"Test Accuracy: {accuracy_score(y_test_new, y_preds_binary):.4f}\")\n","\n","print(\"Confusion Matrix:\")\n","print(confusion_matrix(y_test_new, y_preds_binary))\n"]},{"cell_type":"code","execution_count":39,"id":"88e968a2","metadata":{"execution":{"iopub.execute_input":"2025-03-21T07:32:18.697091Z","iopub.status.busy":"2025-03-21T07:32:18.696794Z","iopub.status.idle":"2025-03-21T07:32:18.808427Z","shell.execute_reply":"2025-03-21T07:32:18.807732Z"},"papermill":{"duration":0.60366,"end_time":"2025-03-21T07:32:18.810057","exception":false,"start_time":"2025-03-21T07:32:18.206397","status":"completed"},"tags":[]},"outputs":[],"source":["# Save the model\n","final_model.save('/kaggle/working/BCB50k.h5')"]},{"cell_type":"code","execution_count":null,"id":"f451e03c","metadata":{"papermill":{"duration":0.415883,"end_time":"2025-03-21T07:32:19.647084","exception":false,"start_time":"2025-03-21T07:32:19.231201","status":"completed"},"tags":[]},"outputs":[],"source":[]}],"metadata":{"kaggle":{"accelerator":"nvidiaTeslaT4","dataSources":[],"dockerImageVersionId":30918,"isGpuEnabled":true,"isInternetEnabled":true,"language":"python","sourceType":"notebook"},"kernelspec":{"display_name":"Python 3","language":"python","name":"python3"},"language_info":{"codemirror_mode":{"name":"ipython","version":3},"file_extension":".py","mimetype":"text/x-python","name":"python","nbconvert_exporter":"python","pygments_lexer":"ipython3","version":"3.10.12"},"papermill":{"default_parameters":{},"duration":1307.167858,"end_time":"2025-03-21T07:32:23.226822","environment_variables":{},"exception":null,"input_path":"__notebook__.ipynb","output_path":"__notebook__.ipynb","parameters":{},"start_time":"2025-03-21T07:10:36.058964","version":"2.6.0"},"widgets":{"application/vnd.jupyter.widget-state+json":{"state":{"0056c28536024407946a7c761ec1cab8":{"model_module":"@jupyter-widgets/controls","model_module_version":"2.0.0","model_name":"ProgressStyleModel","state":{"_model_module":"@jupyter-widgets/controls","_model_module_version":"2.0.0","_model_name":"ProgressStyleModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"2.0.0","_view_name":"StyleView","bar_color":null,"description_width":""}},"0157f2b2d46e488e922168feb20c96a7":{"model_module":"@jupyter-widgets/controls","model_module_version":"2.0.0","model_name":"ProgressStyleModel","state":{"_model_module":"@jupyter-widgets/controls","_model_module_version":"2.0.0","_model_name":"ProgressStyleModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"2.0.0","_view_name":"StyleView","bar_color":null,"description_width":""}},"01b51b12bc764173b5a17a614355d5de":{"model_module":"@jupyter-widgets/base","model_module_version":"2.0.0","model_name":"LayoutModel","state":{"_model_module":"@jupyter-widgets/base","_model_module_version":"2.0.0","_model_name":"LayoutModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"2.0.0","_view_name":"LayoutView","align_content":null,"align_items":null,"align_self":null,"border_bottom":null,"border_left":null,"border_right":null,"border_top":null,"bottom":null,"display":null,"flex":null,"flex_flow":null,"grid_area":null,"grid_auto_columns":null,"grid_auto_flow":null,"grid_auto_rows":null,"grid_column":null,"grid_gap":null,"grid_row":null,"grid_template_areas":null,"grid_template_columns":null,"grid_template_rows":null,"height":null,"justify_content":null,"justify_items":null,"left":null,"margin":null,"max_height":null,"max_width":null,"min_height":null,"min_width":null,"object_fit":null,"object_position":null,"order":null,"overflow":null,"padding":null,"right":null,"top":null,"visibility":null,"width":null}},"046ba271c6e240ecb7d50ad8194bcc95":{"model_module":"@jupyter-widgets/controls","model_module_version":"2.0.0","model_name":"HBoxModel","state":{"_dom_classes":[],"_model_module":"@jupyter-widgets/controls","_model_module_version":"2.0.0","_model_name":"HBoxModel","_view_count":null,"_view_module":"@jupyter-widgets/controls","_view_module_version":"2.0.0","_view_name":"HBoxView","box_style":"","children":["IPY_MODEL_684ed6431afd4d98af55d1a2013f13db","IPY_MODEL_8e52d1b71a044ff58c4979d5de9728a6","IPY_MODEL_fc322a81e1ba4897b6109359ca625faa"],"layout":"IPY_MODEL_40fb92d4ac424e62abf67c7ebbb31c82","tabbable":null,"tooltip":null}},"04830ec23b664df19733d7e98bf01c1a":{"model_module":"@jupyter-widgets/base","model_module_version":"2.0.0","model_name":"LayoutModel","state":{"_model_module":"@jupyter-widgets/base","_model_module_version":"2.0.0","_model_name":"LayoutModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"2.0.0","_view_name":"LayoutView","align_content":null,"align_items":null,"align_self":null,"border_bottom":null,"border_left":null,"border_right":null,"border_top":null,"bottom":null,"display":null,"flex":null,"flex_flow":null,"grid_area":null,"grid_auto_columns":null,"grid_auto_flow":null,"grid_auto_rows":null,"grid_column":null,"grid_gap":null,"grid_row":null,"grid_template_areas":null,"grid_template_columns":null,"grid_template_rows":null,"height":null,"justify_content":null,"justify_items":null,"left":null,"margin":null,"max_height":null,"max_width":null,"min_height":null,"min_width":null,"object_fit":null,"object_position":null,"order":null,"overflow":null,"padding":null,"right":null,"top":null,"visibility":null,"width":null}},"04f5b4926274460f89ac4de6eac6320d":{"model_module":"@jupyter-widgets/base","model_module_version":"2.0.0","model_name":"LayoutModel","state":{"_model_module":"@jupyter-widgets/base","_model_module_version":"2.0.0","_model_name":"LayoutModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"2.0.0","_view_name":"LayoutView","align_content":null,"align_items":null,"align_self":null,"border_bottom":null,"border_left":null,"border_right":null,"border_top":null,"bottom":null,"display":null,"flex":null,"flex_flow":null,"grid_area":null,"grid_auto_columns":null,"grid_auto_flow":null,"grid_auto_rows":null,"grid_column":null,"grid_gap":null,"grid_row":null,"grid_template_areas":null,"grid_template_columns":null,"grid_template_rows":null,"height":null,"justify_content":null,"justify_items":null,"left":null,"margin":null,"max_height":null,"max_width":null,"min_height":null,"min_width":null,"object_fit":null,"object_position":null,"order":null,"overflow":null,"padding":null,"right":null,"top":null,"visibility":null,"width":null}},"05251b3b4fd74dd8a1d9e63401ae03d1":{"model_module":"@jupyter-widgets/controls","model_module_version":"2.0.0","model_name":"HBoxModel","state":{"_dom_classes":[],"_model_module":"@jupyter-widgets/controls","_model_module_version":"2.0.0","_model_name":"HBoxModel","_view_count":null,"_view_module":"@jupyter-widgets/controls","_view_module_version":"2.0.0","_view_name":"HBoxView","box_style":"","children":["IPY_MODEL_efbe8f49957c4e2e91fe09d0c3457fde","IPY_MODEL_88aca31ac6f64c83a5332d4ed6769dcf","IPY_MODEL_6e8f9e17d77942469dd813be9c55d8a4"],"layout":"IPY_MODEL_dee81c535a5a46b49c8ec7d043b2d5dc","tabbable":null,"tooltip":null}},"053dacd65e5942b99ed12b30abdb6614":{"model_module":"@jupyter-widgets/controls","model_module_version":"2.0.0","model_name":"HTMLModel","state":{"_dom_classes":[],"_model_module":"@jupyter-widgets/controls","_model_module_version":"2.0.0","_model_name":"HTMLModel","_view_count":null,"_view_module":"@jupyter-widgets/controls","_view_module_version":"2.0.0","_view_name":"HTMLView","description":"","description_allow_html":false,"layout":"IPY_MODEL_13ea1d7e05354924a6cf33e2a8d6171b","placeholder":"​","style":"IPY_MODEL_47f93f2a2ad84baa9bfb8e7310c51c04","tabbable":null,"tooltip":null,"value":" 73.5M/73.5M [00:00&lt;00:00, 190MB/s]"}},"066d5a6689ad4c20a8809e53da0db1bc":{"model_module":"@jupyter-widgets/base","model_module_version":"2.0.0","model_name":"LayoutModel","state":{"_model_module":"@jupyter-widgets/base","_model_module_version":"2.0.0","_model_name":"LayoutModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"2.0.0","_view_name":"LayoutView","align_content":null,"align_items":null,"align_self":null,"border_bottom":null,"border_left":null,"border_right":null,"border_top":null,"bottom":null,"display":null,"flex":null,"flex_flow":null,"grid_area":null,"grid_auto_columns":null,"grid_auto_flow":null,"grid_auto_rows":null,"grid_column":null,"grid_gap":null,"grid_row":null,"grid_template_areas":null,"grid_template_columns":null,"grid_template_rows":null,"height":null,"justify_content":null,"justify_items":null,"left":null,"margin":null,"max_height":null,"max_width":null,"min_height":null,"min_width":null,"object_fit":null,"object_position":null,"order":null,"overflow":null,"padding":null,"right":null,"top":null,"visibility":null,"width":null}},"081e956a96ac4291893592997466b15f":{"model_module":"@jupyter-widgets/controls","model_module_version":"2.0.0","model_name":"HTMLStyleModel","state":{"_model_module":"@jupyter-widgets/controls","_model_module_version":"2.0.0","_model_name":"HTMLStyleModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"2.0.0","_view_name":"StyleView","background":null,"description_width":"","font_size":null,"text_color":null}},"0c4c1343cf344e0b89300bb16c052974":{"model_module":"@jupyter-widgets/base","model_module_version":"2.0.0","model_name":"LayoutModel","state":{"_model_module":"@jupyter-widgets/base","_model_module_version":"2.0.0","_model_name":"LayoutModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"2.0.0","_view_name":"LayoutView","align_content":null,"align_items":null,"align_self":null,"border_bottom":null,"border_left":null,"border_right":null,"border_top":null,"bottom":null,"display":null,"flex":null,"flex_flow":null,"grid_area":null,"grid_auto_columns":null,"grid_auto_flow":null,"grid_auto_rows":null,"grid_column":null,"grid_gap":null,"grid_row":null,"grid_template_areas":null,"grid_template_columns":null,"grid_template_rows":null,"height":null,"justify_content":null,"justify_items":null,"left":null,"margin":null,"max_height":null,"max_width":null,"min_height":null,"min_width":null,"object_fit":null,"object_position":null,"order":null,"overflow":null,"padding":null,"right":null,"top":null,"visibility":null,"width":null}},"0c9b52ac09b64bfda855e9b23b715de9":{"model_module":"@jupyter-widgets/controls","model_module_version":"2.0.0","model_name":"HTMLStyleModel","state":{"_model_module":"@jupyter-widgets/controls","_model_module_version":"2.0.0","_model_name":"HTMLStyleModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"2.0.0","_view_name":"StyleView","background":null,"description_width":"","font_size":null,"text_color":null}},"0df82b8d7dd544a28219c2c8f94d5abe":{"model_module":"@jupyter-widgets/controls","model_module_version":"2.0.0","model_name":"FloatProgressModel","state":{"_dom_classes":[],"_model_module":"@jupyter-widgets/controls","_model_module_version":"2.0.0","_model_name":"FloatProgressModel","_view_count":null,"_view_module":"@jupyter-widgets/controls","_view_module_version":"2.0.0","_view_name":"ProgressView","bar_style":"success","description":"","description_allow_html":false,"layout":"IPY_MODEL_8d7a7d8693034e47a4ca5da6ac9fb69f","max":415416.0,"min":0.0,"orientation":"horizontal","style":"IPY_MODEL_0157f2b2d46e488e922168feb20c96a7","tabbable":null,"tooltip":null,"value":415416.0}},"13ea1d7e05354924a6cf33e2a8d6171b":{"model_module":"@jupyter-widgets/base","model_module_version":"2.0.0","model_name":"LayoutModel","state":{"_model_module":"@jupyter-widgets/base","_model_module_version":"2.0.0","_model_name":"LayoutModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"2.0.0","_view_name":"LayoutView","align_content":null,"align_items":null,"align_self":null,"border_bottom":null,"border_left":null,"border_right":null,"border_top":null,"bottom":null,"display":null,"flex":null,"flex_flow":null,"grid_area":null,"grid_auto_columns":null,"grid_auto_flow":null,"grid_auto_rows":null,"grid_column":null,"grid_gap":null,"grid_row":null,"grid_template_areas":null,"grid_template_columns":null,"grid_template_rows":null,"height":null,"justify_content":null,"justify_items":null,"left":null,"margin":null,"max_height":null,"max_width":null,"min_height":null,"min_width":null,"object_fit":null,"object_position":null,"order":null,"overflow":null,"padding":null,"right":null,"top":null,"visibility":null,"width":null}},"1795bebd38694010bc2bf91ae26c00c4":{"model_module":"@jupyter-widgets/controls","model_module_version":"2.0.0","model_name":"HTMLStyleModel","state":{"_model_module":"@jupyter-widgets/controls","_model_module_version":"2.0.0","_model_name":"HTMLStyleModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"2.0.0","_view_name":"StyleView","background":null,"description_width":"","font_size":null,"text_color":null}},"1adc42d308a64aa2930eed273d6782d5":{"model_module":"@jupyter-widgets/controls","model_module_version":"2.0.0","model_name":"HTMLModel","state":{"_dom_classes":[],"_model_module":"@jupyter-widgets/controls","_model_module_version":"2.0.0","_model_name":"HTMLModel","_view_count":null,"_view_module":"@jupyter-widgets/controls","_view_module_version":"2.0.0","_view_name":"HTMLView","description":"","description_allow_html":false,"layout":"IPY_MODEL_b909f050350e432487ef5f1dcd89493b","placeholder":"​","style":"IPY_MODEL_e87e7bbbfd6146f5baae2fd1e145de00","tabbable":null,"tooltip":null,"value":" 136M/136M [00:00&lt;00:00, 205MB/s]"}},"1e0de3057df74a2daa71efc125bdf0fd":{"model_module":"@jupyter-widgets/base","model_module_version":"2.0.0","model_name":"LayoutModel","state":{"_model_module":"@jupyter-widgets/base","_model_module_version":"2.0.0","_model_name":"LayoutModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"2.0.0","_view_name":"LayoutView","align_content":null,"align_items":null,"align_self":null,"border_bottom":null,"border_left":null,"border_right":null,"border_top":null,"bottom":null,"display":null,"flex":null,"flex_flow":null,"grid_area":null,"grid_auto_columns":null,"grid_auto_flow":null,"grid_auto_rows":null,"grid_column":null,"grid_gap":null,"grid_row":null,"grid_template_areas":null,"grid_template_columns":null,"grid_template_rows":null,"height":null,"justify_content":null,"justify_items":null,"left":null,"margin":null,"max_height":null,"max_width":null,"min_height":null,"min_width":null,"object_fit":null,"object_position":null,"order":null,"overflow":null,"padding":null,"right":null,"top":null,"visibility":null,"width":null}},"200aa59628734ecf99a552d2eb27d00b":{"model_module":"@jupyter-widgets/controls","model_module_version":"2.0.0","model_name":"FloatProgressModel","state":{"_dom_classes":[],"_model_module":"@jupyter-widgets/controls","_model_module_version":"2.0.0","_model_name":"FloatProgressModel","_view_count":null,"_view_module":"@jupyter-widgets/controls","_view_module_version":"2.0.0","_view_name":"ProgressView","bar_style":"success","description":"","description_allow_html":false,"layout":"IPY_MODEL_8b56f047a637458d96a8298e73cca158","max":901028.0,"min":0.0,"orientation":"horizontal","style":"IPY_MODEL_ec94c23591d046e6bf9031fae4d9f2f5","tabbable":null,"tooltip":null,"value":901028.0}},"251ddb135c65484fa358288ed8f9385e":{"model_module":"@jupyter-widgets/base","model_module_version":"2.0.0","model_name":"LayoutModel","state":{"_model_module":"@jupyter-widgets/base","_model_module_version":"2.0.0","_model_name":"LayoutModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"2.0.0","_view_name":"LayoutView","align_content":null,"align_items":null,"align_self":null,"border_bottom":null,"border_left":null,"border_right":null,"border_top":null,"bottom":null,"display":null,"flex":null,"flex_flow":null,"grid_area":null,"grid_auto_columns":null,"grid_auto_flow":null,"grid_auto_rows":null,"grid_column":null,"grid_gap":null,"grid_row":null,"grid_template_areas":null,"grid_template_columns":null,"grid_template_rows":null,"height":null,"justify_content":null,"justify_items":null,"left":null,"margin":null,"max_height":null,"max_width":null,"min_height":null,"min_width":null,"object_fit":null,"object_position":null,"order":null,"overflow":null,"padding":null,"right":null,"top":null,"visibility":null,"width":null}},"29c347c13fc947a794dfce1e3fcf4802":{"model_module":"@jupyter-widgets/controls","model_module_version":"2.0.0","model_name":"FloatProgressModel","state":{"_dom_classes":[],"_model_module":"@jupyter-widgets/controls","_model_module_version":"2.0.0","_model_name":"FloatProgressModel","_view_count":null,"_view_module":"@jupyter-widgets/controls","_view_module_version":"2.0.0","_view_name":"ProgressView","bar_style":"success","description":"","description_allow_html":false,"layout":"IPY_MODEL_8912688de00441eeb9536ef3cc07d77a","max":73531556.0,"min":0.0,"orientation":"horizontal","style":"IPY_MODEL_9bfe7456481245ec89602a8a1a9c47e2","tabbable":null,"tooltip":null,"value":73531556.0}},"2b684aab1e444f08ae7be3939bdb3447":{"model_module":"@jupyter-widgets/base","model_module_version":"2.0.0","model_name":"LayoutModel","state":{"_model_module":"@jupyter-widgets/base","_model_module_version":"2.0.0","_model_name":"LayoutModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"2.0.0","_view_name":"LayoutView","align_content":null,"align_items":null,"align_self":null,"border_bottom":null,"border_left":null,"border_right":null,"border_top":null,"bottom":null,"display":null,"flex":null,"flex_flow":null,"grid_area":null,"grid_auto_columns":null,"grid_auto_flow":null,"grid_auto_rows":null,"grid_column":null,"grid_gap":null,"grid_row":null,"grid_template_areas":null,"grid_template_columns":null,"grid_template_rows":null,"height":null,"justify_content":null,"justify_items":null,"left":null,"margin":null,"max_height":null,"max_width":null,"min_height":null,"min_width":null,"object_fit":null,"object_position":null,"order":null,"overflow":null,"padding":null,"right":null,"top":null,"visibility":null,"width":null}},"2d7ba54870ce4ac1a656ab1f9f09159c":{"model_module":"@jupyter-widgets/base","model_module_version":"2.0.0","model_name":"LayoutModel","state":{"_model_module":"@jupyter-widgets/base","_model_module_version":"2.0.0","_model_name":"LayoutModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"2.0.0","_view_name":"LayoutView","align_content":null,"align_items":null,"align_self":null,"border_bottom":null,"border_left":null,"border_right":null,"border_top":null,"bottom":null,"display":null,"flex":null,"flex_flow":null,"grid_area":null,"grid_auto_columns":null,"grid_auto_flow":null,"grid_auto_rows":null,"grid_column":null,"grid_gap":null,"grid_row":null,"grid_template_areas":null,"grid_template_columns":null,"grid_template_rows":null,"height":null,"justify_content":null,"justify_items":null,"left":null,"margin":null,"max_height":null,"max_width":null,"min_height":null,"min_width":null,"object_fit":null,"object_position":null,"order":null,"overflow":null,"padding":null,"right":null,"top":null,"visibility":null,"width":null}},"304b1e03ece142d5a480bc92ded76798":{"model_module":"@jupyter-widgets/controls","model_module_version":"2.0.0","model_name":"HBoxModel","state":{"_dom_classes":[],"_model_module":"@jupyter-widgets/controls","_model_module_version":"2.0.0","_model_name":"HBoxModel","_view_count":null,"_view_module":"@jupyter-widgets/controls","_view_module_version":"2.0.0","_view_name":"HBoxView","box_style":"","children":["IPY_MODEL_90c2d1df790d4e949b0f8c3345028fc3","IPY_MODEL_92a1a7624b304616bf8a63cfd9c46fd0","IPY_MODEL_d3ba15f0de7b489caa67eadb6585451c"],"layout":"IPY_MODEL_92e34b6f6ef84c0bb08a05529fce061c","tabbable":null,"tooltip":null}},"3159c452f6174709b96c2b3db31e1c82":{"model_module":"@jupyter-widgets/controls","model_module_version":"2.0.0","model_name":"HTMLModel","state":{"_dom_classes":[],"_model_module":"@jupyter-widgets/controls","_model_module_version":"2.0.0","_model_name":"HTMLModel","_view_count":null,"_view_module":"@jupyter-widgets/controls","_view_module_version":"2.0.0","_view_name":"HTMLView","description":"","description_allow_html":false,"layout":"IPY_MODEL_bd49a655ebe24df780e68ab1bc767cd8","placeholder":"​","style":"IPY_MODEL_f5bc21eb35654d039d7bdb442368b28a","tabbable":null,"tooltip":null,"value":" 79.4M/79.4M [00:00&lt;00:00, 228MB/s]"}},"3243b3332a39402a964214305ad4db59":{"model_module":"@jupyter-widgets/controls","model_module_version":"2.0.0","model_name":"HBoxModel","state":{"_dom_classes":[],"_model_module":"@jupyter-widgets/controls","_model_module_version":"2.0.0","_model_name":"HBoxModel","_view_count":null,"_view_module":"@jupyter-widgets/controls","_view_module_version":"2.0.0","_view_name":"HBoxView","box_style":"","children":["IPY_MODEL_b6159ea2dea7467d80372cc69e45d281","IPY_MODEL_40d5463e35de4f86819514a36e30b132","IPY_MODEL_b78aa230a81d4712a7f3cf02bbdd1855"],"layout":"IPY_MODEL_251ddb135c65484fa358288ed8f9385e","tabbable":null,"tooltip":null}},"3388533ecef14599a8a912f7a56891c8":{"model_module":"@jupyter-widgets/controls","model_module_version":"2.0.0","model_name":"FloatProgressModel","state":{"_dom_classes":[],"_model_module":"@jupyter-widgets/controls","_model_module_version":"2.0.0","_model_name":"FloatProgressModel","_view_count":null,"_view_module":"@jupyter-widgets/controls","_view_module_version":"2.0.0","_view_name":"ProgressView","bar_style":"success","description":"","description_allow_html":false,"layout":"IPY_MODEL_9a91971dabe7444788a52179ef616f93","max":12.0,"min":0.0,"orientation":"horizontal","style":"IPY_MODEL_a95aa978cead47fcb0551ae43afb50b9","tabbable":null,"tooltip":null,"value":12.0}},"33c2b86455ba44808a22b9d03632a330":{"model_module":"@jupyter-widgets/base","model_module_version":"2.0.0","model_name":"LayoutModel","state":{"_model_module":"@jupyter-widgets/base","_model_module_version":"2.0.0","_model_name":"LayoutModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"2.0.0","_view_name":"LayoutView","align_content":null,"align_items":null,"align_self":null,"border_bottom":null,"border_left":null,"border_right":null,"border_top":null,"bottom":null,"display":null,"flex":null,"flex_flow":null,"grid_area":null,"grid_auto_columns":null,"grid_auto_flow":null,"grid_auto_rows":null,"grid_column":null,"grid_gap":null,"grid_row":null,"grid_template_areas":null,"grid_template_columns":null,"grid_template_rows":null,"height":null,"justify_content":null,"justify_items":null,"left":null,"margin":null,"max_height":null,"max_width":null,"min_height":null,"min_width":null,"object_fit":null,"object_position":null,"order":null,"overflow":null,"padding":null,"right":null,"top":null,"visibility":null,"width":null}},"359dc7bc7c5848d7a9a18b0c8cf1d4ea":{"model_module":"@jupyter-widgets/controls","model_module_version":"2.0.0","model_name":"HTMLStyleModel","state":{"_model_module":"@jupyter-widgets/controls","_model_module_version":"2.0.0","_model_name":"HTMLStyleModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"2.0.0","_view_name":"StyleView","background":null,"description_width":"","font_size":null,"text_color":null}},"36a72e52ecd349f4bfe72800bcfadde3":{"model_module":"@jupyter-widgets/controls","model_module_version":"2.0.0","model_name":"HTMLStyleModel","state":{"_model_module":"@jupyter-widgets/controls","_model_module_version":"2.0.0","_model_name":"HTMLStyleModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"2.0.0","_view_name":"StyleView","background":null,"description_width":"","font_size":null,"text_color":null}},"39dbd2c123464f0cb401529f98df18bf":{"model_module":"@jupyter-widgets/controls","model_module_version":"2.0.0","model_name":"HBoxModel","state":{"_dom_classes":[],"_model_module":"@jupyter-widgets/controls","_model_module_version":"2.0.0","_model_name":"HBoxModel","_view_count":null,"_view_module":"@jupyter-widgets/controls","_view_module_version":"2.0.0","_view_name":"HBoxView","box_style":"","children":["IPY_MODEL_68465b74d1ae41bbbe1b1f992884e96d","IPY_MODEL_200aa59628734ecf99a552d2eb27d00b","IPY_MODEL_d48b14ff00844c5789cb9aac8aec94e7"],"layout":"IPY_MODEL_8ac4ecdc08cb45e8a05e3b684cbd1e02","tabbable":null,"tooltip":null}},"3a0ed2f468394cff938c02d7a1b25e39":{"model_module":"@jupyter-widgets/base","model_module_version":"2.0.0","model_name":"LayoutModel","state":{"_model_module":"@jupyter-widgets/base","_model_module_version":"2.0.0","_model_name":"LayoutModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"2.0.0","_view_name":"LayoutView","align_content":null,"align_items":null,"align_self":null,"border_bottom":null,"border_left":null,"border_right":null,"border_top":null,"bottom":null,"display":null,"flex":null,"flex_flow":null,"grid_area":null,"grid_auto_columns":null,"grid_auto_flow":null,"grid_auto_rows":null,"grid_column":null,"grid_gap":null,"grid_row":null,"grid_template_areas":null,"grid_template_columns":null,"grid_template_rows":null,"height":null,"justify_content":null,"justify_items":null,"left":null,"margin":null,"max_height":null,"max_width":null,"min_height":null,"min_width":null,"object_fit":null,"object_position":null,"order":null,"overflow":null,"padding":null,"right":null,"top":null,"visibility":null,"width":null}},"3c9a67ffb91541ae94187c97e12ecd19":{"model_module":"@jupyter-widgets/controls","model_module_version":"2.0.0","model_name":"HBoxModel","state":{"_dom_classes":[],"_model_module":"@jupyter-widgets/controls","_model_module_version":"2.0.0","_model_name":"HBoxModel","_view_count":null,"_view_module":"@jupyter-widgets/controls","_view_module_version":"2.0.0","_view_name":"HBoxView","box_style":"","children":["IPY_MODEL_82a0114077724f3e80601f00990868e0","IPY_MODEL_ff80ee2423624ef093aeae243d79a56b","IPY_MODEL_3159c452f6174709b96c2b3db31e1c82"],"layout":"IPY_MODEL_7021681435994e4396db2b24f896fc57","tabbable":null,"tooltip":null}},"3f7263b4479a4a7b914b3448121961c5":{"model_module":"@jupyter-widgets/controls","model_module_version":"2.0.0","model_name":"HTMLStyleModel","state":{"_model_module":"@jupyter-widgets/controls","_model_module_version":"2.0.0","_model_name":"HTMLStyleModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"2.0.0","_view_name":"StyleView","background":null,"description_width":"","font_size":null,"text_color":null}},"3fb0ddeac9a449caa2ce87baa4d5a042":{"model_module":"@jupyter-widgets/controls","model_module_version":"2.0.0","model_name":"HBoxModel","state":{"_dom_classes":[],"_model_module":"@jupyter-widgets/controls","_model_module_version":"2.0.0","_model_name":"HBoxModel","_view_count":null,"_view_module":"@jupyter-widgets/controls","_view_module_version":"2.0.0","_view_name":"HBoxView","box_style":"","children":["IPY_MODEL_76a84d9a2b6e40a891b8866a85417331","IPY_MODEL_5f71b320d7644cd6881828dd7e0620ed","IPY_MODEL_b9feaef8d0f845a1888d8a99384ffc6e"],"layout":"IPY_MODEL_6fe3b241d4c541aa93188bb17e773bf3","tabbable":null,"tooltip":null}},"406b0defbb9b4062acc18bb28f31825e":{"model_module":"@jupyter-widgets/base","model_module_version":"2.0.0","model_name":"LayoutModel","state":{"_model_module":"@jupyter-widgets/base","_model_module_version":"2.0.0","_model_name":"LayoutModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"2.0.0","_view_name":"LayoutView","align_content":null,"align_items":null,"align_self":null,"border_bottom":null,"border_left":null,"border_right":null,"border_top":null,"bottom":null,"display":null,"flex":null,"flex_flow":null,"grid_area":null,"grid_auto_columns":null,"grid_auto_flow":null,"grid_auto_rows":null,"grid_column":null,"grid_gap":null,"grid_row":null,"grid_template_areas":null,"grid_template_columns":null,"grid_template_rows":null,"height":null,"justify_content":null,"justify_items":null,"left":null,"margin":null,"max_height":null,"max_width":null,"min_height":null,"min_width":null,"object_fit":null,"object_position":null,"order":null,"overflow":null,"padding":null,"right":null,"top":null,"visibility":null,"width":null}},"40bc3a5e27204ad9870f03fba63e3714":{"model_module":"@jupyter-widgets/controls","model_module_version":"2.0.0","model_name":"HTMLModel","state":{"_dom_classes":[],"_model_module":"@jupyter-widgets/controls","_model_module_version":"2.0.0","_model_name":"HTMLModel","_view_count":null,"_view_module":"@jupyter-widgets/controls","_view_module_version":"2.0.0","_view_name":"HTMLView","description":"","description_allow_html":false,"layout":"IPY_MODEL_2b684aab1e444f08ae7be3939bdb3447","placeholder":"​","style":"IPY_MODEL_acd3d255167849a08bfdca490fad8daa","tabbable":null,"tooltip":null,"value":"Generating test split: 100%"}},"40d5463e35de4f86819514a36e30b132":{"model_module":"@jupyter-widgets/controls","model_module_version":"2.0.0","model_name":"FloatProgressModel","state":{"_dom_classes":[],"_model_module":"@jupyter-widgets/controls","_model_module_version":"2.0.0","_model_name":"FloatProgressModel","_view_count":null,"_view_module":"@jupyter-widgets/controls","_view_module_version":"2.0.0","_view_name":"ProgressView","bar_style":"success","description":"","description_allow_html":false,"layout":"IPY_MODEL_e01c3c1f0e914648b51acef0b4299c42","max":141782535.0,"min":0.0,"orientation":"horizontal","style":"IPY_MODEL_7faa22819559416c96b43a2d3898b7c9","tabbable":null,"tooltip":null,"value":141782535.0}},"40fb92d4ac424e62abf67c7ebbb31c82":{"model_module":"@jupyter-widgets/base","model_module_version":"2.0.0","model_name":"LayoutModel","state":{"_model_module":"@jupyter-widgets/base","_model_module_version":"2.0.0","_model_name":"LayoutModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"2.0.0","_view_name":"LayoutView","align_content":null,"align_items":null,"align_self":null,"border_bottom":null,"border_left":null,"border_right":null,"border_top":null,"bottom":null,"display":null,"flex":null,"flex_flow":null,"grid_area":null,"grid_auto_columns":null,"grid_auto_flow":null,"grid_auto_rows":null,"grid_column":null,"grid_gap":null,"grid_row":null,"grid_template_areas":null,"grid_template_columns":null,"grid_template_rows":null,"height":null,"justify_content":null,"justify_items":null,"left":null,"margin":null,"max_height":null,"max_width":null,"min_height":null,"min_width":null,"object_fit":null,"object_position":null,"order":null,"overflow":null,"padding":null,"right":null,"top":null,"visibility":null,"width":null}},"416d0281ed99489d90cc9970cef1aeb9":{"model_module":"@jupyter-widgets/controls","model_module_version":"2.0.0","model_name":"HTMLStyleModel","state":{"_model_module":"@jupyter-widgets/controls","_model_module_version":"2.0.0","_model_name":"HTMLStyleModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"2.0.0","_view_name":"StyleView","background":null,"description_width":"","font_size":null,"text_color":null}},"41d5d669480242758b2e2fd877045a36":{"model_module":"@jupyter-widgets/controls","model_module_version":"2.0.0","model_name":"FloatProgressModel","state":{"_dom_classes":[],"_model_module":"@jupyter-widgets/controls","_model_module_version":"2.0.0","_model_name":"FloatProgressModel","_view_count":null,"_view_module":"@jupyter-widgets/controls","_view_module_version":"2.0.0","_view_name":"ProgressView","bar_style":"success","description":"","description_allow_html":false,"layout":"IPY_MODEL_a1ddee10d06d4fcb84cb1e6d0b39a6f9","max":135570525.0,"min":0.0,"orientation":"horizontal","style":"IPY_MODEL_50c329b308ec439795d38a8f1c3a0117","tabbable":null,"tooltip":null,"value":135570525.0}},"43e25fde32624e9597f979b684b46a85":{"model_module":"@jupyter-widgets/controls","model_module_version":"2.0.0","model_name":"ProgressStyleModel","state":{"_model_module":"@jupyter-widgets/controls","_model_module_version":"2.0.0","_model_name":"ProgressStyleModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"2.0.0","_view_name":"StyleView","bar_color":null,"description_width":""}},"440b65e8b7bb41e490bc5f99833a7e1c":{"model_module":"@jupyter-widgets/controls","model_module_version":"2.0.0","model_name":"HTMLModel","state":{"_dom_classes":[],"_model_module":"@jupyter-widgets/controls","_model_module_version":"2.0.0","_model_name":"HTMLModel","_view_count":null,"_view_module":"@jupyter-widgets/controls","_view_module_version":"2.0.0","_view_name":"HTMLView","description":"","description_allow_html":false,"layout":"IPY_MODEL_04830ec23b664df19733d7e98bf01c1a","placeholder":"​","style":"IPY_MODEL_0c9b52ac09b64bfda855e9b23b715de9","tabbable":null,"tooltip":null,"value":" 73.5M/73.5M [00:00&lt;00:00, 221MB/s]"}},"444f33d76542408994f47051e01c9ae5":{"model_module":"@jupyter-widgets/base","model_module_version":"2.0.0","model_name":"LayoutModel","state":{"_model_module":"@jupyter-widgets/base","_model_module_version":"2.0.0","_model_name":"LayoutModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"2.0.0","_view_name":"LayoutView","align_content":null,"align_items":null,"align_self":null,"border_bottom":null,"border_left":null,"border_right":null,"border_top":null,"bottom":null,"display":null,"flex":null,"flex_flow":null,"grid_area":null,"grid_auto_columns":null,"grid_auto_flow":null,"grid_auto_rows":null,"grid_column":null,"grid_gap":null,"grid_row":null,"grid_template_areas":null,"grid_template_columns":null,"grid_template_rows":null,"height":null,"justify_content":null,"justify_items":null,"left":null,"margin":null,"max_height":null,"max_width":null,"min_height":null,"min_width":null,"object_fit":null,"object_position":null,"order":null,"overflow":null,"padding":null,"right":null,"top":null,"visibility":null,"width":null}},"44b01020af22482f92e59a9d5dbb5714":{"model_module":"@jupyter-widgets/controls","model_module_version":"2.0.0","model_name":"HBoxModel","state":{"_dom_classes":[],"_model_module":"@jupyter-widgets/controls","_model_module_version":"2.0.0","_model_name":"HBoxModel","_view_count":null,"_view_module":"@jupyter-widgets/controls","_view_module_version":"2.0.0","_view_name":"HBoxView","box_style":"","children":["IPY_MODEL_c336074808174d149c04cb04a651911b","IPY_MODEL_c4b9de6c3751465894b2c58f67066b37","IPY_MODEL_c83ee25de3bc42f9a6d3d343097e1f80"],"layout":"IPY_MODEL_a40ea376ee494354aca8bc3ff7943747","tabbable":null,"tooltip":null}},"471ba8f6c671401fbe62852b38ebcee0":{"model_module":"@jupyter-widgets/controls","model_module_version":"2.0.0","model_name":"ProgressStyleModel","state":{"_model_module":"@jupyter-widgets/controls","_model_module_version":"2.0.0","_model_name":"ProgressStyleModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"2.0.0","_view_name":"StyleView","bar_color":null,"description_width":""}},"4794806b636c45cdaeb044edde9d16ba":{"model_module":"@jupyter-widgets/controls","model_module_version":"2.0.0","model_name":"HTMLStyleModel","state":{"_model_module":"@jupyter-widgets/controls","_model_module_version":"2.0.0","_model_name":"HTMLStyleModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"2.0.0","_view_name":"StyleView","background":null,"description_width":"","font_size":null,"text_color":null}},"47f93f2a2ad84baa9bfb8e7310c51c04":{"model_module":"@jupyter-widgets/controls","model_module_version":"2.0.0","model_name":"HTMLStyleModel","state":{"_model_module":"@jupyter-widgets/controls","_model_module_version":"2.0.0","_model_name":"HTMLStyleModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"2.0.0","_view_name":"StyleView","background":null,"description_width":"","font_size":null,"text_color":null}},"49ad385049fb45f3b9945de8698e44f1":{"model_module":"@jupyter-widgets/controls","model_module_version":"2.0.0","model_name":"HTMLStyleModel","state":{"_model_module":"@jupyter-widgets/controls","_model_module_version":"2.0.0","_model_name":"HTMLStyleModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"2.0.0","_view_name":"StyleView","background":null,"description_width":"","font_size":null,"text_color":null}},"50c329b308ec439795d38a8f1c3a0117":{"model_module":"@jupyter-widgets/controls","model_module_version":"2.0.0","model_name":"ProgressStyleModel","state":{"_model_module":"@jupyter-widgets/controls","_model_module_version":"2.0.0","_model_name":"ProgressStyleModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"2.0.0","_view_name":"StyleView","bar_color":null,"description_width":""}},"5372bcb016ab4541a2407d0c10d55bb0":{"model_module":"@jupyter-widgets/controls","model_module_version":"2.0.0","model_name":"FloatProgressModel","state":{"_dom_classes":[],"_model_module":"@jupyter-widgets/controls","_model_module_version":"2.0.0","_model_name":"FloatProgressModel","_view_count":null,"_view_module":"@jupyter-widgets/controls","_view_module_version":"2.0.0","_view_name":"ProgressView","bar_style":"success","description":"","description_allow_html":false,"layout":"IPY_MODEL_ba1a84418c8d4c20ab68d1d1268d29d5","max":6941.0,"min":0.0,"orientation":"horizontal","style":"IPY_MODEL_61efe23232324e958f008fb5173ef866","tabbable":null,"tooltip":null,"value":6941.0}},"54a839bbbeaf40c9bf3b77fc4b625cd7":{"model_module":"@jupyter-widgets/base","model_module_version":"2.0.0","model_name":"LayoutModel","state":{"_model_module":"@jupyter-widgets/base","_model_module_version":"2.0.0","_model_name":"LayoutModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"2.0.0","_view_name":"LayoutView","align_content":null,"align_items":null,"align_self":null,"border_bottom":null,"border_left":null,"border_right":null,"border_top":null,"bottom":null,"display":null,"flex":null,"flex_flow":null,"grid_area":null,"grid_auto_columns":null,"grid_auto_flow":null,"grid_auto_rows":null,"grid_column":null,"grid_gap":null,"grid_row":null,"grid_template_areas":null,"grid_template_columns":null,"grid_template_rows":null,"height":null,"justify_content":null,"justify_items":null,"left":null,"margin":null,"max_height":null,"max_width":null,"min_height":null,"min_width":null,"object_fit":null,"object_position":null,"order":null,"overflow":null,"padding":null,"right":null,"top":null,"visibility":null,"width":null}},"56ad35f5ea6841368683d1782f3fa11c":{"model_module":"@jupyter-widgets/base","model_module_version":"2.0.0","model_name":"LayoutModel","state":{"_model_module":"@jupyter-widgets/base","_model_module_version":"2.0.0","_model_name":"LayoutModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"2.0.0","_view_name":"LayoutView","align_content":null,"align_items":null,"align_self":null,"border_bottom":null,"border_left":null,"border_right":null,"border_top":null,"bottom":null,"display":null,"flex":null,"flex_flow":null,"grid_area":null,"grid_auto_columns":null,"grid_auto_flow":null,"grid_auto_rows":null,"grid_column":null,"grid_gap":null,"grid_row":null,"grid_template_areas":null,"grid_template_columns":null,"grid_template_rows":null,"height":null,"justify_content":null,"justify_items":null,"left":null,"margin":null,"max_height":null,"max_width":null,"min_height":null,"min_width":null,"object_fit":null,"object_position":null,"order":null,"overflow":null,"padding":null,"right":null,"top":null,"visibility":null,"width":null}},"56c56181a5b94205a78622ae57b9c53d":{"model_module":"@jupyter-widgets/base","model_module_version":"2.0.0","model_name":"LayoutModel","state":{"_model_module":"@jupyter-widgets/base","_model_module_version":"2.0.0","_model_name":"LayoutModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"2.0.0","_view_name":"LayoutView","align_content":null,"align_items":null,"align_self":null,"border_bottom":null,"border_left":null,"border_right":null,"border_top":null,"bottom":null,"display":null,"flex":null,"flex_flow":null,"grid_area":null,"grid_auto_columns":null,"grid_auto_flow":null,"grid_auto_rows":null,"grid_column":null,"grid_gap":null,"grid_row":null,"grid_template_areas":null,"grid_template_columns":null,"grid_template_rows":null,"height":null,"justify_content":null,"justify_items":null,"left":null,"margin":null,"max_height":null,"max_width":null,"min_height":null,"min_width":null,"object_fit":null,"object_position":null,"order":null,"overflow":null,"padding":null,"right":null,"top":null,"visibility":null,"width":null}},"57699295a04a4aafaf0fb237bca6dffa":{"model_module":"@jupyter-widgets/controls","model_module_version":"2.0.0","model_name":"HBoxModel","state":{"_dom_classes":[],"_model_module":"@jupyter-widgets/controls","_model_module_version":"2.0.0","_model_name":"HBoxModel","_view_count":null,"_view_module":"@jupyter-widgets/controls","_view_module_version":"2.0.0","_view_name":"HBoxView","box_style":"","children":["IPY_MODEL_968a9edb0f7646a487f7b8522357724d","IPY_MODEL_8550fc5d9b3e41a6a0a1da5fd25c3b04","IPY_MODEL_1adc42d308a64aa2930eed273d6782d5"],"layout":"IPY_MODEL_b69b083bffb84907aa0b529d13e30939","tabbable":null,"tooltip":null}},"57921d03be1d4c83af883d1063e870f1":{"model_module":"@jupyter-widgets/base","model_module_version":"2.0.0","model_name":"LayoutModel","state":{"_model_module":"@jupyter-widgets/base","_model_module_version":"2.0.0","_model_name":"LayoutModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"2.0.0","_view_name":"LayoutView","align_content":null,"align_items":null,"align_self":null,"border_bottom":null,"border_left":null,"border_right":null,"border_top":null,"bottom":null,"display":null,"flex":null,"flex_flow":null,"grid_area":null,"grid_auto_columns":null,"grid_auto_flow":null,"grid_auto_rows":null,"grid_column":null,"grid_gap":null,"grid_row":null,"grid_template_areas":null,"grid_template_columns":null,"grid_template_rows":null,"height":null,"justify_content":null,"justify_items":null,"left":null,"margin":null,"max_height":null,"max_width":null,"min_height":null,"min_width":null,"object_fit":null,"object_position":null,"order":null,"overflow":null,"padding":null,"right":null,"top":null,"visibility":null,"width":null}},"5d3955dfcbb04bd5a093b85a943061cf":{"model_module":"@jupyter-widgets/controls","model_module_version":"2.0.0","model_name":"HTMLModel","state":{"_dom_classes":[],"_model_module":"@jupyter-widgets/controls","_model_module_version":"2.0.0","_model_name":"HTMLModel","_view_count":null,"_view_module":"@jupyter-widgets/controls","_view_module_version":"2.0.0","_view_name":"HTMLView","description":"","description_allow_html":false,"layout":"IPY_MODEL_fa8640970ca64e6ea0848c63309b4f84","placeholder":"​","style":"IPY_MODEL_c4f107c68ce64b86b08f6d1c33838aa2","tabbable":null,"tooltip":null,"value":" 136M/136M [00:00&lt;00:00, 236MB/s]"}},"5da0af0f3b0b49889fe40e7651937c2a":{"model_module":"@jupyter-widgets/controls","model_module_version":"2.0.0","model_name":"FloatProgressModel","state":{"_dom_classes":[],"_model_module":"@jupyter-widgets/controls","_model_module_version":"2.0.0","_model_name":"FloatProgressModel","_view_count":null,"_view_module":"@jupyter-widgets/controls","_view_module_version":"2.0.0","_view_name":"ProgressView","bar_style":"success","description":"","description_allow_html":false,"layout":"IPY_MODEL_0c4c1343cf344e0b89300bb16c052974","max":73451480.0,"min":0.0,"orientation":"horizontal","style":"IPY_MODEL_96844573eeb8431bbc207b842517b4be","tabbable":null,"tooltip":null,"value":73451480.0}},"5f71b320d7644cd6881828dd7e0620ed":{"model_module":"@jupyter-widgets/controls","model_module_version":"2.0.0","model_name":"FloatProgressModel","state":{"_dom_classes":[],"_model_module":"@jupyter-widgets/controls","_model_module_version":"2.0.0","_model_name":"FloatProgressModel","_view_count":null,"_view_module":"@jupyter-widgets/controls","_view_module_version":"2.0.0","_view_name":"ProgressView","bar_style":"success","description":"","description_allow_html":false,"layout":"IPY_MODEL_a7b8204631cf48eb94253b2def9612eb","max":73274624.0,"min":0.0,"orientation":"horizontal","style":"IPY_MODEL_43e25fde32624e9597f979b684b46a85","tabbable":null,"tooltip":null,"value":73274624.0}},"61efe23232324e958f008fb5173ef866":{"model_module":"@jupyter-widgets/controls","model_module_version":"2.0.0","model_name":"ProgressStyleModel","state":{"_model_module":"@jupyter-widgets/controls","_model_module_version":"2.0.0","_model_name":"ProgressStyleModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"2.0.0","_view_name":"StyleView","bar_color":null,"description_width":""}},"62877ff1abd04486adeac1bc60eac582":{"model_module":"@jupyter-widgets/base","model_module_version":"2.0.0","model_name":"LayoutModel","state":{"_model_module":"@jupyter-widgets/base","_model_module_version":"2.0.0","_model_name":"LayoutModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"2.0.0","_view_name":"LayoutView","align_content":null,"align_items":null,"align_self":null,"border_bottom":null,"border_left":null,"border_right":null,"border_top":null,"bottom":null,"display":null,"flex":null,"flex_flow":null,"grid_area":null,"grid_auto_columns":null,"grid_auto_flow":null,"grid_auto_rows":null,"grid_column":null,"grid_gap":null,"grid_row":null,"grid_template_areas":null,"grid_template_columns":null,"grid_template_rows":null,"height":null,"justify_content":null,"justify_items":null,"left":null,"margin":null,"max_height":null,"max_width":null,"min_height":null,"min_width":null,"object_fit":null,"object_position":null,"order":null,"overflow":null,"padding":null,"right":null,"top":null,"visibility":null,"width":null}},"6365fb3ee1cb4b5c85bc09a55f6ec674":{"model_module":"@jupyter-widgets/base","model_module_version":"2.0.0","model_name":"LayoutModel","state":{"_model_module":"@jupyter-widgets/base","_model_module_version":"2.0.0","_model_name":"LayoutModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"2.0.0","_view_name":"LayoutView","align_content":null,"align_items":null,"align_self":null,"border_bottom":null,"border_left":null,"border_right":null,"border_top":null,"bottom":null,"display":null,"flex":null,"flex_flow":null,"grid_area":null,"grid_auto_columns":null,"grid_auto_flow":null,"grid_auto_rows":null,"grid_column":null,"grid_gap":null,"grid_row":null,"grid_template_areas":null,"grid_template_columns":null,"grid_template_rows":null,"height":null,"justify_content":null,"justify_items":null,"left":null,"margin":null,"max_height":null,"max_width":null,"min_height":null,"min_width":null,"object_fit":null,"object_position":null,"order":null,"overflow":null,"padding":null,"right":null,"top":null,"visibility":null,"width":null}},"6506be2b823d499f86eb1bae711ddeca":{"model_module":"@jupyter-widgets/base","model_module_version":"2.0.0","model_name":"LayoutModel","state":{"_model_module":"@jupyter-widgets/base","_model_module_version":"2.0.0","_model_name":"LayoutModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"2.0.0","_view_name":"LayoutView","align_content":null,"align_items":null,"align_self":null,"border_bottom":null,"border_left":null,"border_right":null,"border_top":null,"bottom":null,"display":null,"flex":null,"flex_flow":null,"grid_area":null,"grid_auto_columns":null,"grid_auto_flow":null,"grid_auto_rows":null,"grid_column":null,"grid_gap":null,"grid_row":null,"grid_template_areas":null,"grid_template_columns":null,"grid_template_rows":null,"height":null,"justify_content":null,"justify_items":null,"left":null,"margin":null,"max_height":null,"max_width":null,"min_height":null,"min_width":null,"object_fit":null,"object_position":null,"order":null,"overflow":null,"padding":null,"right":null,"top":null,"visibility":null,"width":null}},"68465b74d1ae41bbbe1b1f992884e96d":{"model_module":"@jupyter-widgets/controls","model_module_version":"2.0.0","model_name":"HTMLModel","state":{"_dom_classes":[],"_model_module":"@jupyter-widgets/controls","_model_module_version":"2.0.0","_model_name":"HTMLModel","_view_count":null,"_view_module":"@jupyter-widgets/controls","_view_module_version":"2.0.0","_view_name":"HTMLView","description":"","description_allow_html":false,"layout":"IPY_MODEL_b18d50308344455ca36c4648dc3b82bf","placeholder":"​","style":"IPY_MODEL_359dc7bc7c5848d7a9a18b0c8cf1d4ea","tabbable":null,"tooltip":null,"value":"Generating train split: 100%"}},"684ed6431afd4d98af55d1a2013f13db":{"model_module":"@jupyter-widgets/controls","model_module_version":"2.0.0","model_name":"HTMLModel","state":{"_dom_classes":[],"_model_module":"@jupyter-widgets/controls","_model_module_version":"2.0.0","_model_name":"HTMLModel","_view_count":null,"_view_module":"@jupyter-widgets/controls","_view_module_version":"2.0.0","_view_name":"HTMLView","description":"","description_allow_html":false,"layout":"IPY_MODEL_f4c74bc398ae4b20a13ac34a0f117605","placeholder":"​","style":"IPY_MODEL_b9fefb5d8e5b46249964076a3f19ec46","tabbable":null,"tooltip":null,"value":"train-00002-of-00006.parquet: 100%"}},"68ce883a6aeb4adcad33b0116248f84f":{"model_module":"@jupyter-widgets/controls","model_module_version":"2.0.0","model_name":"HTMLModel","state":{"_dom_classes":[],"_model_module":"@jupyter-widgets/controls","_model_module_version":"2.0.0","_model_name":"HTMLModel","_view_count":null,"_view_module":"@jupyter-widgets/controls","_view_module_version":"2.0.0","_view_name":"HTMLView","description":"","description_allow_html":false,"layout":"IPY_MODEL_e1b599af21de4eeba14037a69f9ffe16","placeholder":"​","style":"IPY_MODEL_8eed068b70074ce4b961370c8b40d17f","tabbable":null,"tooltip":null,"value":" 415416/415416 [00:04&lt;00:00, 79557.73 examples/s]"}},"68e73b9d57b34878956a78841c4f8719":{"model_module":"@jupyter-widgets/controls","model_module_version":"2.0.0","model_name":"FloatProgressModel","state":{"_dom_classes":[],"_model_module":"@jupyter-widgets/controls","_model_module_version":"2.0.0","_model_name":"FloatProgressModel","_view_count":null,"_view_module":"@jupyter-widgets/controls","_view_module_version":"2.0.0","_view_name":"ProgressView","bar_style":"success","description":"","description_allow_html":false,"layout":"IPY_MODEL_7afbedf45c434461a3f3756569cc7f74","max":79253146.0,"min":0.0,"orientation":"horizontal","style":"IPY_MODEL_471ba8f6c671401fbe62852b38ebcee0","tabbable":null,"tooltip":null,"value":79253146.0}},"696884d848564d1b9653e29a9808eb3d":{"model_module":"@jupyter-widgets/base","model_module_version":"2.0.0","model_name":"LayoutModel","state":{"_model_module":"@jupyter-widgets/base","_model_module_version":"2.0.0","_model_name":"LayoutModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"2.0.0","_view_name":"LayoutView","align_content":null,"align_items":null,"align_self":null,"border_bottom":null,"border_left":null,"border_right":null,"border_top":null,"bottom":null,"display":null,"flex":null,"flex_flow":null,"grid_area":null,"grid_auto_columns":null,"grid_auto_flow":null,"grid_auto_rows":null,"grid_column":null,"grid_gap":null,"grid_row":null,"grid_template_areas":null,"grid_template_columns":null,"grid_template_rows":null,"height":null,"justify_content":null,"justify_items":null,"left":null,"margin":null,"max_height":null,"max_width":null,"min_height":null,"min_width":null,"object_fit":null,"object_position":null,"order":null,"overflow":null,"padding":null,"right":null,"top":null,"visibility":null,"width":null}},"6b6dae27716c457bb4711ed91f625524":{"model_module":"@jupyter-widgets/controls","model_module_version":"2.0.0","model_name":"HTMLModel","state":{"_dom_classes":[],"_model_module":"@jupyter-widgets/controls","_model_module_version":"2.0.0","_model_name":"HTMLModel","_view_count":null,"_view_module":"@jupyter-widgets/controls","_view_module_version":"2.0.0","_view_name":"HTMLView","description":"","description_allow_html":false,"layout":"IPY_MODEL_9b618510a81542409b8f703c0808f2ee","placeholder":"​","style":"IPY_MODEL_d959e43bea2f4addbde3cb8d03f2cdaf","tabbable":null,"tooltip":null,"value":" 12/12 [00:00&lt;00:00, 957.08it/s]"}},"6d3d5cd8f35945e89d983a2473323504":{"model_module":"@jupyter-widgets/controls","model_module_version":"2.0.0","model_name":"HTMLModel","state":{"_dom_classes":[],"_model_module":"@jupyter-widgets/controls","_model_module_version":"2.0.0","_model_name":"HTMLModel","_view_count":null,"_view_module":"@jupyter-widgets/controls","_view_module_version":"2.0.0","_view_name":"HTMLView","description":"","description_allow_html":false,"layout":"IPY_MODEL_84026467cc8c4be7877a414a66eef9b9","placeholder":"​","style":"IPY_MODEL_1795bebd38694010bc2bf91ae26c00c4","tabbable":null,"tooltip":null,"value":"Computing checksums: 100%"}},"6e8f9e17d77942469dd813be9c55d8a4":{"model_module":"@jupyter-widgets/controls","model_module_version":"2.0.0","model_name":"HTMLModel","state":{"_dom_classes":[],"_model_module":"@jupyter-widgets/controls","_model_module_version":"2.0.0","_model_name":"HTMLModel","_view_count":null,"_view_module":"@jupyter-widgets/controls","_view_module_version":"2.0.0","_view_name":"HTMLView","description":"","description_allow_html":false,"layout":"IPY_MODEL_92974fce44904f429b2e4dae6b0c6e6f","placeholder":"​","style":"IPY_MODEL_fdcee49c5d3848f5bda151630ec63dcf","tabbable":null,"tooltip":null,"value":" 136M/136M [00:00&lt;00:00, 242MB/s]"}},"6fe3b241d4c541aa93188bb17e773bf3":{"model_module":"@jupyter-widgets/base","model_module_version":"2.0.0","model_name":"LayoutModel","state":{"_model_module":"@jupyter-widgets/base","_model_module_version":"2.0.0","_model_name":"LayoutModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"2.0.0","_view_name":"LayoutView","align_content":null,"align_items":null,"align_self":null,"border_bottom":null,"border_left":null,"border_right":null,"border_top":null,"bottom":null,"display":null,"flex":null,"flex_flow":null,"grid_area":null,"grid_auto_columns":null,"grid_auto_flow":null,"grid_auto_rows":null,"grid_column":null,"grid_gap":null,"grid_row":null,"grid_template_areas":null,"grid_template_columns":null,"grid_template_rows":null,"height":null,"justify_content":null,"justify_items":null,"left":null,"margin":null,"max_height":null,"max_width":null,"min_height":null,"min_width":null,"object_fit":null,"object_position":null,"order":null,"overflow":null,"padding":null,"right":null,"top":null,"visibility":null,"width":null}},"7021681435994e4396db2b24f896fc57":{"model_module":"@jupyter-widgets/base","model_module_version":"2.0.0","model_name":"LayoutModel","state":{"_model_module":"@jupyter-widgets/base","_model_module_version":"2.0.0","_model_name":"LayoutModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"2.0.0","_view_name":"LayoutView","align_content":null,"align_items":null,"align_self":null,"border_bottom":null,"border_left":null,"border_right":null,"border_top":null,"bottom":null,"display":null,"flex":null,"flex_flow":null,"grid_area":null,"grid_auto_columns":null,"grid_auto_flow":null,"grid_auto_rows":null,"grid_column":null,"grid_gap":null,"grid_row":null,"grid_template_areas":null,"grid_template_columns":null,"grid_template_rows":null,"height":null,"justify_content":null,"justify_items":null,"left":null,"margin":null,"max_height":null,"max_width":null,"min_height":null,"min_width":null,"object_fit":null,"object_position":null,"order":null,"overflow":null,"padding":null,"right":null,"top":null,"visibility":null,"width":null}},"705aa56c448445c487ffe4cf7d012eb3":{"model_module":"@jupyter-widgets/base","model_module_version":"2.0.0","model_name":"LayoutModel","state":{"_model_module":"@jupyter-widgets/base","_model_module_version":"2.0.0","_model_name":"LayoutModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"2.0.0","_view_name":"LayoutView","align_content":null,"align_items":null,"align_self":null,"border_bottom":null,"border_left":null,"border_right":null,"border_top":null,"bottom":null,"display":null,"flex":null,"flex_flow":null,"grid_area":null,"grid_auto_columns":null,"grid_auto_flow":null,"grid_auto_rows":null,"grid_column":null,"grid_gap":null,"grid_row":null,"grid_template_areas":null,"grid_template_columns":null,"grid_template_rows":null,"height":null,"justify_content":null,"justify_items":null,"left":null,"margin":null,"max_height":null,"max_width":null,"min_height":null,"min_width":null,"object_fit":null,"object_position":null,"order":null,"overflow":null,"padding":null,"right":null,"top":null,"visibility":null,"width":null}},"7357cbc5b6db4115b921de0f517a3309":{"model_module":"@jupyter-widgets/controls","model_module_version":"2.0.0","model_name":"HTMLModel","state":{"_dom_classes":[],"_model_module":"@jupyter-widgets/controls","_model_module_version":"2.0.0","_model_name":"HTMLModel","_view_count":null,"_view_module":"@jupyter-widgets/controls","_view_module_version":"2.0.0","_view_name":"HTMLView","description":"","description_allow_html":false,"layout":"IPY_MODEL_b6cae9fd27ad4e748372dd1699cbb2f2","placeholder":"​","style":"IPY_MODEL_a11dda3461e94a798ca7b694ed2b72fb","tabbable":null,"tooltip":null,"value":" 415416/415416 [00:01&lt;00:00, 241038.32 examples/s]"}},"740c3830083640858b804a586f5abdbd":{"model_module":"@jupyter-widgets/base","model_module_version":"2.0.0","model_name":"LayoutModel","state":{"_model_module":"@jupyter-widgets/base","_model_module_version":"2.0.0","_model_name":"LayoutModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"2.0.0","_view_name":"LayoutView","align_content":null,"align_items":null,"align_self":null,"border_bottom":null,"border_left":null,"border_right":null,"border_top":null,"bottom":null,"display":null,"flex":null,"flex_flow":null,"grid_area":null,"grid_auto_columns":null,"grid_auto_flow":null,"grid_auto_rows":null,"grid_column":null,"grid_gap":null,"grid_row":null,"grid_template_areas":null,"grid_template_columns":null,"grid_template_rows":null,"height":null,"justify_content":null,"justify_items":null,"left":null,"margin":null,"max_height":null,"max_width":null,"min_height":null,"min_width":null,"object_fit":null,"object_position":null,"order":null,"overflow":null,"padding":null,"right":null,"top":null,"visibility":null,"width":null}},"742e600c0d564b53baa59838466e1283":{"model_module":"@jupyter-widgets/base","model_module_version":"2.0.0","model_name":"LayoutModel","state":{"_model_module":"@jupyter-widgets/base","_model_module_version":"2.0.0","_model_name":"LayoutModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"2.0.0","_view_name":"LayoutView","align_content":null,"align_items":null,"align_self":null,"border_bottom":null,"border_left":null,"border_right":null,"border_top":null,"bottom":null,"display":null,"flex":null,"flex_flow":null,"grid_area":null,"grid_auto_columns":null,"grid_auto_flow":null,"grid_auto_rows":null,"grid_column":null,"grid_gap":null,"grid_row":null,"grid_template_areas":null,"grid_template_columns":null,"grid_template_rows":null,"height":null,"justify_content":null,"justify_items":null,"left":null,"margin":null,"max_height":null,"max_width":null,"min_height":null,"min_width":null,"object_fit":null,"object_position":null,"order":null,"overflow":null,"padding":null,"right":null,"top":null,"visibility":null,"width":null}},"76a84d9a2b6e40a891b8866a85417331":{"model_module":"@jupyter-widgets/controls","model_module_version":"2.0.0","model_name":"HTMLModel","state":{"_dom_classes":[],"_model_module":"@jupyter-widgets/controls","_model_module_version":"2.0.0","_model_name":"HTMLModel","_view_count":null,"_view_module":"@jupyter-widgets/controls","_view_module_version":"2.0.0","_view_name":"HTMLView","description":"","description_allow_html":false,"layout":"IPY_MODEL_406b0defbb9b4062acc18bb28f31825e","placeholder":"​","style":"IPY_MODEL_d02b3a05a61941e7888837cb31d24744","tabbable":null,"tooltip":null,"value":"test-00000-of-00003.parquet: 100%"}},"7afbedf45c434461a3f3756569cc7f74":{"model_module":"@jupyter-widgets/base","model_module_version":"2.0.0","model_name":"LayoutModel","state":{"_model_module":"@jupyter-widgets/base","_model_module_version":"2.0.0","_model_name":"LayoutModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"2.0.0","_view_name":"LayoutView","align_content":null,"align_items":null,"align_self":null,"border_bottom":null,"border_left":null,"border_right":null,"border_top":null,"bottom":null,"display":null,"flex":null,"flex_flow":null,"grid_area":null,"grid_auto_columns":null,"grid_auto_flow":null,"grid_auto_rows":null,"grid_column":null,"grid_gap":null,"grid_row":null,"grid_template_areas":null,"grid_template_columns":null,"grid_template_rows":null,"height":null,"justify_content":null,"justify_items":null,"left":null,"margin":null,"max_height":null,"max_width":null,"min_height":null,"min_width":null,"object_fit":null,"object_position":null,"order":null,"overflow":null,"padding":null,"right":null,"top":null,"visibility":null,"width":null}},"7b0142da01c5424ba0340d9de990e78e":{"model_module":"@jupyter-widgets/controls","model_module_version":"2.0.0","model_name":"HTMLStyleModel","state":{"_model_module":"@jupyter-widgets/controls","_model_module_version":"2.0.0","_model_name":"HTMLStyleModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"2.0.0","_view_name":"StyleView","background":null,"description_width":"","font_size":null,"text_color":null}},"7b48df58b2f74459a50650444a69298f":{"model_module":"@jupyter-widgets/base","model_module_version":"2.0.0","model_name":"LayoutModel","state":{"_model_module":"@jupyter-widgets/base","_model_module_version":"2.0.0","_model_name":"LayoutModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"2.0.0","_view_name":"LayoutView","align_content":null,"align_items":null,"align_self":null,"border_bottom":null,"border_left":null,"border_right":null,"border_top":null,"bottom":null,"display":null,"flex":null,"flex_flow":null,"grid_area":null,"grid_auto_columns":null,"grid_auto_flow":null,"grid_auto_rows":null,"grid_column":null,"grid_gap":null,"grid_row":null,"grid_template_areas":null,"grid_template_columns":null,"grid_template_rows":null,"height":null,"justify_content":null,"justify_items":null,"left":null,"margin":null,"max_height":null,"max_width":null,"min_height":null,"min_width":null,"object_fit":null,"object_position":null,"order":null,"overflow":null,"padding":null,"right":null,"top":null,"visibility":null,"width":null}},"7be584d96ee244b6b58393de1099b865":{"model_module":"@jupyter-widgets/controls","model_module_version":"2.0.0","model_name":"HTMLModel","state":{"_dom_classes":[],"_model_module":"@jupyter-widgets/controls","_model_module_version":"2.0.0","_model_name":"HTMLModel","_view_count":null,"_view_module":"@jupyter-widgets/controls","_view_module_version":"2.0.0","_view_name":"HTMLView","description":"","description_allow_html":false,"layout":"IPY_MODEL_56ad35f5ea6841368683d1782f3fa11c","placeholder":"​","style":"IPY_MODEL_f80940c15a114ef9b6b7ca6b88591930","tabbable":null,"tooltip":null,"value":"test-00001-of-00003.parquet: 100%"}},"7d3fbc0f084b41509dcbaf3a05ad8e3f":{"model_module":"@jupyter-widgets/controls","model_module_version":"2.0.0","model_name":"ProgressStyleModel","state":{"_model_module":"@jupyter-widgets/controls","_model_module_version":"2.0.0","_model_name":"ProgressStyleModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"2.0.0","_view_name":"StyleView","bar_color":null,"description_width":""}},"7faa22819559416c96b43a2d3898b7c9":{"model_module":"@jupyter-widgets/controls","model_module_version":"2.0.0","model_name":"ProgressStyleModel","state":{"_model_module":"@jupyter-widgets/controls","_model_module_version":"2.0.0","_model_name":"ProgressStyleModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"2.0.0","_view_name":"StyleView","bar_color":null,"description_width":""}},"7ff6c5f5eb8448368f84ed817efa1742":{"model_module":"@jupyter-widgets/controls","model_module_version":"2.0.0","model_name":"ProgressStyleModel","state":{"_model_module":"@jupyter-widgets/controls","_model_module_version":"2.0.0","_model_name":"ProgressStyleModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"2.0.0","_view_name":"StyleView","bar_color":null,"description_width":""}},"8287e881c82c4f6c847dd18ab5f76486":{"model_module":"@jupyter-widgets/controls","model_module_version":"2.0.0","model_name":"HTMLModel","state":{"_dom_classes":[],"_model_module":"@jupyter-widgets/controls","_model_module_version":"2.0.0","_model_name":"HTMLModel","_view_count":null,"_view_module":"@jupyter-widgets/controls","_view_module_version":"2.0.0","_view_name":"HTMLView","description":"","description_allow_html":false,"layout":"IPY_MODEL_9dcbcf873675470bacd595b8ea10b116","placeholder":"​","style":"IPY_MODEL_f9a6ad832e5a43deb549c876559b0d39","tabbable":null,"tooltip":null,"value":"README.md: 100%"}},"82a0114077724f3e80601f00990868e0":{"model_module":"@jupyter-widgets/controls","model_module_version":"2.0.0","model_name":"HTMLModel","state":{"_dom_classes":[],"_model_module":"@jupyter-widgets/controls","_model_module_version":"2.0.0","_model_name":"HTMLModel","_view_count":null,"_view_module":"@jupyter-widgets/controls","_view_module_version":"2.0.0","_view_name":"HTMLView","description":"","description_allow_html":false,"layout":"IPY_MODEL_a268d4be5a704379a537fd53e593445b","placeholder":"​","style":"IPY_MODEL_f7d9f811c8dd4434a10453d4ff6a7710","tabbable":null,"tooltip":null,"value":"validation-00002-of-00003.parquet: 100%"}},"84026467cc8c4be7877a414a66eef9b9":{"model_module":"@jupyter-widgets/base","model_module_version":"2.0.0","model_name":"LayoutModel","state":{"_model_module":"@jupyter-widgets/base","_model_module_version":"2.0.0","_model_name":"LayoutModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"2.0.0","_view_name":"LayoutView","align_content":null,"align_items":null,"align_self":null,"border_bottom":null,"border_left":null,"border_right":null,"border_top":null,"bottom":null,"display":null,"flex":null,"flex_flow":null,"grid_area":null,"grid_auto_columns":null,"grid_auto_flow":null,"grid_auto_rows":null,"grid_column":null,"grid_gap":null,"grid_row":null,"grid_template_areas":null,"grid_template_columns":null,"grid_template_rows":null,"height":null,"justify_content":null,"justify_items":null,"left":null,"margin":null,"max_height":null,"max_width":null,"min_height":null,"min_width":null,"object_fit":null,"object_position":null,"order":null,"overflow":null,"padding":null,"right":null,"top":null,"visibility":null,"width":null}},"8550fc5d9b3e41a6a0a1da5fd25c3b04":{"model_module":"@jupyter-widgets/controls","model_module_version":"2.0.0","model_name":"FloatProgressModel","state":{"_dom_classes":[],"_model_module":"@jupyter-widgets/controls","_model_module_version":"2.0.0","_model_name":"FloatProgressModel","_view_count":null,"_view_module":"@jupyter-widgets/controls","_view_module_version":"2.0.0","_view_name":"ProgressView","bar_style":"success","description":"","description_allow_html":false,"layout":"IPY_MODEL_8715cc851a25415e8cd3d3cf7ce6beef","max":135937619.0,"min":0.0,"orientation":"horizontal","style":"IPY_MODEL_0056c28536024407946a7c761ec1cab8","tabbable":null,"tooltip":null,"value":135937619.0}},"8715cc851a25415e8cd3d3cf7ce6beef":{"model_module":"@jupyter-widgets/base","model_module_version":"2.0.0","model_name":"LayoutModel","state":{"_model_module":"@jupyter-widgets/base","_model_module_version":"2.0.0","_model_name":"LayoutModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"2.0.0","_view_name":"LayoutView","align_content":null,"align_items":null,"align_self":null,"border_bottom":null,"border_left":null,"border_right":null,"border_top":null,"bottom":null,"display":null,"flex":null,"flex_flow":null,"grid_area":null,"grid_auto_columns":null,"grid_auto_flow":null,"grid_auto_rows":null,"grid_column":null,"grid_gap":null,"grid_row":null,"grid_template_areas":null,"grid_template_columns":null,"grid_template_rows":null,"height":null,"justify_content":null,"justify_items":null,"left":null,"margin":null,"max_height":null,"max_width":null,"min_height":null,"min_width":null,"object_fit":null,"object_position":null,"order":null,"overflow":null,"padding":null,"right":null,"top":null,"visibility":null,"width":null}},"88aca31ac6f64c83a5332d4ed6769dcf":{"model_module":"@jupyter-widgets/controls","model_module_version":"2.0.0","model_name":"FloatProgressModel","state":{"_dom_classes":[],"_model_module":"@jupyter-widgets/controls","_model_module_version":"2.0.0","_model_name":"FloatProgressModel","_view_count":null,"_view_module":"@jupyter-widgets/controls","_view_module_version":"2.0.0","_view_name":"ProgressView","bar_style":"success","description":"","description_allow_html":false,"layout":"IPY_MODEL_cc05a08118b54fe884137c4cd29e763f","max":135781192.0,"min":0.0,"orientation":"horizontal","style":"IPY_MODEL_7d3fbc0f084b41509dcbaf3a05ad8e3f","tabbable":null,"tooltip":null,"value":135781192.0}},"8912688de00441eeb9536ef3cc07d77a":{"model_module":"@jupyter-widgets/base","model_module_version":"2.0.0","model_name":"LayoutModel","state":{"_model_module":"@jupyter-widgets/base","_model_module_version":"2.0.0","_model_name":"LayoutModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"2.0.0","_view_name":"LayoutView","align_content":null,"align_items":null,"align_self":null,"border_bottom":null,"border_left":null,"border_right":null,"border_top":null,"bottom":null,"display":null,"flex":null,"flex_flow":null,"grid_area":null,"grid_auto_columns":null,"grid_auto_flow":null,"grid_auto_rows":null,"grid_column":null,"grid_gap":null,"grid_row":null,"grid_template_areas":null,"grid_template_columns":null,"grid_template_rows":null,"height":null,"justify_content":null,"justify_items":null,"left":null,"margin":null,"max_height":null,"max_width":null,"min_height":null,"min_width":null,"object_fit":null,"object_position":null,"order":null,"overflow":null,"padding":null,"right":null,"top":null,"visibility":null,"width":null}},"896d8ae550dc4faca78a43fa4644acf2":{"model_module":"@jupyter-widgets/base","model_module_version":"2.0.0","model_name":"LayoutModel","state":{"_model_module":"@jupyter-widgets/base","_model_module_version":"2.0.0","_model_name":"LayoutModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"2.0.0","_view_name":"LayoutView","align_content":null,"align_items":null,"align_self":null,"border_bottom":null,"border_left":null,"border_right":null,"border_top":null,"bottom":null,"display":null,"flex":null,"flex_flow":null,"grid_area":null,"grid_auto_columns":null,"grid_auto_flow":null,"grid_auto_rows":null,"grid_column":null,"grid_gap":null,"grid_row":null,"grid_template_areas":null,"grid_template_columns":null,"grid_template_rows":null,"height":null,"justify_content":null,"justify_items":null,"left":null,"margin":null,"max_height":null,"max_width":null,"min_height":null,"min_width":null,"object_fit":null,"object_position":null,"order":null,"overflow":null,"padding":null,"right":null,"top":null,"visibility":null,"width":null}},"897f38ebdde247479535382bbdc8b11a":{"model_module":"@jupyter-widgets/controls","model_module_version":"2.0.0","model_name":"HTMLStyleModel","state":{"_model_module":"@jupyter-widgets/controls","_model_module_version":"2.0.0","_model_name":"HTMLStyleModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"2.0.0","_view_name":"StyleView","background":null,"description_width":"","font_size":null,"text_color":null}},"898ee620cfe0402899d2e03cf2c6a845":{"model_module":"@jupyter-widgets/controls","model_module_version":"2.0.0","model_name":"ProgressStyleModel","state":{"_model_module":"@jupyter-widgets/controls","_model_module_version":"2.0.0","_model_name":"ProgressStyleModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"2.0.0","_view_name":"StyleView","bar_color":null,"description_width":""}},"8ac4ecdc08cb45e8a05e3b684cbd1e02":{"model_module":"@jupyter-widgets/base","model_module_version":"2.0.0","model_name":"LayoutModel","state":{"_model_module":"@jupyter-widgets/base","_model_module_version":"2.0.0","_model_name":"LayoutModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"2.0.0","_view_name":"LayoutView","align_content":null,"align_items":null,"align_self":null,"border_bottom":null,"border_left":null,"border_right":null,"border_top":null,"bottom":null,"display":null,"flex":null,"flex_flow":null,"grid_area":null,"grid_auto_columns":null,"grid_auto_flow":null,"grid_auto_rows":null,"grid_column":null,"grid_gap":null,"grid_row":null,"grid_template_areas":null,"grid_template_columns":null,"grid_template_rows":null,"height":null,"justify_content":null,"justify_items":null,"left":null,"margin":null,"max_height":null,"max_width":null,"min_height":null,"min_width":null,"object_fit":null,"object_position":null,"order":null,"overflow":null,"padding":null,"right":null,"top":null,"visibility":null,"width":null}},"8b56f047a637458d96a8298e73cca158":{"model_module":"@jupyter-widgets/base","model_module_version":"2.0.0","model_name":"LayoutModel","state":{"_model_module":"@jupyter-widgets/base","_model_module_version":"2.0.0","_model_name":"LayoutModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"2.0.0","_view_name":"LayoutView","align_content":null,"align_items":null,"align_self":null,"border_bottom":null,"border_left":null,"border_right":null,"border_top":null,"bottom":null,"display":null,"flex":null,"flex_flow":null,"grid_area":null,"grid_auto_columns":null,"grid_auto_flow":null,"grid_auto_rows":null,"grid_column":null,"grid_gap":null,"grid_row":null,"grid_template_areas":null,"grid_template_columns":null,"grid_template_rows":null,"height":null,"justify_content":null,"justify_items":null,"left":null,"margin":null,"max_height":null,"max_width":null,"min_height":null,"min_width":null,"object_fit":null,"object_position":null,"order":null,"overflow":null,"padding":null,"right":null,"top":null,"visibility":null,"width":null}},"8d736d46761e4ce9aee0e9e20c54bed5":{"model_module":"@jupyter-widgets/controls","model_module_version":"2.0.0","model_name":"HBoxModel","state":{"_dom_classes":[],"_model_module":"@jupyter-widgets/controls","_model_module_version":"2.0.0","_model_name":"HBoxModel","_view_count":null,"_view_module":"@jupyter-widgets/controls","_view_module_version":"2.0.0","_view_name":"HBoxView","box_style":"","children":["IPY_MODEL_7be584d96ee244b6b58393de1099b865","IPY_MODEL_29c347c13fc947a794dfce1e3fcf4802","IPY_MODEL_440b65e8b7bb41e490bc5f99833a7e1c"],"layout":"IPY_MODEL_3a0ed2f468394cff938c02d7a1b25e39","tabbable":null,"tooltip":null}},"8d7a7d8693034e47a4ca5da6ac9fb69f":{"model_module":"@jupyter-widgets/base","model_module_version":"2.0.0","model_name":"LayoutModel","state":{"_model_module":"@jupyter-widgets/base","_model_module_version":"2.0.0","_model_name":"LayoutModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"2.0.0","_view_name":"LayoutView","align_content":null,"align_items":null,"align_self":null,"border_bottom":null,"border_left":null,"border_right":null,"border_top":null,"bottom":null,"display":null,"flex":null,"flex_flow":null,"grid_area":null,"grid_auto_columns":null,"grid_auto_flow":null,"grid_auto_rows":null,"grid_column":null,"grid_gap":null,"grid_row":null,"grid_template_areas":null,"grid_template_columns":null,"grid_template_rows":null,"height":null,"justify_content":null,"justify_items":null,"left":null,"margin":null,"max_height":null,"max_width":null,"min_height":null,"min_width":null,"object_fit":null,"object_position":null,"order":null,"overflow":null,"padding":null,"right":null,"top":null,"visibility":null,"width":null}},"8e52d1b71a044ff58c4979d5de9728a6":{"model_module":"@jupyter-widgets/controls","model_module_version":"2.0.0","model_name":"FloatProgressModel","state":{"_dom_classes":[],"_model_module":"@jupyter-widgets/controls","_model_module_version":"2.0.0","_model_name":"FloatProgressModel","_view_count":null,"_view_module":"@jupyter-widgets/controls","_view_module_version":"2.0.0","_view_name":"ProgressView","bar_style":"success","description":"","description_allow_html":false,"layout":"IPY_MODEL_33c2b86455ba44808a22b9d03632a330","max":136258214.0,"min":0.0,"orientation":"horizontal","style":"IPY_MODEL_7ff6c5f5eb8448368f84ed817efa1742","tabbable":null,"tooltip":null,"value":136258214.0}},"8eed068b70074ce4b961370c8b40d17f":{"model_module":"@jupyter-widgets/controls","model_module_version":"2.0.0","model_name":"HTMLStyleModel","state":{"_model_module":"@jupyter-widgets/controls","_model_module_version":"2.0.0","_model_name":"HTMLStyleModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"2.0.0","_view_name":"StyleView","background":null,"description_width":"","font_size":null,"text_color":null}},"90c2d1df790d4e949b0f8c3345028fc3":{"model_module":"@jupyter-widgets/controls","model_module_version":"2.0.0","model_name":"HTMLModel","state":{"_dom_classes":[],"_model_module":"@jupyter-widgets/controls","_model_module_version":"2.0.0","_model_name":"HTMLModel","_view_count":null,"_view_module":"@jupyter-widgets/controls","_view_module_version":"2.0.0","_view_name":"HTMLView","description":"","description_allow_html":false,"layout":"IPY_MODEL_01b51b12bc764173b5a17a614355d5de","placeholder":"​","style":"IPY_MODEL_a8a55605c78242ea8d696d543090a404","tabbable":null,"tooltip":null,"value":"train-00003-of-00006.parquet: 100%"}},"917a6604323c47c0a493ff11305a406b":{"model_module":"@jupyter-widgets/base","model_module_version":"2.0.0","model_name":"LayoutModel","state":{"_model_module":"@jupyter-widgets/base","_model_module_version":"2.0.0","_model_name":"LayoutModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"2.0.0","_view_name":"LayoutView","align_content":null,"align_items":null,"align_self":null,"border_bottom":null,"border_left":null,"border_right":null,"border_top":null,"bottom":null,"display":null,"flex":null,"flex_flow":null,"grid_area":null,"grid_auto_columns":null,"grid_auto_flow":null,"grid_auto_rows":null,"grid_column":null,"grid_gap":null,"grid_row":null,"grid_template_areas":null,"grid_template_columns":null,"grid_template_rows":null,"height":null,"justify_content":null,"justify_items":null,"left":null,"margin":null,"max_height":null,"max_width":null,"min_height":null,"min_width":null,"object_fit":null,"object_position":null,"order":null,"overflow":null,"padding":null,"right":null,"top":null,"visibility":null,"width":null}},"92974fce44904f429b2e4dae6b0c6e6f":{"model_module":"@jupyter-widgets/base","model_module_version":"2.0.0","model_name":"LayoutModel","state":{"_model_module":"@jupyter-widgets/base","_model_module_version":"2.0.0","_model_name":"LayoutModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"2.0.0","_view_name":"LayoutView","align_content":null,"align_items":null,"align_self":null,"border_bottom":null,"border_left":null,"border_right":null,"border_top":null,"bottom":null,"display":null,"flex":null,"flex_flow":null,"grid_area":null,"grid_auto_columns":null,"grid_auto_flow":null,"grid_auto_rows":null,"grid_column":null,"grid_gap":null,"grid_row":null,"grid_template_areas":null,"grid_template_columns":null,"grid_template_rows":null,"height":null,"justify_content":null,"justify_items":null,"left":null,"margin":null,"max_height":null,"max_width":null,"min_height":null,"min_width":null,"object_fit":null,"object_position":null,"order":null,"overflow":null,"padding":null,"right":null,"top":null,"visibility":null,"width":null}},"92a1a7624b304616bf8a63cfd9c46fd0":{"model_module":"@jupyter-widgets/controls","model_module_version":"2.0.0","model_name":"FloatProgressModel","state":{"_dom_classes":[],"_model_module":"@jupyter-widgets/controls","_model_module_version":"2.0.0","_model_name":"FloatProgressModel","_view_count":null,"_view_module":"@jupyter-widgets/controls","_view_module_version":"2.0.0","_view_name":"ProgressView","bar_style":"success","description":"","description_allow_html":false,"layout":"IPY_MODEL_57921d03be1d4c83af883d1063e870f1","max":135629068.0,"min":0.0,"orientation":"horizontal","style":"IPY_MODEL_e080e4c8732b43c9aa48c0e9303f1e3f","tabbable":null,"tooltip":null,"value":135629068.0}},"92e34b6f6ef84c0bb08a05529fce061c":{"model_module":"@jupyter-widgets/base","model_module_version":"2.0.0","model_name":"LayoutModel","state":{"_model_module":"@jupyter-widgets/base","_model_module_version":"2.0.0","_model_name":"LayoutModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"2.0.0","_view_name":"LayoutView","align_content":null,"align_items":null,"align_self":null,"border_bottom":null,"border_left":null,"border_right":null,"border_top":null,"bottom":null,"display":null,"flex":null,"flex_flow":null,"grid_area":null,"grid_auto_columns":null,"grid_auto_flow":null,"grid_auto_rows":null,"grid_column":null,"grid_gap":null,"grid_row":null,"grid_template_areas":null,"grid_template_columns":null,"grid_template_rows":null,"height":null,"justify_content":null,"justify_items":null,"left":null,"margin":null,"max_height":null,"max_width":null,"min_height":null,"min_width":null,"object_fit":null,"object_position":null,"order":null,"overflow":null,"padding":null,"right":null,"top":null,"visibility":null,"width":null}},"93f5bc258ab9438ab7150311bf4c99f4":{"model_module":"@jupyter-widgets/controls","model_module_version":"2.0.0","model_name":"HTMLStyleModel","state":{"_model_module":"@jupyter-widgets/controls","_model_module_version":"2.0.0","_model_name":"HTMLStyleModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"2.0.0","_view_name":"StyleView","background":null,"description_width":"","font_size":null,"text_color":null}},"943d5451e2c749baaa879098a1712ef1":{"model_module":"@jupyter-widgets/base","model_module_version":"2.0.0","model_name":"LayoutModel","state":{"_model_module":"@jupyter-widgets/base","_model_module_version":"2.0.0","_model_name":"LayoutModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"2.0.0","_view_name":"LayoutView","align_content":null,"align_items":null,"align_self":null,"border_bottom":null,"border_left":null,"border_right":null,"border_top":null,"bottom":null,"display":null,"flex":null,"flex_flow":null,"grid_area":null,"grid_auto_columns":null,"grid_auto_flow":null,"grid_auto_rows":null,"grid_column":null,"grid_gap":null,"grid_row":null,"grid_template_areas":null,"grid_template_columns":null,"grid_template_rows":null,"height":null,"justify_content":null,"justify_items":null,"left":null,"margin":null,"max_height":null,"max_width":null,"min_height":null,"min_width":null,"object_fit":null,"object_position":null,"order":null,"overflow":null,"padding":null,"right":null,"top":null,"visibility":null,"width":null}},"9486c44d2dbe41fb9caae32d1c398f45":{"model_module":"@jupyter-widgets/base","model_module_version":"2.0.0","model_name":"LayoutModel","state":{"_model_module":"@jupyter-widgets/base","_model_module_version":"2.0.0","_model_name":"LayoutModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"2.0.0","_view_name":"LayoutView","align_content":null,"align_items":null,"align_self":null,"border_bottom":null,"border_left":null,"border_right":null,"border_top":null,"bottom":null,"display":null,"flex":null,"flex_flow":null,"grid_area":null,"grid_auto_columns":null,"grid_auto_flow":null,"grid_auto_rows":null,"grid_column":null,"grid_gap":null,"grid_row":null,"grid_template_areas":null,"grid_template_columns":null,"grid_template_rows":null,"height":null,"justify_content":null,"justify_items":null,"left":null,"margin":null,"max_height":null,"max_width":null,"min_height":null,"min_width":null,"object_fit":null,"object_position":null,"order":null,"overflow":null,"padding":null,"right":null,"top":null,"visibility":null,"width":null}},"94f002d9026b402a981ec3370da3f610":{"model_module":"@jupyter-widgets/controls","model_module_version":"2.0.0","model_name":"HTMLModel","state":{"_dom_classes":[],"_model_module":"@jupyter-widgets/controls","_model_module_version":"2.0.0","_model_name":"HTMLModel","_view_count":null,"_view_module":"@jupyter-widgets/controls","_view_module_version":"2.0.0","_view_name":"HTMLView","description":"","description_allow_html":false,"layout":"IPY_MODEL_a251d8922a094370b0cbf1088a51f741","placeholder":"​","style":"IPY_MODEL_fb001d6159a444b0b018cda04bc3e57e","tabbable":null,"tooltip":null,"value":" 79.3M/79.3M [00:00&lt;00:00, 244MB/s]"}},"96844573eeb8431bbc207b842517b4be":{"model_module":"@jupyter-widgets/controls","model_module_version":"2.0.0","model_name":"ProgressStyleModel","state":{"_model_module":"@jupyter-widgets/controls","_model_module_version":"2.0.0","_model_name":"ProgressStyleModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"2.0.0","_view_name":"StyleView","bar_color":null,"description_width":""}},"968a9edb0f7646a487f7b8522357724d":{"model_module":"@jupyter-widgets/controls","model_module_version":"2.0.0","model_name":"HTMLModel","state":{"_dom_classes":[],"_model_module":"@jupyter-widgets/controls","_model_module_version":"2.0.0","_model_name":"HTMLModel","_view_count":null,"_view_module":"@jupyter-widgets/controls","_view_module_version":"2.0.0","_view_name":"HTMLView","description":"","description_allow_html":false,"layout":"IPY_MODEL_62877ff1abd04486adeac1bc60eac582","placeholder":"​","style":"IPY_MODEL_3f7263b4479a4a7b914b3448121961c5","tabbable":null,"tooltip":null,"value":"train-00005-of-00006.parquet: 100%"}},"98c3278c4ece4b8a81221690eff68c22":{"model_module":"@jupyter-widgets/controls","model_module_version":"2.0.0","model_name":"HTMLStyleModel","state":{"_model_module":"@jupyter-widgets/controls","_model_module_version":"2.0.0","_model_name":"HTMLStyleModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"2.0.0","_view_name":"StyleView","background":null,"description_width":"","font_size":null,"text_color":null}},"98f9f692a2214476856dd37de92442db":{"model_module":"@jupyter-widgets/controls","model_module_version":"2.0.0","model_name":"FloatProgressModel","state":{"_dom_classes":[],"_model_module":"@jupyter-widgets/controls","_model_module_version":"2.0.0","_model_name":"FloatProgressModel","_view_count":null,"_view_module":"@jupyter-widgets/controls","_view_module_version":"2.0.0","_view_name":"ProgressView","bar_style":"success","description":"","description_allow_html":false,"layout":"IPY_MODEL_56c56181a5b94205a78622ae57b9c53d","max":415416.0,"min":0.0,"orientation":"horizontal","style":"IPY_MODEL_facdd14ad2294324ac9cfef74f3b5948","tabbable":null,"tooltip":null,"value":415416.0}},"9a91971dabe7444788a52179ef616f93":{"model_module":"@jupyter-widgets/base","model_module_version":"2.0.0","model_name":"LayoutModel","state":{"_model_module":"@jupyter-widgets/base","_model_module_version":"2.0.0","_model_name":"LayoutModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"2.0.0","_view_name":"LayoutView","align_content":null,"align_items":null,"align_self":null,"border_bottom":null,"border_left":null,"border_right":null,"border_top":null,"bottom":null,"display":null,"flex":null,"flex_flow":null,"grid_area":null,"grid_auto_columns":null,"grid_auto_flow":null,"grid_auto_rows":null,"grid_column":null,"grid_gap":null,"grid_row":null,"grid_template_areas":null,"grid_template_columns":null,"grid_template_rows":null,"height":null,"justify_content":null,"justify_items":null,"left":null,"margin":null,"max_height":null,"max_width":null,"min_height":null,"min_width":null,"object_fit":null,"object_position":null,"order":null,"overflow":null,"padding":null,"right":null,"top":null,"visibility":null,"width":null}},"9b618510a81542409b8f703c0808f2ee":{"model_module":"@jupyter-widgets/base","model_module_version":"2.0.0","model_name":"LayoutModel","state":{"_model_module":"@jupyter-widgets/base","_model_module_version":"2.0.0","_model_name":"LayoutModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"2.0.0","_view_name":"LayoutView","align_content":null,"align_items":null,"align_self":null,"border_bottom":null,"border_left":null,"border_right":null,"border_top":null,"bottom":null,"display":null,"flex":null,"flex_flow":null,"grid_area":null,"grid_auto_columns":null,"grid_auto_flow":null,"grid_auto_rows":null,"grid_column":null,"grid_gap":null,"grid_row":null,"grid_template_areas":null,"grid_template_columns":null,"grid_template_rows":null,"height":null,"justify_content":null,"justify_items":null,"left":null,"margin":null,"max_height":null,"max_width":null,"min_height":null,"min_width":null,"object_fit":null,"object_position":null,"order":null,"overflow":null,"padding":null,"right":null,"top":null,"visibility":null,"width":null}},"9bfe7456481245ec89602a8a1a9c47e2":{"model_module":"@jupyter-widgets/controls","model_module_version":"2.0.0","model_name":"ProgressStyleModel","state":{"_model_module":"@jupyter-widgets/controls","_model_module_version":"2.0.0","_model_name":"ProgressStyleModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"2.0.0","_view_name":"StyleView","bar_color":null,"description_width":""}},"9dcbcf873675470bacd595b8ea10b116":{"model_module":"@jupyter-widgets/base","model_module_version":"2.0.0","model_name":"LayoutModel","state":{"_model_module":"@jupyter-widgets/base","_model_module_version":"2.0.0","_model_name":"LayoutModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"2.0.0","_view_name":"LayoutView","align_content":null,"align_items":null,"align_self":null,"border_bottom":null,"border_left":null,"border_right":null,"border_top":null,"bottom":null,"display":null,"flex":null,"flex_flow":null,"grid_area":null,"grid_auto_columns":null,"grid_auto_flow":null,"grid_auto_rows":null,"grid_column":null,"grid_gap":null,"grid_row":null,"grid_template_areas":null,"grid_template_columns":null,"grid_template_rows":null,"height":null,"justify_content":null,"justify_items":null,"left":null,"margin":null,"max_height":null,"max_width":null,"min_height":null,"min_width":null,"object_fit":null,"object_position":null,"order":null,"overflow":null,"padding":null,"right":null,"top":null,"visibility":null,"width":null}},"a11dda3461e94a798ca7b694ed2b72fb":{"model_module":"@jupyter-widgets/controls","model_module_version":"2.0.0","model_name":"HTMLStyleModel","state":{"_model_module":"@jupyter-widgets/controls","_model_module_version":"2.0.0","_model_name":"HTMLStyleModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"2.0.0","_view_name":"StyleView","background":null,"description_width":"","font_size":null,"text_color":null}},"a1ddee10d06d4fcb84cb1e6d0b39a6f9":{"model_module":"@jupyter-widgets/base","model_module_version":"2.0.0","model_name":"LayoutModel","state":{"_model_module":"@jupyter-widgets/base","_model_module_version":"2.0.0","_model_name":"LayoutModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"2.0.0","_view_name":"LayoutView","align_content":null,"align_items":null,"align_self":null,"border_bottom":null,"border_left":null,"border_right":null,"border_top":null,"bottom":null,"display":null,"flex":null,"flex_flow":null,"grid_area":null,"grid_auto_columns":null,"grid_auto_flow":null,"grid_auto_rows":null,"grid_column":null,"grid_gap":null,"grid_row":null,"grid_template_areas":null,"grid_template_columns":null,"grid_template_rows":null,"height":null,"justify_content":null,"justify_items":null,"left":null,"margin":null,"max_height":null,"max_width":null,"min_height":null,"min_width":null,"object_fit":null,"object_position":null,"order":null,"overflow":null,"padding":null,"right":null,"top":null,"visibility":null,"width":null}},"a251d8922a094370b0cbf1088a51f741":{"model_module":"@jupyter-widgets/base","model_module_version":"2.0.0","model_name":"LayoutModel","state":{"_model_module":"@jupyter-widgets/base","_model_module_version":"2.0.0","_model_name":"LayoutModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"2.0.0","_view_name":"LayoutView","align_content":null,"align_items":null,"align_self":null,"border_bottom":null,"border_left":null,"border_right":null,"border_top":null,"bottom":null,"display":null,"flex":null,"flex_flow":null,"grid_area":null,"grid_auto_columns":null,"grid_auto_flow":null,"grid_auto_rows":null,"grid_column":null,"grid_gap":null,"grid_row":null,"grid_template_areas":null,"grid_template_columns":null,"grid_template_rows":null,"height":null,"justify_content":null,"justify_items":null,"left":null,"margin":null,"max_height":null,"max_width":null,"min_height":null,"min_width":null,"object_fit":null,"object_position":null,"order":null,"overflow":null,"padding":null,"right":null,"top":null,"visibility":null,"width":null}},"a268d4be5a704379a537fd53e593445b":{"model_module":"@jupyter-widgets/base","model_module_version":"2.0.0","model_name":"LayoutModel","state":{"_model_module":"@jupyter-widgets/base","_model_module_version":"2.0.0","_model_name":"LayoutModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"2.0.0","_view_name":"LayoutView","align_content":null,"align_items":null,"align_self":null,"border_bottom":null,"border_left":null,"border_right":null,"border_top":null,"bottom":null,"display":null,"flex":null,"flex_flow":null,"grid_area":null,"grid_auto_columns":null,"grid_auto_flow":null,"grid_auto_rows":null,"grid_column":null,"grid_gap":null,"grid_row":null,"grid_template_areas":null,"grid_template_columns":null,"grid_template_rows":null,"height":null,"justify_content":null,"justify_items":null,"left":null,"margin":null,"max_height":null,"max_width":null,"min_height":null,"min_width":null,"object_fit":null,"object_position":null,"order":null,"overflow":null,"padding":null,"right":null,"top":null,"visibility":null,"width":null}},"a2fe478dd3a74a118f97888893f5a83f":{"model_module":"@jupyter-widgets/controls","model_module_version":"2.0.0","model_name":"HBoxModel","state":{"_dom_classes":[],"_model_module":"@jupyter-widgets/controls","_model_module_version":"2.0.0","_model_name":"HBoxModel","_view_count":null,"_view_module":"@jupyter-widgets/controls","_view_module_version":"2.0.0","_view_name":"HBoxView","box_style":"","children":["IPY_MODEL_6d3d5cd8f35945e89d983a2473323504","IPY_MODEL_3388533ecef14599a8a912f7a56891c8","IPY_MODEL_6b6dae27716c457bb4711ed91f625524"],"layout":"IPY_MODEL_c31dcd08773e48dcbf5cab19758a5b5c","tabbable":null,"tooltip":null}},"a40ea376ee494354aca8bc3ff7943747":{"model_module":"@jupyter-widgets/base","model_module_version":"2.0.0","model_name":"LayoutModel","state":{"_model_module":"@jupyter-widgets/base","_model_module_version":"2.0.0","_model_name":"LayoutModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"2.0.0","_view_name":"LayoutView","align_content":null,"align_items":null,"align_self":null,"border_bottom":null,"border_left":null,"border_right":null,"border_top":null,"bottom":null,"display":null,"flex":null,"flex_flow":null,"grid_area":null,"grid_auto_columns":null,"grid_auto_flow":null,"grid_auto_rows":null,"grid_column":null,"grid_gap":null,"grid_row":null,"grid_template_areas":null,"grid_template_columns":null,"grid_template_rows":null,"height":null,"justify_content":null,"justify_items":null,"left":null,"margin":null,"max_height":null,"max_width":null,"min_height":null,"min_width":null,"object_fit":null,"object_position":null,"order":null,"overflow":null,"padding":null,"right":null,"top":null,"visibility":null,"width":null}},"a49367c790e546a78ca30ab79886f6ed":{"model_module":"@jupyter-widgets/controls","model_module_version":"2.0.0","model_name":"HTMLStyleModel","state":{"_model_module":"@jupyter-widgets/controls","_model_module_version":"2.0.0","_model_name":"HTMLStyleModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"2.0.0","_view_name":"StyleView","background":null,"description_width":"","font_size":null,"text_color":null}},"a6f70d9a548b4370be5676a7ebc4088b":{"model_module":"@jupyter-widgets/controls","model_module_version":"2.0.0","model_name":"HTMLStyleModel","state":{"_model_module":"@jupyter-widgets/controls","_model_module_version":"2.0.0","_model_name":"HTMLStyleModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"2.0.0","_view_name":"StyleView","background":null,"description_width":"","font_size":null,"text_color":null}},"a7b8204631cf48eb94253b2def9612eb":{"model_module":"@jupyter-widgets/base","model_module_version":"2.0.0","model_name":"LayoutModel","state":{"_model_module":"@jupyter-widgets/base","_model_module_version":"2.0.0","_model_name":"LayoutModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"2.0.0","_view_name":"LayoutView","align_content":null,"align_items":null,"align_self":null,"border_bottom":null,"border_left":null,"border_right":null,"border_top":null,"bottom":null,"display":null,"flex":null,"flex_flow":null,"grid_area":null,"grid_auto_columns":null,"grid_auto_flow":null,"grid_auto_rows":null,"grid_column":null,"grid_gap":null,"grid_row":null,"grid_template_areas":null,"grid_template_columns":null,"grid_template_rows":null,"height":null,"justify_content":null,"justify_items":null,"left":null,"margin":null,"max_height":null,"max_width":null,"min_height":null,"min_width":null,"object_fit":null,"object_position":null,"order":null,"overflow":null,"padding":null,"right":null,"top":null,"visibility":null,"width":null}},"a8a55605c78242ea8d696d543090a404":{"model_module":"@jupyter-widgets/controls","model_module_version":"2.0.0","model_name":"HTMLStyleModel","state":{"_model_module":"@jupyter-widgets/controls","_model_module_version":"2.0.0","_model_name":"HTMLStyleModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"2.0.0","_view_name":"StyleView","background":null,"description_width":"","font_size":null,"text_color":null}},"a95aa978cead47fcb0551ae43afb50b9":{"model_module":"@jupyter-widgets/controls","model_module_version":"2.0.0","model_name":"ProgressStyleModel","state":{"_model_module":"@jupyter-widgets/controls","_model_module_version":"2.0.0","_model_name":"ProgressStyleModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"2.0.0","_view_name":"StyleView","bar_color":null,"description_width":""}},"acd3d255167849a08bfdca490fad8daa":{"model_module":"@jupyter-widgets/controls","model_module_version":"2.0.0","model_name":"HTMLStyleModel","state":{"_model_module":"@jupyter-widgets/controls","_model_module_version":"2.0.0","_model_name":"HTMLStyleModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"2.0.0","_view_name":"StyleView","background":null,"description_width":"","font_size":null,"text_color":null}},"ad757822060e471998df00abb8051e80":{"model_module":"@jupyter-widgets/controls","model_module_version":"2.0.0","model_name":"HBoxModel","state":{"_dom_classes":[],"_model_module":"@jupyter-widgets/controls","_model_module_version":"2.0.0","_model_name":"HBoxModel","_view_count":null,"_view_module":"@jupyter-widgets/controls","_view_module_version":"2.0.0","_view_name":"HBoxView","box_style":"","children":["IPY_MODEL_e0e4d1091bb44c28ab678047843b16c7","IPY_MODEL_41d5d669480242758b2e2fd877045a36","IPY_MODEL_5d3955dfcbb04bd5a093b85a943061cf"],"layout":"IPY_MODEL_fabc4b40c4ee49fe80166a31dec6788e","tabbable":null,"tooltip":null}},"b15ffd8de65d4356979220c713f53420":{"model_module":"@jupyter-widgets/controls","model_module_version":"2.0.0","model_name":"HBoxModel","state":{"_dom_classes":[],"_model_module":"@jupyter-widgets/controls","_model_module_version":"2.0.0","_model_name":"HBoxModel","_view_count":null,"_view_module":"@jupyter-widgets/controls","_view_module_version":"2.0.0","_view_name":"HBoxView","box_style":"","children":["IPY_MODEL_b9aa1fc7b9944f46acdce27a5a50dec6","IPY_MODEL_68e73b9d57b34878956a78841c4f8719","IPY_MODEL_94f002d9026b402a981ec3370da3f610"],"layout":"IPY_MODEL_d1859395d3eb400da08dff7ab5cf464f","tabbable":null,"tooltip":null}},"b18d50308344455ca36c4648dc3b82bf":{"model_module":"@jupyter-widgets/base","model_module_version":"2.0.0","model_name":"LayoutModel","state":{"_model_module":"@jupyter-widgets/base","_model_module_version":"2.0.0","_model_name":"LayoutModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"2.0.0","_view_name":"LayoutView","align_content":null,"align_items":null,"align_self":null,"border_bottom":null,"border_left":null,"border_right":null,"border_top":null,"bottom":null,"display":null,"flex":null,"flex_flow":null,"grid_area":null,"grid_auto_columns":null,"grid_auto_flow":null,"grid_auto_rows":null,"grid_column":null,"grid_gap":null,"grid_row":null,"grid_template_areas":null,"grid_template_columns":null,"grid_template_rows":null,"height":null,"justify_content":null,"justify_items":null,"left":null,"margin":null,"max_height":null,"max_width":null,"min_height":null,"min_width":null,"object_fit":null,"object_position":null,"order":null,"overflow":null,"padding":null,"right":null,"top":null,"visibility":null,"width":null}},"b6159ea2dea7467d80372cc69e45d281":{"model_module":"@jupyter-widgets/controls","model_module_version":"2.0.0","model_name":"HTMLModel","state":{"_dom_classes":[],"_model_module":"@jupyter-widgets/controls","_model_module_version":"2.0.0","_model_name":"HTMLModel","_view_count":null,"_view_module":"@jupyter-widgets/controls","_view_module_version":"2.0.0","_view_name":"HTMLView","description":"","description_allow_html":false,"layout":"IPY_MODEL_705aa56c448445c487ffe4cf7d012eb3","placeholder":"​","style":"IPY_MODEL_f37491de07f747f187b7b6b4f0ca2f3a","tabbable":null,"tooltip":null,"value":"train-00001-of-00006.parquet: 100%"}},"b69b083bffb84907aa0b529d13e30939":{"model_module":"@jupyter-widgets/base","model_module_version":"2.0.0","model_name":"LayoutModel","state":{"_model_module":"@jupyter-widgets/base","_model_module_version":"2.0.0","_model_name":"LayoutModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"2.0.0","_view_name":"LayoutView","align_content":null,"align_items":null,"align_self":null,"border_bottom":null,"border_left":null,"border_right":null,"border_top":null,"bottom":null,"display":null,"flex":null,"flex_flow":null,"grid_area":null,"grid_auto_columns":null,"grid_auto_flow":null,"grid_auto_rows":null,"grid_column":null,"grid_gap":null,"grid_row":null,"grid_template_areas":null,"grid_template_columns":null,"grid_template_rows":null,"height":null,"justify_content":null,"justify_items":null,"left":null,"margin":null,"max_height":null,"max_width":null,"min_height":null,"min_width":null,"object_fit":null,"object_position":null,"order":null,"overflow":null,"padding":null,"right":null,"top":null,"visibility":null,"width":null}},"b6cae9fd27ad4e748372dd1699cbb2f2":{"model_module":"@jupyter-widgets/base","model_module_version":"2.0.0","model_name":"LayoutModel","state":{"_model_module":"@jupyter-widgets/base","_model_module_version":"2.0.0","_model_name":"LayoutModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"2.0.0","_view_name":"LayoutView","align_content":null,"align_items":null,"align_self":null,"border_bottom":null,"border_left":null,"border_right":null,"border_top":null,"bottom":null,"display":null,"flex":null,"flex_flow":null,"grid_area":null,"grid_auto_columns":null,"grid_auto_flow":null,"grid_auto_rows":null,"grid_column":null,"grid_gap":null,"grid_row":null,"grid_template_areas":null,"grid_template_columns":null,"grid_template_rows":null,"height":null,"justify_content":null,"justify_items":null,"left":null,"margin":null,"max_height":null,"max_width":null,"min_height":null,"min_width":null,"object_fit":null,"object_position":null,"order":null,"overflow":null,"padding":null,"right":null,"top":null,"visibility":null,"width":null}},"b78aa230a81d4712a7f3cf02bbdd1855":{"model_module":"@jupyter-widgets/controls","model_module_version":"2.0.0","model_name":"HTMLModel","state":{"_dom_classes":[],"_model_module":"@jupyter-widgets/controls","_model_module_version":"2.0.0","_model_name":"HTMLModel","_view_count":null,"_view_module":"@jupyter-widgets/controls","_view_module_version":"2.0.0","_view_name":"HTMLView","description":"","description_allow_html":false,"layout":"IPY_MODEL_6365fb3ee1cb4b5c85bc09a55f6ec674","placeholder":"​","style":"IPY_MODEL_49ad385049fb45f3b9945de8698e44f1","tabbable":null,"tooltip":null,"value":" 142M/142M [00:00&lt;00:00, 253MB/s]"}},"b909f050350e432487ef5f1dcd89493b":{"model_module":"@jupyter-widgets/base","model_module_version":"2.0.0","model_name":"LayoutModel","state":{"_model_module":"@jupyter-widgets/base","_model_module_version":"2.0.0","_model_name":"LayoutModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"2.0.0","_view_name":"LayoutView","align_content":null,"align_items":null,"align_self":null,"border_bottom":null,"border_left":null,"border_right":null,"border_top":null,"bottom":null,"display":null,"flex":null,"flex_flow":null,"grid_area":null,"grid_auto_columns":null,"grid_auto_flow":null,"grid_auto_rows":null,"grid_column":null,"grid_gap":null,"grid_row":null,"grid_template_areas":null,"grid_template_columns":null,"grid_template_rows":null,"height":null,"justify_content":null,"justify_items":null,"left":null,"margin":null,"max_height":null,"max_width":null,"min_height":null,"min_width":null,"object_fit":null,"object_position":null,"order":null,"overflow":null,"padding":null,"right":null,"top":null,"visibility":null,"width":null}},"b9aa1fc7b9944f46acdce27a5a50dec6":{"model_module":"@jupyter-widgets/controls","model_module_version":"2.0.0","model_name":"HTMLModel","state":{"_dom_classes":[],"_model_module":"@jupyter-widgets/controls","_model_module_version":"2.0.0","_model_name":"HTMLModel","_view_count":null,"_view_module":"@jupyter-widgets/controls","_view_module_version":"2.0.0","_view_name":"HTMLView","description":"","description_allow_html":false,"layout":"IPY_MODEL_6506be2b823d499f86eb1bae711ddeca","placeholder":"​","style":"IPY_MODEL_897f38ebdde247479535382bbdc8b11a","tabbable":null,"tooltip":null,"value":"validation-00000-of-00003.parquet: 100%"}},"b9feaef8d0f845a1888d8a99384ffc6e":{"model_module":"@jupyter-widgets/controls","model_module_version":"2.0.0","model_name":"HTMLModel","state":{"_dom_classes":[],"_model_module":"@jupyter-widgets/controls","_model_module_version":"2.0.0","_model_name":"HTMLModel","_view_count":null,"_view_module":"@jupyter-widgets/controls","_view_module_version":"2.0.0","_view_name":"HTMLView","description":"","description_allow_html":false,"layout":"IPY_MODEL_696884d848564d1b9653e29a9808eb3d","placeholder":"​","style":"IPY_MODEL_a6f70d9a548b4370be5676a7ebc4088b","tabbable":null,"tooltip":null,"value":" 73.3M/73.3M [00:00&lt;00:00, 259MB/s]"}},"b9fefb5d8e5b46249964076a3f19ec46":{"model_module":"@jupyter-widgets/controls","model_module_version":"2.0.0","model_name":"HTMLStyleModel","state":{"_model_module":"@jupyter-widgets/controls","_model_module_version":"2.0.0","_model_name":"HTMLStyleModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"2.0.0","_view_name":"StyleView","background":null,"description_width":"","font_size":null,"text_color":null}},"ba1a84418c8d4c20ab68d1d1268d29d5":{"model_module":"@jupyter-widgets/base","model_module_version":"2.0.0","model_name":"LayoutModel","state":{"_model_module":"@jupyter-widgets/base","_model_module_version":"2.0.0","_model_name":"LayoutModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"2.0.0","_view_name":"LayoutView","align_content":null,"align_items":null,"align_self":null,"border_bottom":null,"border_left":null,"border_right":null,"border_top":null,"bottom":null,"display":null,"flex":null,"flex_flow":null,"grid_area":null,"grid_auto_columns":null,"grid_auto_flow":null,"grid_auto_rows":null,"grid_column":null,"grid_gap":null,"grid_row":null,"grid_template_areas":null,"grid_template_columns":null,"grid_template_rows":null,"height":null,"justify_content":null,"justify_items":null,"left":null,"margin":null,"max_height":null,"max_width":null,"min_height":null,"min_width":null,"object_fit":null,"object_position":null,"order":null,"overflow":null,"padding":null,"right":null,"top":null,"visibility":null,"width":null}},"ba458badc8024500a2022321feecfe60":{"model_module":"@jupyter-widgets/controls","model_module_version":"2.0.0","model_name":"HTMLModel","state":{"_dom_classes":[],"_model_module":"@jupyter-widgets/controls","_model_module_version":"2.0.0","_model_name":"HTMLModel","_view_count":null,"_view_module":"@jupyter-widgets/controls","_view_module_version":"2.0.0","_view_name":"HTMLView","description":"","description_allow_html":false,"layout":"IPY_MODEL_742e600c0d564b53baa59838466e1283","placeholder":"​","style":"IPY_MODEL_081e956a96ac4291893592997466b15f","tabbable":null,"tooltip":null,"value":"Generating validation split: 100%"}},"bce8c0d982594690a8accb3e692b3a20":{"model_module":"@jupyter-widgets/controls","model_module_version":"2.0.0","model_name":"HTMLModel","state":{"_dom_classes":[],"_model_module":"@jupyter-widgets/controls","_model_module_version":"2.0.0","_model_name":"HTMLModel","_view_count":null,"_view_module":"@jupyter-widgets/controls","_view_module_version":"2.0.0","_view_name":"HTMLView","description":"","description_allow_html":false,"layout":"IPY_MODEL_1e0de3057df74a2daa71efc125bdf0fd","placeholder":"​","style":"IPY_MODEL_93f5bc258ab9438ab7150311bf4c99f4","tabbable":null,"tooltip":null,"value":"test-00002-of-00003.parquet: 100%"}},"bd49a655ebe24df780e68ab1bc767cd8":{"model_module":"@jupyter-widgets/base","model_module_version":"2.0.0","model_name":"LayoutModel","state":{"_model_module":"@jupyter-widgets/base","_model_module_version":"2.0.0","_model_name":"LayoutModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"2.0.0","_view_name":"LayoutView","align_content":null,"align_items":null,"align_self":null,"border_bottom":null,"border_left":null,"border_right":null,"border_top":null,"bottom":null,"display":null,"flex":null,"flex_flow":null,"grid_area":null,"grid_auto_columns":null,"grid_auto_flow":null,"grid_auto_rows":null,"grid_column":null,"grid_gap":null,"grid_row":null,"grid_template_areas":null,"grid_template_columns":null,"grid_template_rows":null,"height":null,"justify_content":null,"justify_items":null,"left":null,"margin":null,"max_height":null,"max_width":null,"min_height":null,"min_width":null,"object_fit":null,"object_position":null,"order":null,"overflow":null,"padding":null,"right":null,"top":null,"visibility":null,"width":null}},"be984f6b84024147ad4b454c51adf399":{"model_module":"@jupyter-widgets/controls","model_module_version":"2.0.0","model_name":"HTMLModel","state":{"_dom_classes":[],"_model_module":"@jupyter-widgets/controls","_model_module_version":"2.0.0","_model_name":"HTMLModel","_view_count":null,"_view_module":"@jupyter-widgets/controls","_view_module_version":"2.0.0","_view_name":"HTMLView","description":"","description_allow_html":false,"layout":"IPY_MODEL_740c3830083640858b804a586f5abdbd","placeholder":"​","style":"IPY_MODEL_a49367c790e546a78ca30ab79886f6ed","tabbable":null,"tooltip":null,"value":" 6.94k/6.94k [00:00&lt;00:00, 627kB/s]"}},"c31dcd08773e48dcbf5cab19758a5b5c":{"model_module":"@jupyter-widgets/base","model_module_version":"2.0.0","model_name":"LayoutModel","state":{"_model_module":"@jupyter-widgets/base","_model_module_version":"2.0.0","_model_name":"LayoutModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"2.0.0","_view_name":"LayoutView","align_content":null,"align_items":null,"align_self":null,"border_bottom":null,"border_left":null,"border_right":null,"border_top":null,"bottom":null,"display":null,"flex":null,"flex_flow":null,"grid_area":null,"grid_auto_columns":null,"grid_auto_flow":null,"grid_auto_rows":null,"grid_column":null,"grid_gap":null,"grid_row":null,"grid_template_areas":null,"grid_template_columns":null,"grid_template_rows":null,"height":null,"justify_content":null,"justify_items":null,"left":null,"margin":null,"max_height":null,"max_width":null,"min_height":null,"min_width":null,"object_fit":null,"object_position":null,"order":null,"overflow":null,"padding":null,"right":null,"top":null,"visibility":null,"width":null}},"c336074808174d149c04cb04a651911b":{"model_module":"@jupyter-widgets/controls","model_module_version":"2.0.0","model_name":"HTMLModel","state":{"_dom_classes":[],"_model_module":"@jupyter-widgets/controls","_model_module_version":"2.0.0","_model_name":"HTMLModel","_view_count":null,"_view_module":"@jupyter-widgets/controls","_view_module_version":"2.0.0","_view_name":"HTMLView","description":"","description_allow_html":false,"layout":"IPY_MODEL_2d7ba54870ce4ac1a656ab1f9f09159c","placeholder":"​","style":"IPY_MODEL_98c3278c4ece4b8a81221690eff68c22","tabbable":null,"tooltip":null,"value":"validation-00001-of-00003.parquet: 100%"}},"c46643a0146044549bd31d96a89909ae":{"model_module":"@jupyter-widgets/controls","model_module_version":"2.0.0","model_name":"HBoxModel","state":{"_dom_classes":[],"_model_module":"@jupyter-widgets/controls","_model_module_version":"2.0.0","_model_name":"HBoxModel","_view_count":null,"_view_module":"@jupyter-widgets/controls","_view_module_version":"2.0.0","_view_name":"HBoxView","box_style":"","children":["IPY_MODEL_ba458badc8024500a2022321feecfe60","IPY_MODEL_0df82b8d7dd544a28219c2c8f94d5abe","IPY_MODEL_7357cbc5b6db4115b921de0f517a3309"],"layout":"IPY_MODEL_c7d8393ffb46477eb06d4a6af8234c19","tabbable":null,"tooltip":null}},"c4b9de6c3751465894b2c58f67066b37":{"model_module":"@jupyter-widgets/controls","model_module_version":"2.0.0","model_name":"FloatProgressModel","state":{"_dom_classes":[],"_model_module":"@jupyter-widgets/controls","_model_module_version":"2.0.0","_model_name":"FloatProgressModel","_view_count":null,"_view_module":"@jupyter-widgets/controls","_view_module_version":"2.0.0","_view_name":"ProgressView","bar_style":"success","description":"","description_allow_html":false,"layout":"IPY_MODEL_943d5451e2c749baaa879098a1712ef1","max":79386757.0,"min":0.0,"orientation":"horizontal","style":"IPY_MODEL_fdf3f11ae7544f8d84bde67426e16e83","tabbable":null,"tooltip":null,"value":79386757.0}},"c4f107c68ce64b86b08f6d1c33838aa2":{"model_module":"@jupyter-widgets/controls","model_module_version":"2.0.0","model_name":"HTMLStyleModel","state":{"_model_module":"@jupyter-widgets/controls","_model_module_version":"2.0.0","_model_name":"HTMLStyleModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"2.0.0","_view_name":"StyleView","background":null,"description_width":"","font_size":null,"text_color":null}},"c7d35c1a9c614ea0816900345a0df808":{"model_module":"@jupyter-widgets/controls","model_module_version":"2.0.0","model_name":"HTMLStyleModel","state":{"_model_module":"@jupyter-widgets/controls","_model_module_version":"2.0.0","_model_name":"HTMLStyleModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"2.0.0","_view_name":"StyleView","background":null,"description_width":"","font_size":null,"text_color":null}},"c7d8393ffb46477eb06d4a6af8234c19":{"model_module":"@jupyter-widgets/base","model_module_version":"2.0.0","model_name":"LayoutModel","state":{"_model_module":"@jupyter-widgets/base","_model_module_version":"2.0.0","_model_name":"LayoutModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"2.0.0","_view_name":"LayoutView","align_content":null,"align_items":null,"align_self":null,"border_bottom":null,"border_left":null,"border_right":null,"border_top":null,"bottom":null,"display":null,"flex":null,"flex_flow":null,"grid_area":null,"grid_auto_columns":null,"grid_auto_flow":null,"grid_auto_rows":null,"grid_column":null,"grid_gap":null,"grid_row":null,"grid_template_areas":null,"grid_template_columns":null,"grid_template_rows":null,"height":null,"justify_content":null,"justify_items":null,"left":null,"margin":null,"max_height":null,"max_width":null,"min_height":null,"min_width":null,"object_fit":null,"object_position":null,"order":null,"overflow":null,"padding":null,"right":null,"top":null,"visibility":null,"width":null}},"c83ee25de3bc42f9a6d3d343097e1f80":{"model_module":"@jupyter-widgets/controls","model_module_version":"2.0.0","model_name":"HTMLModel","state":{"_dom_classes":[],"_model_module":"@jupyter-widgets/controls","_model_module_version":"2.0.0","_model_name":"HTMLModel","_view_count":null,"_view_module":"@jupyter-widgets/controls","_view_module_version":"2.0.0","_view_name":"HTMLView","description":"","description_allow_html":false,"layout":"IPY_MODEL_066d5a6689ad4c20a8809e53da0db1bc","placeholder":"​","style":"IPY_MODEL_c7d35c1a9c614ea0816900345a0df808","tabbable":null,"tooltip":null,"value":" 79.4M/79.4M [00:00&lt;00:00, 221MB/s]"}},"cc05a08118b54fe884137c4cd29e763f":{"model_module":"@jupyter-widgets/base","model_module_version":"2.0.0","model_name":"LayoutModel","state":{"_model_module":"@jupyter-widgets/base","_model_module_version":"2.0.0","_model_name":"LayoutModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"2.0.0","_view_name":"LayoutView","align_content":null,"align_items":null,"align_self":null,"border_bottom":null,"border_left":null,"border_right":null,"border_top":null,"bottom":null,"display":null,"flex":null,"flex_flow":null,"grid_area":null,"grid_auto_columns":null,"grid_auto_flow":null,"grid_auto_rows":null,"grid_column":null,"grid_gap":null,"grid_row":null,"grid_template_areas":null,"grid_template_columns":null,"grid_template_rows":null,"height":null,"justify_content":null,"justify_items":null,"left":null,"margin":null,"max_height":null,"max_width":null,"min_height":null,"min_width":null,"object_fit":null,"object_position":null,"order":null,"overflow":null,"padding":null,"right":null,"top":null,"visibility":null,"width":null}},"d02b3a05a61941e7888837cb31d24744":{"model_module":"@jupyter-widgets/controls","model_module_version":"2.0.0","model_name":"HTMLStyleModel","state":{"_model_module":"@jupyter-widgets/controls","_model_module_version":"2.0.0","_model_name":"HTMLStyleModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"2.0.0","_view_name":"StyleView","background":null,"description_width":"","font_size":null,"text_color":null}},"d1859395d3eb400da08dff7ab5cf464f":{"model_module":"@jupyter-widgets/base","model_module_version":"2.0.0","model_name":"LayoutModel","state":{"_model_module":"@jupyter-widgets/base","_model_module_version":"2.0.0","_model_name":"LayoutModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"2.0.0","_view_name":"LayoutView","align_content":null,"align_items":null,"align_self":null,"border_bottom":null,"border_left":null,"border_right":null,"border_top":null,"bottom":null,"display":null,"flex":null,"flex_flow":null,"grid_area":null,"grid_auto_columns":null,"grid_auto_flow":null,"grid_auto_rows":null,"grid_column":null,"grid_gap":null,"grid_row":null,"grid_template_areas":null,"grid_template_columns":null,"grid_template_rows":null,"height":null,"justify_content":null,"justify_items":null,"left":null,"margin":null,"max_height":null,"max_width":null,"min_height":null,"min_width":null,"object_fit":null,"object_position":null,"order":null,"overflow":null,"padding":null,"right":null,"top":null,"visibility":null,"width":null}},"d3ba15f0de7b489caa67eadb6585451c":{"model_module":"@jupyter-widgets/controls","model_module_version":"2.0.0","model_name":"HTMLModel","state":{"_dom_classes":[],"_model_module":"@jupyter-widgets/controls","_model_module_version":"2.0.0","_model_name":"HTMLModel","_view_count":null,"_view_module":"@jupyter-widgets/controls","_view_module_version":"2.0.0","_view_name":"HTMLView","description":"","description_allow_html":false,"layout":"IPY_MODEL_444f33d76542408994f47051e01c9ae5","placeholder":"​","style":"IPY_MODEL_4794806b636c45cdaeb044edde9d16ba","tabbable":null,"tooltip":null,"value":" 136M/136M [00:00&lt;00:00, 255MB/s]"}},"d47d334b6a5043febe8713168ad152db":{"model_module":"@jupyter-widgets/controls","model_module_version":"2.0.0","model_name":"HBoxModel","state":{"_dom_classes":[],"_model_module":"@jupyter-widgets/controls","_model_module_version":"2.0.0","_model_name":"HBoxModel","_view_count":null,"_view_module":"@jupyter-widgets/controls","_view_module_version":"2.0.0","_view_name":"HBoxView","box_style":"","children":["IPY_MODEL_40bc3a5e27204ad9870f03fba63e3714","IPY_MODEL_98f9f692a2214476856dd37de92442db","IPY_MODEL_68ce883a6aeb4adcad33b0116248f84f"],"layout":"IPY_MODEL_917a6604323c47c0a493ff11305a406b","tabbable":null,"tooltip":null}},"d4833ba6d1d341449034f4357bc23145":{"model_module":"@jupyter-widgets/controls","model_module_version":"2.0.0","model_name":"HBoxModel","state":{"_dom_classes":[],"_model_module":"@jupyter-widgets/controls","_model_module_version":"2.0.0","_model_name":"HBoxModel","_view_count":null,"_view_module":"@jupyter-widgets/controls","_view_module_version":"2.0.0","_view_name":"HBoxView","box_style":"","children":["IPY_MODEL_8287e881c82c4f6c847dd18ab5f76486","IPY_MODEL_5372bcb016ab4541a2407d0c10d55bb0","IPY_MODEL_be984f6b84024147ad4b454c51adf399"],"layout":"IPY_MODEL_54a839bbbeaf40c9bf3b77fc4b625cd7","tabbable":null,"tooltip":null}},"d48b14ff00844c5789cb9aac8aec94e7":{"model_module":"@jupyter-widgets/controls","model_module_version":"2.0.0","model_name":"HTMLModel","state":{"_dom_classes":[],"_model_module":"@jupyter-widgets/controls","_model_module_version":"2.0.0","_model_name":"HTMLModel","_view_count":null,"_view_module":"@jupyter-widgets/controls","_view_module_version":"2.0.0","_view_name":"HTMLView","description":"","description_allow_html":false,"layout":"IPY_MODEL_f07fe52d407241548efd12ffd8f63fc8","placeholder":"​","style":"IPY_MODEL_36a72e52ecd349f4bfe72800bcfadde3","tabbable":null,"tooltip":null,"value":" 901028/901028 [00:05&lt;00:00, 159669.71 examples/s]"}},"d959e43bea2f4addbde3cb8d03f2cdaf":{"model_module":"@jupyter-widgets/controls","model_module_version":"2.0.0","model_name":"HTMLStyleModel","state":{"_model_module":"@jupyter-widgets/controls","_model_module_version":"2.0.0","_model_name":"HTMLStyleModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"2.0.0","_view_name":"StyleView","background":null,"description_width":"","font_size":null,"text_color":null}},"dee81c535a5a46b49c8ec7d043b2d5dc":{"model_module":"@jupyter-widgets/base","model_module_version":"2.0.0","model_name":"LayoutModel","state":{"_model_module":"@jupyter-widgets/base","_model_module_version":"2.0.0","_model_name":"LayoutModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"2.0.0","_view_name":"LayoutView","align_content":null,"align_items":null,"align_self":null,"border_bottom":null,"border_left":null,"border_right":null,"border_top":null,"bottom":null,"display":null,"flex":null,"flex_flow":null,"grid_area":null,"grid_auto_columns":null,"grid_auto_flow":null,"grid_auto_rows":null,"grid_column":null,"grid_gap":null,"grid_row":null,"grid_template_areas":null,"grid_template_columns":null,"grid_template_rows":null,"height":null,"justify_content":null,"justify_items":null,"left":null,"margin":null,"max_height":null,"max_width":null,"min_height":null,"min_width":null,"object_fit":null,"object_position":null,"order":null,"overflow":null,"padding":null,"right":null,"top":null,"visibility":null,"width":null}},"e01c3c1f0e914648b51acef0b4299c42":{"model_module":"@jupyter-widgets/base","model_module_version":"2.0.0","model_name":"LayoutModel","state":{"_model_module":"@jupyter-widgets/base","_model_module_version":"2.0.0","_model_name":"LayoutModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"2.0.0","_view_name":"LayoutView","align_content":null,"align_items":null,"align_self":null,"border_bottom":null,"border_left":null,"border_right":null,"border_top":null,"bottom":null,"display":null,"flex":null,"flex_flow":null,"grid_area":null,"grid_auto_columns":null,"grid_auto_flow":null,"grid_auto_rows":null,"grid_column":null,"grid_gap":null,"grid_row":null,"grid_template_areas":null,"grid_template_columns":null,"grid_template_rows":null,"height":null,"justify_content":null,"justify_items":null,"left":null,"margin":null,"max_height":null,"max_width":null,"min_height":null,"min_width":null,"object_fit":null,"object_position":null,"order":null,"overflow":null,"padding":null,"right":null,"top":null,"visibility":null,"width":null}},"e080e4c8732b43c9aa48c0e9303f1e3f":{"model_module":"@jupyter-widgets/controls","model_module_version":"2.0.0","model_name":"ProgressStyleModel","state":{"_model_module":"@jupyter-widgets/controls","_model_module_version":"2.0.0","_model_name":"ProgressStyleModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"2.0.0","_view_name":"StyleView","bar_color":null,"description_width":""}},"e0e4d1091bb44c28ab678047843b16c7":{"model_module":"@jupyter-widgets/controls","model_module_version":"2.0.0","model_name":"HTMLModel","state":{"_dom_classes":[],"_model_module":"@jupyter-widgets/controls","_model_module_version":"2.0.0","_model_name":"HTMLModel","_view_count":null,"_view_module":"@jupyter-widgets/controls","_view_module_version":"2.0.0","_view_name":"HTMLView","description":"","description_allow_html":false,"layout":"IPY_MODEL_ee193a5579764197a61c31463e817662","placeholder":"​","style":"IPY_MODEL_7b0142da01c5424ba0340d9de990e78e","tabbable":null,"tooltip":null,"value":"train-00004-of-00006.parquet: 100%"}},"e1b599af21de4eeba14037a69f9ffe16":{"model_module":"@jupyter-widgets/base","model_module_version":"2.0.0","model_name":"LayoutModel","state":{"_model_module":"@jupyter-widgets/base","_model_module_version":"2.0.0","_model_name":"LayoutModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"2.0.0","_view_name":"LayoutView","align_content":null,"align_items":null,"align_self":null,"border_bottom":null,"border_left":null,"border_right":null,"border_top":null,"bottom":null,"display":null,"flex":null,"flex_flow":null,"grid_area":null,"grid_auto_columns":null,"grid_auto_flow":null,"grid_auto_rows":null,"grid_column":null,"grid_gap":null,"grid_row":null,"grid_template_areas":null,"grid_template_columns":null,"grid_template_rows":null,"height":null,"justify_content":null,"justify_items":null,"left":null,"margin":null,"max_height":null,"max_width":null,"min_height":null,"min_width":null,"object_fit":null,"object_position":null,"order":null,"overflow":null,"padding":null,"right":null,"top":null,"visibility":null,"width":null}},"e87e7bbbfd6146f5baae2fd1e145de00":{"model_module":"@jupyter-widgets/controls","model_module_version":"2.0.0","model_name":"HTMLStyleModel","state":{"_model_module":"@jupyter-widgets/controls","_model_module_version":"2.0.0","_model_name":"HTMLStyleModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"2.0.0","_view_name":"StyleView","background":null,"description_width":"","font_size":null,"text_color":null}},"ec94c23591d046e6bf9031fae4d9f2f5":{"model_module":"@jupyter-widgets/controls","model_module_version":"2.0.0","model_name":"ProgressStyleModel","state":{"_model_module":"@jupyter-widgets/controls","_model_module_version":"2.0.0","_model_name":"ProgressStyleModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"2.0.0","_view_name":"StyleView","bar_color":null,"description_width":""}},"ee193a5579764197a61c31463e817662":{"model_module":"@jupyter-widgets/base","model_module_version":"2.0.0","model_name":"LayoutModel","state":{"_model_module":"@jupyter-widgets/base","_model_module_version":"2.0.0","_model_name":"LayoutModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"2.0.0","_view_name":"LayoutView","align_content":null,"align_items":null,"align_self":null,"border_bottom":null,"border_left":null,"border_right":null,"border_top":null,"bottom":null,"display":null,"flex":null,"flex_flow":null,"grid_area":null,"grid_auto_columns":null,"grid_auto_flow":null,"grid_auto_rows":null,"grid_column":null,"grid_gap":null,"grid_row":null,"grid_template_areas":null,"grid_template_columns":null,"grid_template_rows":null,"height":null,"justify_content":null,"justify_items":null,"left":null,"margin":null,"max_height":null,"max_width":null,"min_height":null,"min_width":null,"object_fit":null,"object_position":null,"order":null,"overflow":null,"padding":null,"right":null,"top":null,"visibility":null,"width":null}},"efbe8f49957c4e2e91fe09d0c3457fde":{"model_module":"@jupyter-widgets/controls","model_module_version":"2.0.0","model_name":"HTMLModel","state":{"_dom_classes":[],"_model_module":"@jupyter-widgets/controls","_model_module_version":"2.0.0","_model_name":"HTMLModel","_view_count":null,"_view_module":"@jupyter-widgets/controls","_view_module_version":"2.0.0","_view_name":"HTMLView","description":"","description_allow_html":false,"layout":"IPY_MODEL_7b48df58b2f74459a50650444a69298f","placeholder":"​","style":"IPY_MODEL_f50531c6e7114039a989556399c6a629","tabbable":null,"tooltip":null,"value":"train-00000-of-00006.parquet: 100%"}},"f07fe52d407241548efd12ffd8f63fc8":{"model_module":"@jupyter-widgets/base","model_module_version":"2.0.0","model_name":"LayoutModel","state":{"_model_module":"@jupyter-widgets/base","_model_module_version":"2.0.0","_model_name":"LayoutModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"2.0.0","_view_name":"LayoutView","align_content":null,"align_items":null,"align_self":null,"border_bottom":null,"border_left":null,"border_right":null,"border_top":null,"bottom":null,"display":null,"flex":null,"flex_flow":null,"grid_area":null,"grid_auto_columns":null,"grid_auto_flow":null,"grid_auto_rows":null,"grid_column":null,"grid_gap":null,"grid_row":null,"grid_template_areas":null,"grid_template_columns":null,"grid_template_rows":null,"height":null,"justify_content":null,"justify_items":null,"left":null,"margin":null,"max_height":null,"max_width":null,"min_height":null,"min_width":null,"object_fit":null,"object_position":null,"order":null,"overflow":null,"padding":null,"right":null,"top":null,"visibility":null,"width":null}},"f37491de07f747f187b7b6b4f0ca2f3a":{"model_module":"@jupyter-widgets/controls","model_module_version":"2.0.0","model_name":"HTMLStyleModel","state":{"_model_module":"@jupyter-widgets/controls","_model_module_version":"2.0.0","_model_name":"HTMLStyleModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"2.0.0","_view_name":"StyleView","background":null,"description_width":"","font_size":null,"text_color":null}},"f44b1f877be04381809171150c81557d":{"model_module":"@jupyter-widgets/controls","model_module_version":"2.0.0","model_name":"HBoxModel","state":{"_dom_classes":[],"_model_module":"@jupyter-widgets/controls","_model_module_version":"2.0.0","_model_name":"HBoxModel","_view_count":null,"_view_module":"@jupyter-widgets/controls","_view_module_version":"2.0.0","_view_name":"HBoxView","box_style":"","children":["IPY_MODEL_bce8c0d982594690a8accb3e692b3a20","IPY_MODEL_5da0af0f3b0b49889fe40e7651937c2a","IPY_MODEL_053dacd65e5942b99ed12b30abdb6614"],"layout":"IPY_MODEL_9486c44d2dbe41fb9caae32d1c398f45","tabbable":null,"tooltip":null}},"f4c74bc398ae4b20a13ac34a0f117605":{"model_module":"@jupyter-widgets/base","model_module_version":"2.0.0","model_name":"LayoutModel","state":{"_model_module":"@jupyter-widgets/base","_model_module_version":"2.0.0","_model_name":"LayoutModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"2.0.0","_view_name":"LayoutView","align_content":null,"align_items":null,"align_self":null,"border_bottom":null,"border_left":null,"border_right":null,"border_top":null,"bottom":null,"display":null,"flex":null,"flex_flow":null,"grid_area":null,"grid_auto_columns":null,"grid_auto_flow":null,"grid_auto_rows":null,"grid_column":null,"grid_gap":null,"grid_row":null,"grid_template_areas":null,"grid_template_columns":null,"grid_template_rows":null,"height":null,"justify_content":null,"justify_items":null,"left":null,"margin":null,"max_height":null,"max_width":null,"min_height":null,"min_width":null,"object_fit":null,"object_position":null,"order":null,"overflow":null,"padding":null,"right":null,"top":null,"visibility":null,"width":null}},"f50531c6e7114039a989556399c6a629":{"model_module":"@jupyter-widgets/controls","model_module_version":"2.0.0","model_name":"HTMLStyleModel","state":{"_model_module":"@jupyter-widgets/controls","_model_module_version":"2.0.0","_model_name":"HTMLStyleModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"2.0.0","_view_name":"StyleView","background":null,"description_width":"","font_size":null,"text_color":null}},"f5bc21eb35654d039d7bdb442368b28a":{"model_module":"@jupyter-widgets/controls","model_module_version":"2.0.0","model_name":"HTMLStyleModel","state":{"_model_module":"@jupyter-widgets/controls","_model_module_version":"2.0.0","_model_name":"HTMLStyleModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"2.0.0","_view_name":"StyleView","background":null,"description_width":"","font_size":null,"text_color":null}},"f7d9f811c8dd4434a10453d4ff6a7710":{"model_module":"@jupyter-widgets/controls","model_module_version":"2.0.0","model_name":"HTMLStyleModel","state":{"_model_module":"@jupyter-widgets/controls","_model_module_version":"2.0.0","_model_name":"HTMLStyleModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"2.0.0","_view_name":"StyleView","background":null,"description_width":"","font_size":null,"text_color":null}},"f80940c15a114ef9b6b7ca6b88591930":{"model_module":"@jupyter-widgets/controls","model_module_version":"2.0.0","model_name":"HTMLStyleModel","state":{"_model_module":"@jupyter-widgets/controls","_model_module_version":"2.0.0","_model_name":"HTMLStyleModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"2.0.0","_view_name":"StyleView","background":null,"description_width":"","font_size":null,"text_color":null}},"f9a6ad832e5a43deb549c876559b0d39":{"model_module":"@jupyter-widgets/controls","model_module_version":"2.0.0","model_name":"HTMLStyleModel","state":{"_model_module":"@jupyter-widgets/controls","_model_module_version":"2.0.0","_model_name":"HTMLStyleModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"2.0.0","_view_name":"StyleView","background":null,"description_width":"","font_size":null,"text_color":null}},"fa8640970ca64e6ea0848c63309b4f84":{"model_module":"@jupyter-widgets/base","model_module_version":"2.0.0","model_name":"LayoutModel","state":{"_model_module":"@jupyter-widgets/base","_model_module_version":"2.0.0","_model_name":"LayoutModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"2.0.0","_view_name":"LayoutView","align_content":null,"align_items":null,"align_self":null,"border_bottom":null,"border_left":null,"border_right":null,"border_top":null,"bottom":null,"display":null,"flex":null,"flex_flow":null,"grid_area":null,"grid_auto_columns":null,"grid_auto_flow":null,"grid_auto_rows":null,"grid_column":null,"grid_gap":null,"grid_row":null,"grid_template_areas":null,"grid_template_columns":null,"grid_template_rows":null,"height":null,"justify_content":null,"justify_items":null,"left":null,"margin":null,"max_height":null,"max_width":null,"min_height":null,"min_width":null,"object_fit":null,"object_position":null,"order":null,"overflow":null,"padding":null,"right":null,"top":null,"visibility":null,"width":null}},"fabc4b40c4ee49fe80166a31dec6788e":{"model_module":"@jupyter-widgets/base","model_module_version":"2.0.0","model_name":"LayoutModel","state":{"_model_module":"@jupyter-widgets/base","_model_module_version":"2.0.0","_model_name":"LayoutModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"2.0.0","_view_name":"LayoutView","align_content":null,"align_items":null,"align_self":null,"border_bottom":null,"border_left":null,"border_right":null,"border_top":null,"bottom":null,"display":null,"flex":null,"flex_flow":null,"grid_area":null,"grid_auto_columns":null,"grid_auto_flow":null,"grid_auto_rows":null,"grid_column":null,"grid_gap":null,"grid_row":null,"grid_template_areas":null,"grid_template_columns":null,"grid_template_rows":null,"height":null,"justify_content":null,"justify_items":null,"left":null,"margin":null,"max_height":null,"max_width":null,"min_height":null,"min_width":null,"object_fit":null,"object_position":null,"order":null,"overflow":null,"padding":null,"right":null,"top":null,"visibility":null,"width":null}},"facdd14ad2294324ac9cfef74f3b5948":{"model_module":"@jupyter-widgets/controls","model_module_version":"2.0.0","model_name":"ProgressStyleModel","state":{"_model_module":"@jupyter-widgets/controls","_model_module_version":"2.0.0","_model_name":"ProgressStyleModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"2.0.0","_view_name":"StyleView","bar_color":null,"description_width":""}},"fb001d6159a444b0b018cda04bc3e57e":{"model_module":"@jupyter-widgets/controls","model_module_version":"2.0.0","model_name":"HTMLStyleModel","state":{"_model_module":"@jupyter-widgets/controls","_model_module_version":"2.0.0","_model_name":"HTMLStyleModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"2.0.0","_view_name":"StyleView","background":null,"description_width":"","font_size":null,"text_color":null}},"fc322a81e1ba4897b6109359ca625faa":{"model_module":"@jupyter-widgets/controls","model_module_version":"2.0.0","model_name":"HTMLModel","state":{"_dom_classes":[],"_model_module":"@jupyter-widgets/controls","_model_module_version":"2.0.0","_model_name":"HTMLModel","_view_count":null,"_view_module":"@jupyter-widgets/controls","_view_module_version":"2.0.0","_view_name":"HTMLView","description":"","description_allow_html":false,"layout":"IPY_MODEL_896d8ae550dc4faca78a43fa4644acf2","placeholder":"​","style":"IPY_MODEL_416d0281ed99489d90cc9970cef1aeb9","tabbable":null,"tooltip":null,"value":" 136M/136M [00:00&lt;00:00, 253MB/s]"}},"fdcee49c5d3848f5bda151630ec63dcf":{"model_module":"@jupyter-widgets/controls","model_module_version":"2.0.0","model_name":"HTMLStyleModel","state":{"_model_module":"@jupyter-widgets/controls","_model_module_version":"2.0.0","_model_name":"HTMLStyleModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"2.0.0","_view_name":"StyleView","background":null,"description_width":"","font_size":null,"text_color":null}},"fdf3f11ae7544f8d84bde67426e16e83":{"model_module":"@jupyter-widgets/controls","model_module_version":"2.0.0","model_name":"ProgressStyleModel","state":{"_model_module":"@jupyter-widgets/controls","_model_module_version":"2.0.0","_model_name":"ProgressStyleModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"2.0.0","_view_name":"StyleView","bar_color":null,"description_width":""}},"ff80ee2423624ef093aeae243d79a56b":{"model_module":"@jupyter-widgets/controls","model_module_version":"2.0.0","model_name":"FloatProgressModel","state":{"_dom_classes":[],"_model_module":"@jupyter-widgets/controls","_model_module_version":"2.0.0","_model_name":"FloatProgressModel","_view_count":null,"_view_module":"@jupyter-widgets/controls","_view_module_version":"2.0.0","_view_name":"ProgressView","bar_style":"success","description":"","description_allow_html":false,"layout":"IPY_MODEL_04f5b4926274460f89ac4de6eac6320d","max":79418565.0,"min":0.0,"orientation":"horizontal","style":"IPY_MODEL_898ee620cfe0402899d2e03cf2c6a845","tabbable":null,"tooltip":null,"value":79418565.0}}},"version_major":2,"version_minor":0}}},"nbformat":4,"nbformat_minor":5}